// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: collect.proto

package events

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnvelopeType int32

const (
	EnvelopeType_UNSET   EnvelopeType = 0
	EnvelopeType_DEEP    EnvelopeType = 1
	EnvelopeType_SHALLOW EnvelopeType = 2
)

// Enum value maps for EnvelopeType.
var (
	EnvelopeType_name = map[int32]string{
		0: "UNSET",
		1: "DEEP",
		2: "SHALLOW",
	}
	EnvelopeType_value = map[string]int32{
		"UNSET":   0,
		"DEEP":    1,
		"SHALLOW": 2,
	}
)

func (x EnvelopeType) Enum() *EnvelopeType {
	p := new(EnvelopeType)
	*p = x
	return p
}

func (x EnvelopeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnvelopeType) Descriptor() protoreflect.EnumDescriptor {
	return file_collect_proto_enumTypes[0].Descriptor()
}

func (EnvelopeType) Type() protoreflect.EnumType {
	return &file_collect_proto_enumTypes[0]
}

func (x EnvelopeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnvelopeType.Descriptor instead.
func (EnvelopeType) EnumDescriptor() ([]byte, []int) {
	return file_collect_proto_rawDescGZIP(), []int{0}
}

// This type is used to convey info about a collection request; it includes
// auth details that enables the collector to associate intake events with a
// particular team's collection request.
type Collect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// Superseded by envelope_schema
	//
	// Deprecated: Do not use.
	Schema *Schema `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	Lake   *Lake   `protobuf:"bytes,4,opt,name=lake,proto3" json:"lake,omitempty"`
	// Used by collectors to determine what topic events will be written to
	// _until_ a parquet schema is figured out by schema-manager.
	// protolint:disable FIELD_NAMES_LOWER_SNAKE_CASE
	XCollectorHsbTopic string `protobuf:"bytes,5,opt,name=_collector_hsb_topic,json=CollectorHsbTopic,proto3" json:"_collector_hsb_topic,omitempty"`
	PlanId             string `protobuf:"bytes,6,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	PlanName           string `protobuf:"bytes,7,opt,name=plan_name,json=planName,proto3" json:"plan_name,omitempty"`
	// If true, only fast search will be supported for this collection
	DisableArchiving bool         `protobuf:"varint,8,opt,name=disable_archiving,json=disableArchiving,proto3" json:"disable_archiving,omitempty"`
	EnvelopeType     EnvelopeType `protobuf:"varint,9,opt,name=envelope_type,json=envelopeType,proto3,enum=events.EnvelopeType" json:"envelope_type,omitempty"`
	// If shallow, fill out both envelope_schema & payload_schema; if deep, fill
	// out only envelope_schema.
	EnvelopeSchema *Schema `protobuf:"bytes,10,opt,name=envelope_schema,json=envelopeSchema,proto3" json:"envelope_schema,omitempty"`
	PayloadSchema  *Schema `protobuf:"bytes,11,opt,name=payload_schema,json=payloadSchema,proto3" json:"payload_schema,omitempty"`
	// Contains the data flow pipeline - usually filled out by ui-bff when creating
	// CREATE_COLLECTION and UPDATE_COLLECTION messages.
	Pipeline map[string]*Pipeline `protobuf:"bytes,12,rep,name=pipeline,proto3" json:"pipeline,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Deprecated. Use functions field below
	//
	// Deprecated: Do not use.
	Transformations map[int32]string `protobuf:"bytes,13,rep,name=transformations,proto3" json:"transformations,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// How many days to retain storage in ES for this collection
	// Ex: 7/14/28. This value will affect billing of this collection
	StorageRetentionDays int32 `protobuf:"varint,14,opt,name=storage_retention_days,json=storageRetentionDays,proto3" json:"storage_retention_days,omitempty"`
	// Index is the order in which transforms should be executed
	Functions map[int32]*FunctionAssoc `protobuf:"bytes,15,rep,name=functions,proto3" json:"functions,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Collect) Reset() {
	*x = Collect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collect_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collect) ProtoMessage() {}

func (x *Collect) ProtoReflect() protoreflect.Message {
	mi := &file_collect_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collect.ProtoReflect.Descriptor instead.
func (*Collect) Descriptor() ([]byte, []int) {
	return file_collect_proto_rawDescGZIP(), []int{0}
}

func (x *Collect) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Collect) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// Deprecated: Do not use.
func (x *Collect) GetSchema() *Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *Collect) GetLake() *Lake {
	if x != nil {
		return x.Lake
	}
	return nil
}

func (x *Collect) GetXCollectorHsbTopic() string {
	if x != nil {
		return x.XCollectorHsbTopic
	}
	return ""
}

func (x *Collect) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *Collect) GetPlanName() string {
	if x != nil {
		return x.PlanName
	}
	return ""
}

func (x *Collect) GetDisableArchiving() bool {
	if x != nil {
		return x.DisableArchiving
	}
	return false
}

func (x *Collect) GetEnvelopeType() EnvelopeType {
	if x != nil {
		return x.EnvelopeType
	}
	return EnvelopeType_UNSET
}

func (x *Collect) GetEnvelopeSchema() *Schema {
	if x != nil {
		return x.EnvelopeSchema
	}
	return nil
}

func (x *Collect) GetPayloadSchema() *Schema {
	if x != nil {
		return x.PayloadSchema
	}
	return nil
}

func (x *Collect) GetPipeline() map[string]*Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// Deprecated: Do not use.
func (x *Collect) GetTransformations() map[int32]string {
	if x != nil {
		return x.Transformations
	}
	return nil
}

func (x *Collect) GetStorageRetentionDays() int32 {
	if x != nil {
		return x.StorageRetentionDays
	}
	return 0
}

func (x *Collect) GetFunctions() map[int32]*FunctionAssoc {
	if x != nil {
		return x.Functions
	}
	return nil
}

var File_collect_proto protoreflect.FileDescriptor

var file_collect_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x6c, 0x61, 0x6b, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xa7, 0x07, 0x0a, 0x07, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0x20, 0x0a, 0x04, 0x6c, 0x61, 0x6b, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4c, 0x61, 0x6b, 0x65, 0x52, 0x04, 0x6c, 0x61, 0x6b,
	0x65, 0x12, 0x2f, 0x0a, 0x14, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x68, 0x73, 0x62, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x73, 0x62, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x0d, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x37, 0x0a, 0x0f, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x0e, 0x65, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x35, 0x0a, 0x0e, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x39, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x34, 0x0a, 0x16, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x14, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x3c, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x4d, 0x0a, 0x0d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x0e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x6f, 0x63,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x30, 0x0a, 0x0c, 0x45,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x45, 0x50, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x48, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x42, 0x2e, 0x5a,
	0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x63, 0x6f, 0x72, 0x70, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_collect_proto_rawDescOnce sync.Once
	file_collect_proto_rawDescData = file_collect_proto_rawDesc
)

func file_collect_proto_rawDescGZIP() []byte {
	file_collect_proto_rawDescOnce.Do(func() {
		file_collect_proto_rawDescData = protoimpl.X.CompressGZIP(file_collect_proto_rawDescData)
	})
	return file_collect_proto_rawDescData
}

var file_collect_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_collect_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_collect_proto_goTypes = []interface{}{
	(EnvelopeType)(0),     // 0: events.EnvelopeType
	(*Collect)(nil),       // 1: events.Collect
	nil,                   // 2: events.Collect.PipelineEntry
	nil,                   // 3: events.Collect.TransformationsEntry
	nil,                   // 4: events.Collect.FunctionsEntry
	(*Schema)(nil),        // 5: events.Schema
	(*Lake)(nil),          // 6: events.Lake
	(*Pipeline)(nil),      // 7: events.Pipeline
	(*FunctionAssoc)(nil), // 8: events.FunctionAssoc
}
var file_collect_proto_depIdxs = []int32{
	5,  // 0: events.Collect.schema:type_name -> events.Schema
	6,  // 1: events.Collect.lake:type_name -> events.Lake
	0,  // 2: events.Collect.envelope_type:type_name -> events.EnvelopeType
	5,  // 3: events.Collect.envelope_schema:type_name -> events.Schema
	5,  // 4: events.Collect.payload_schema:type_name -> events.Schema
	2,  // 5: events.Collect.pipeline:type_name -> events.Collect.PipelineEntry
	3,  // 6: events.Collect.transformations:type_name -> events.Collect.TransformationsEntry
	4,  // 7: events.Collect.functions:type_name -> events.Collect.FunctionsEntry
	7,  // 8: events.Collect.PipelineEntry.value:type_name -> events.Pipeline
	8,  // 9: events.Collect.FunctionsEntry.value:type_name -> events.FunctionAssoc
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_collect_proto_init() }
func file_collect_proto_init() {
	if File_collect_proto != nil {
		return
	}
	file_function_proto_init()
	file_lake_proto_init()
	file_pipeline_proto_init()
	file_schema_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_collect_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_collect_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_collect_proto_goTypes,
		DependencyIndexes: file_collect_proto_depIdxs,
		EnumInfos:         file_collect_proto_enumTypes,
		MessageInfos:      file_collect_proto_msgTypes,
	}.Build()
	File_collect_proto = out.File
	file_collect_proto_rawDesc = nil
	file_collect_proto_goTypes = nil
	file_collect_proto_depIdxs = nil
}
