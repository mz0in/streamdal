// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: source.proto

package events

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Source_Type int32

const (
	Source_UNSET   Source_Type = 0
	Source_PLUMBER Source_Type = 1
)

// Enum value maps for Source_Type.
var (
	Source_Type_name = map[int32]string{
		0: "UNSET",
		1: "PLUMBER",
	}
	Source_Type_value = map[string]int32{
		"UNSET":   0,
		"PLUMBER": 1,
	}
)

func (x Source_Type) Enum() *Source_Type {
	p := new(Source_Type)
	*p = x
	return p
}

func (x Source_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Source_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_source_proto_enumTypes[0].Descriptor()
}

func (Source_Type) Type() protoreflect.EnumType {
	return &file_source_proto_enumTypes[0]
}

func (x Source_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Source_Type.Descriptor instead.
func (Source_Type) EnumDescriptor() ([]byte, []int) {
	return file_source_proto_rawDescGZIP(), []int{0, 0}
}

type Source_Cloud int32

const (
	Source_CLOUD_UNSET Source_Cloud = 0
	Source_AWS         Source_Cloud = 1
	Source_GCP         Source_Cloud = 2
	Source_AZURE       Source_Cloud = 3
)

// Enum value maps for Source_Cloud.
var (
	Source_Cloud_name = map[int32]string{
		0: "CLOUD_UNSET",
		1: "AWS",
		2: "GCP",
		3: "AZURE",
	}
	Source_Cloud_value = map[string]int32{
		"CLOUD_UNSET": 0,
		"AWS":         1,
		"GCP":         2,
		"AZURE":       3,
	}
)

func (x Source_Cloud) Enum() *Source_Cloud {
	p := new(Source_Cloud)
	*p = x
	return p
}

func (x Source_Cloud) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Source_Cloud) Descriptor() protoreflect.EnumDescriptor {
	return file_source_proto_enumTypes[1].Descriptor()
}

func (Source_Cloud) Type() protoreflect.EnumType {
	return &file_source_proto_enumTypes[1]
}

func (x Source_Cloud) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Source_Cloud.Descriptor instead.
func (Source_Cloud) EnumDescriptor() ([]byte, []int) {
	return file_source_proto_rawDescGZIP(), []int{0, 1}
}

type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of source that this is. Only plumber for now
	Type Source_Type `protobuf:"varint,1,opt,name=type,proto3,enum=events.Source_Type" json:"type,omitempty"`
	Id   string      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Friendly name of the hosted plumber instance
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Team that the instance belongs to
	TeamId string `protobuf:"bytes,4,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	// Deprecated as of 2022-09-14 with switch to running plumber in server mode
	//
	// Deprecated: Do not use.
	CollectionId string `protobuf:"bytes,5,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// Number of containers to launch. Some sources, such as CDC, might only support one plumber instance
	// while others can be as many as needed
	InstanceCount int32 `protobuf:"varint,6,opt,name=instance_count,json=instanceCount,proto3" json:"instance_count,omitempty"`
	// Flags and features may change in plumber, so we need to be sure we're always
	// launching the correct docker image version on RESUME_SOURCE
	PlumberVersion string `protobuf:"bytes,7,opt,name=plumber_version,json=plumberVersion,proto3" json:"plumber_version,omitempty"`
	// Map of ENVAR -> Value for plumber server mode flag
	PlumberArgs map[string]string `protobuf:"bytes,8,rep,name=plumber_args,json=plumberArgs,proto3" json:"plumber_args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Deprecated as of 2022-09-14 with switch to running plumber in server mode
	//
	// Deprecated: Do not use.
	RelayType string `protobuf:"bytes,9,opt,name=relay_type,json=relayType,proto3" json:"relay_type,omitempty"`
	// Which cloud service we are hosting on
	// Currently only AWS
	Cloud Source_Cloud `protobuf:"varint,10,opt,name=cloud,proto3,enum=events.Source_Cloud" json:"cloud,omitempty"`
	// Which region we are running in
	// Currently only us-west-2
	Region string `protobuf:"bytes,11,opt,name=region,proto3" json:"region,omitempty"`
	// Whether or not to enable cluster mode. If false, plumber will run in single server mode
	// Cluster mode is not yet available ~MG 2022-09-14
	EnableCluster bool `protobuf:"varint,12,opt,name=enable_cluster,json=enableCluster,proto3" json:"enable_cluster,omitempty"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_source_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_source_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_source_proto_rawDescGZIP(), []int{0}
}

func (x *Source) GetType() Source_Type {
	if x != nil {
		return x.Type
	}
	return Source_UNSET
}

func (x *Source) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Source) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Source) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

// Deprecated: Do not use.
func (x *Source) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *Source) GetInstanceCount() int32 {
	if x != nil {
		return x.InstanceCount
	}
	return 0
}

func (x *Source) GetPlumberVersion() string {
	if x != nil {
		return x.PlumberVersion
	}
	return ""
}

func (x *Source) GetPlumberArgs() map[string]string {
	if x != nil {
		return x.PlumberArgs
	}
	return nil
}

// Deprecated: Do not use.
func (x *Source) GetRelayType() string {
	if x != nil {
		return x.RelayType
	}
	return ""
}

func (x *Source) GetCloud() Source_Cloud {
	if x != nil {
		return x.Cloud
	}
	return Source_CLOUD_UNSET
}

func (x *Source) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Source) GetEnableCluster() bool {
	if x != nil {
		return x.EnableCluster
	}
	return false
}

var File_source_proto protoreflect.FileDescriptor

var file_source_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xd0, 0x04, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x6c, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x42, 0x0a, 0x0c, 0x70, 0x6c, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x50, 0x6c, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x72,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x6c, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x41, 0x72, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x05, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x1a, 0x3e, 0x0a, 0x10, 0x50, 0x6c, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x72, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x1e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4c, 0x55, 0x4d, 0x42, 0x45, 0x52,
	0x10, 0x01, 0x22, 0x35, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x43,
	0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x57, 0x53, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x43, 0x50, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x10, 0x03, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x63, 0x6f, 0x72,
	0x70, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f,
	0x67, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_source_proto_rawDescOnce sync.Once
	file_source_proto_rawDescData = file_source_proto_rawDesc
)

func file_source_proto_rawDescGZIP() []byte {
	file_source_proto_rawDescOnce.Do(func() {
		file_source_proto_rawDescData = protoimpl.X.CompressGZIP(file_source_proto_rawDescData)
	})
	return file_source_proto_rawDescData
}

var file_source_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_source_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_source_proto_goTypes = []interface{}{
	(Source_Type)(0),  // 0: events.Source.Type
	(Source_Cloud)(0), // 1: events.Source.Cloud
	(*Source)(nil),    // 2: events.Source
	nil,               // 3: events.Source.PlumberArgsEntry
}
var file_source_proto_depIdxs = []int32{
	0, // 0: events.Source.type:type_name -> events.Source.Type
	3, // 1: events.Source.plumber_args:type_name -> events.Source.PlumberArgsEntry
	1, // 2: events.Source.cloud:type_name -> events.Source.Cloud
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_source_proto_init() }
func file_source_proto_init() {
	if File_source_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_source_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_source_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_source_proto_goTypes,
		DependencyIndexes: file_source_proto_depIdxs,
		EnumInfos:         file_source_proto_enumTypes,
		MessageInfos:      file_source_proto_msgTypes,
	}.Build()
	File_source_proto = out.File
	file_source_proto_rawDesc = nil
	file_source_proto_goTypes = nil
	file_source_proto_depIdxs = nil
}
