// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: lake.proto

package events

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Lake_Type int32

const (
	Lake_UNSET Lake_Type = 0
	Lake_AWS   Lake_Type = 1
)

// Enum value maps for Lake_Type.
var (
	Lake_Type_name = map[int32]string{
		0: "UNSET",
		1: "AWS",
	}
	Lake_Type_value = map[string]int32{
		"UNSET": 0,
		"AWS":   1,
	}
)

func (x Lake_Type) Enum() *Lake_Type {
	p := new(Lake_Type)
	*p = x
	return p
}

func (x Lake_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Lake_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_lake_proto_enumTypes[0].Descriptor()
}

func (Lake_Type) Type() protoreflect.EnumType {
	return &file_lake_proto_enumTypes[0]
}

func (x Lake_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Lake_Type.Descriptor instead.
func (Lake_Type) EnumDescriptor() ([]byte, []int) {
	return file_lake_proto_rawDescGZIP(), []int{1, 0}
}

type AWS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S3Bucket string `protobuf:"bytes,1,opt,name=s3_bucket,json=s3Bucket,proto3" json:"s3_bucket,omitempty"`
	Prefix   string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Region   string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *AWS) Reset() {
	*x = AWS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lake_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWS) ProtoMessage() {}

func (x *AWS) ProtoReflect() protoreflect.Message {
	mi := &file_lake_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWS.ProtoReflect.Descriptor instead.
func (*AWS) Descriptor() ([]byte, []int) {
	return file_lake_proto_rawDescGZIP(), []int{0}
}

func (x *AWS) GetS3Bucket() string {
	if x != nil {
		return x.S3Bucket
	}
	return ""
}

func (x *AWS) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *AWS) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

// A (data) lake indicates where collected events are stored.
//
// TODO: Fill out who produces and consumes this proto.
type Lake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type Lake_Type `protobuf:"varint,2,opt,name=type,proto3,enum=events.Lake_Type" json:"type,omitempty"`
	// Types that are assignable to Metadata:
	//
	//	*Lake_Aws
	Metadata isLake_Metadata `protobuf_oneof:"metadata"`
}

func (x *Lake) Reset() {
	*x = Lake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lake_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lake) ProtoMessage() {}

func (x *Lake) ProtoReflect() protoreflect.Message {
	mi := &file_lake_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lake.ProtoReflect.Descriptor instead.
func (*Lake) Descriptor() ([]byte, []int) {
	return file_lake_proto_rawDescGZIP(), []int{1}
}

func (x *Lake) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Lake) GetType() Lake_Type {
	if x != nil {
		return x.Type
	}
	return Lake_UNSET
}

func (m *Lake) GetMetadata() isLake_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (x *Lake) GetAws() *AWS {
	if x, ok := x.GetMetadata().(*Lake_Aws); ok {
		return x.Aws
	}
	return nil
}

type isLake_Metadata interface {
	isLake_Metadata()
}

type Lake_Aws struct {
	Aws *AWS `protobuf:"bytes,100,opt,name=aws,proto3,oneof"`
}

func (*Lake_Aws) isLake_Metadata() {}

var File_lake_proto protoreflect.FileDescriptor

var file_lake_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6c, 0x61, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x52, 0x0a, 0x03, 0x41, 0x57, 0x53, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x33, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x04, 0x4c, 0x61, 0x6b,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4c, 0x61, 0x6b, 0x65, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x03, 0x61, 0x77, 0x73, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x41,
	0x57, 0x53, 0x48, 0x00, 0x52, 0x03, 0x61, 0x77, 0x73, 0x22, 0x1a, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x57, 0x53, 0x10, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x63, 0x6f, 0x72, 0x70, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x73, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lake_proto_rawDescOnce sync.Once
	file_lake_proto_rawDescData = file_lake_proto_rawDesc
)

func file_lake_proto_rawDescGZIP() []byte {
	file_lake_proto_rawDescOnce.Do(func() {
		file_lake_proto_rawDescData = protoimpl.X.CompressGZIP(file_lake_proto_rawDescData)
	})
	return file_lake_proto_rawDescData
}

var file_lake_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_lake_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_lake_proto_goTypes = []interface{}{
	(Lake_Type)(0), // 0: events.Lake.Type
	(*AWS)(nil),    // 1: events.AWS
	(*Lake)(nil),   // 2: events.Lake
}
var file_lake_proto_depIdxs = []int32{
	0, // 0: events.Lake.type:type_name -> events.Lake.Type
	1, // 1: events.Lake.aws:type_name -> events.AWS
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_lake_proto_init() }
func file_lake_proto_init() {
	if File_lake_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lake_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lake_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_lake_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Lake_Aws)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lake_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_lake_proto_goTypes,
		DependencyIndexes: file_lake_proto_depIdxs,
		EnumInfos:         file_lake_proto_enumTypes,
		MessageInfos:      file_lake_proto_msgTypes,
	}.Build()
	File_lake_proto = out.File
	file_lake_proto_rawDesc = nil
	file_lake_proto_goTypes = nil
	file_lake_proto_depIdxs = nil
}
