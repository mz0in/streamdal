// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: destination.proto

package events

import (
	destinations "github.com/batchcorp/schemas/build/go/events/destinations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Destination_Type int32

const (
	Destination_UNSET          Destination_Type = 0
	Destination_HTTP           Destination_Type = 1
	Destination_AMQP           Destination_Type = 2
	Destination_SQS            Destination_Type = 3
	Destination_KAFKA          Destination_Type = 4
	Destination_REDIS_PUBSUB   Destination_Type = 5
	Destination_REDIS_STREAMS  Destination_Type = 6
	Destination_TUNNEL         Destination_Type = 7
	Destination_NSQ            Destination_Type = 8
	Destination_GCP_PUBSUB     Destination_Type = 9
	Destination_NATS           Destination_Type = 10
	Destination_NATS_STREAMING Destination_Type = 11
	Destination_NATS_JETSTREAM Destination_Type = 12
)

// Enum value maps for Destination_Type.
var (
	Destination_Type_name = map[int32]string{
		0:  "UNSET",
		1:  "HTTP",
		2:  "AMQP",
		3:  "SQS",
		4:  "KAFKA",
		5:  "REDIS_PUBSUB",
		6:  "REDIS_STREAMS",
		7:  "TUNNEL",
		8:  "NSQ",
		9:  "GCP_PUBSUB",
		10: "NATS",
		11: "NATS_STREAMING",
		12: "NATS_JETSTREAM",
	}
	Destination_Type_value = map[string]int32{
		"UNSET":          0,
		"HTTP":           1,
		"AMQP":           2,
		"SQS":            3,
		"KAFKA":          4,
		"REDIS_PUBSUB":   5,
		"REDIS_STREAMS":  6,
		"TUNNEL":         7,
		"NSQ":            8,
		"GCP_PUBSUB":     9,
		"NATS":           10,
		"NATS_STREAMING": 11,
		"NATS_JETSTREAM": 12,
	}
)

func (x Destination_Type) Enum() *Destination_Type {
	p := new(Destination_Type)
	*p = x
	return p
}

func (x Destination_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Destination_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_destination_proto_enumTypes[0].Descriptor()
}

func (Destination_Type) Type() protoreflect.EnumType {
	return &file_destination_proto_enumTypes[0]
}

func (x Destination_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Destination_Type.Descriptor instead.
func (Destination_Type) EnumDescriptor() ([]byte, []int) {
	return file_destination_proto_rawDescGZIP(), []int{0, 0}
}

type Destination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type      Destination_Type `protobuf:"varint,2,opt,name=type,proto3,enum=events.Destination_Type" json:"type,omitempty"`
	Notes     string           `protobuf:"bytes,3,opt,name=notes,proto3" json:"notes,omitempty"`
	CreatedBy string           `protobuf:"bytes,4,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Types that are assignable to Dest:
	//
	//	*Destination_Http
	//	*Destination_Amqp
	//	*Destination_Sqs
	//	*Destination_Kafka
	//	*Destination_RedisPubsub
	//	*Destination_RedisStreams
	//	*Destination_Tunnel
	//	*Destination_Nsq
	//	*Destination_GcpPubsub
	//	*Destination_Nats
	//	*Destination_NatsStreaming
	//	*Destination_NatsJetstream
	Dest isDestination_Dest `protobuf_oneof:"dest"`
}

func (x *Destination) Reset() {
	*x = Destination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_destination_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Destination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Destination) ProtoMessage() {}

func (x *Destination) ProtoReflect() protoreflect.Message {
	mi := &file_destination_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Destination.ProtoReflect.Descriptor instead.
func (*Destination) Descriptor() ([]byte, []int) {
	return file_destination_proto_rawDescGZIP(), []int{0}
}

func (x *Destination) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Destination) GetType() Destination_Type {
	if x != nil {
		return x.Type
	}
	return Destination_UNSET
}

func (x *Destination) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Destination) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (m *Destination) GetDest() isDestination_Dest {
	if m != nil {
		return m.Dest
	}
	return nil
}

func (x *Destination) GetHttp() *destinations.HTTP {
	if x, ok := x.GetDest().(*Destination_Http); ok {
		return x.Http
	}
	return nil
}

func (x *Destination) GetAmqp() *destinations.AMQP {
	if x, ok := x.GetDest().(*Destination_Amqp); ok {
		return x.Amqp
	}
	return nil
}

func (x *Destination) GetSqs() *destinations.SQS {
	if x, ok := x.GetDest().(*Destination_Sqs); ok {
		return x.Sqs
	}
	return nil
}

func (x *Destination) GetKafka() *destinations.Kafka {
	if x, ok := x.GetDest().(*Destination_Kafka); ok {
		return x.Kafka
	}
	return nil
}

func (x *Destination) GetRedisPubsub() *destinations.RedisPubsub {
	if x, ok := x.GetDest().(*Destination_RedisPubsub); ok {
		return x.RedisPubsub
	}
	return nil
}

func (x *Destination) GetRedisStreams() *destinations.RedisStreams {
	if x, ok := x.GetDest().(*Destination_RedisStreams); ok {
		return x.RedisStreams
	}
	return nil
}

func (x *Destination) GetTunnel() *destinations.Tunnel {
	if x, ok := x.GetDest().(*Destination_Tunnel); ok {
		return x.Tunnel
	}
	return nil
}

func (x *Destination) GetNsq() *destinations.NSQ {
	if x, ok := x.GetDest().(*Destination_Nsq); ok {
		return x.Nsq
	}
	return nil
}

func (x *Destination) GetGcpPubsub() *destinations.GCPPubSub {
	if x, ok := x.GetDest().(*Destination_GcpPubsub); ok {
		return x.GcpPubsub
	}
	return nil
}

func (x *Destination) GetNats() *destinations.NATS {
	if x, ok := x.GetDest().(*Destination_Nats); ok {
		return x.Nats
	}
	return nil
}

func (x *Destination) GetNatsStreaming() *destinations.NATSStreaming {
	if x, ok := x.GetDest().(*Destination_NatsStreaming); ok {
		return x.NatsStreaming
	}
	return nil
}

func (x *Destination) GetNatsJetstream() *destinations.NATSJetStream {
	if x, ok := x.GetDest().(*Destination_NatsJetstream); ok {
		return x.NatsJetstream
	}
	return nil
}

type isDestination_Dest interface {
	isDestination_Dest()
}

type Destination_Http struct {
	Http *destinations.HTTP `protobuf:"bytes,100,opt,name=http,proto3,oneof"`
}

type Destination_Amqp struct {
	Amqp *destinations.AMQP `protobuf:"bytes,101,opt,name=amqp,proto3,oneof"`
}

type Destination_Sqs struct {
	Sqs *destinations.SQS `protobuf:"bytes,102,opt,name=sqs,proto3,oneof"`
}

type Destination_Kafka struct {
	Kafka *destinations.Kafka `protobuf:"bytes,103,opt,name=kafka,proto3,oneof"`
}

type Destination_RedisPubsub struct {
	RedisPubsub *destinations.RedisPubsub `protobuf:"bytes,104,opt,name=redis_pubsub,json=redisPubsub,proto3,oneof"`
}

type Destination_RedisStreams struct {
	RedisStreams *destinations.RedisStreams `protobuf:"bytes,105,opt,name=redis_streams,json=redisStreams,proto3,oneof"`
}

type Destination_Tunnel struct {
	Tunnel *destinations.Tunnel `protobuf:"bytes,106,opt,name=tunnel,proto3,oneof"`
}

type Destination_Nsq struct {
	Nsq *destinations.NSQ `protobuf:"bytes,107,opt,name=nsq,proto3,oneof"`
}

type Destination_GcpPubsub struct {
	GcpPubsub *destinations.GCPPubSub `protobuf:"bytes,108,opt,name=gcp_pubsub,json=gcpPubsub,proto3,oneof"`
}

type Destination_Nats struct {
	Nats *destinations.NATS `protobuf:"bytes,109,opt,name=nats,proto3,oneof"`
}

type Destination_NatsStreaming struct {
	NatsStreaming *destinations.NATSStreaming `protobuf:"bytes,110,opt,name=nats_streaming,json=natsStreaming,proto3,oneof"`
}

type Destination_NatsJetstream struct {
	NatsJetstream *destinations.NATSJetStream `protobuf:"bytes,111,opt,name=nats_jetstream,json=natsJetstream,proto3,oneof"`
}

func (*Destination_Http) isDestination_Dest() {}

func (*Destination_Amqp) isDestination_Dest() {}

func (*Destination_Sqs) isDestination_Dest() {}

func (*Destination_Kafka) isDestination_Dest() {}

func (*Destination_RedisPubsub) isDestination_Dest() {}

func (*Destination_RedisStreams) isDestination_Dest() {}

func (*Destination_Tunnel) isDestination_Dest() {}

func (*Destination_Nsq) isDestination_Dest() {}

func (*Destination_GcpPubsub) isDestination_Dest() {}

func (*Destination_Nats) isDestination_Dest() {}

func (*Destination_NatsStreaming) isDestination_Dest() {}

func (*Destination_NatsJetstream) isDestination_Dest() {}

var File_destination_proto protoreflect.FileDescriptor

var file_destination_proto_rawDesc = []byte{
	0x0a, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x17, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x67, 0x63, 0x70, 0x5f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6e, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x21, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6e, 0x61,
	0x74, 0x73, 0x5f, 0x6a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x21, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x6e, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x64, 0x69,
	0x73, 0x5f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x64,
	0x69, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x16, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73,
	0x71, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xb2, 0x07, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x28, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x48, 0x00, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70,
	0x12, 0x28, 0x0a, 0x04, 0x61, 0x6d, 0x71, 0x70, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x4d,
	0x51, 0x50, 0x48, 0x00, 0x52, 0x04, 0x61, 0x6d, 0x71, 0x70, 0x12, 0x25, 0x0a, 0x03, 0x73, 0x71,
	0x73, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x51, 0x53, 0x48, 0x00, 0x52, 0x03, 0x73, 0x71,
	0x73, 0x12, 0x2b, 0x0a, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4b, 0x61, 0x66, 0x6b, 0x61, 0x48, 0x00, 0x52, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x12, 0x3e,
	0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x18, 0x68,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x48,
	0x00, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x73, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x12, 0x41,
	0x0a, 0x0d, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18,
	0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x73, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x73, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x6a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x25, 0x0a, 0x03, 0x6e, 0x73, 0x71, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x53,
	0x51, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x73, 0x71, 0x12, 0x38, 0x0a, 0x0a, 0x67, 0x63, 0x70, 0x5f,
	0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x43, 0x50, 0x50,
	0x75, 0x62, 0x53, 0x75, 0x62, 0x48, 0x00, 0x52, 0x09, 0x67, 0x63, 0x70, 0x50, 0x75, 0x62, 0x73,
	0x75, 0x62, 0x12, 0x28, 0x0a, 0x04, 0x6e, 0x61, 0x74, 0x73, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4e, 0x41, 0x54, 0x53, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x0e,
	0x6e, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x6e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x41, 0x54, 0x53, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x48, 0x00, 0x52, 0x0d, 0x6e, 0x61, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x12, 0x44, 0x0a, 0x0e, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x6a, 0x65, 0x74, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x41, 0x54, 0x53, 0x4a, 0x65,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x0d, 0x6e, 0x61, 0x74, 0x73, 0x4a,
	0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0xb5, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x48, 0x54, 0x54, 0x50, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x4d, 0x51, 0x50, 0x10, 0x02,
	0x12, 0x07, 0x0a, 0x03, 0x53, 0x51, 0x53, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4b, 0x41, 0x46,
	0x4b, 0x41, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x44, 0x49, 0x53, 0x5f, 0x50, 0x55,
	0x42, 0x53, 0x55, 0x42, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x44, 0x49, 0x53, 0x5f,
	0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x53, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x55, 0x4e,
	0x4e, 0x45, 0x4c, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x53, 0x51, 0x10, 0x08, 0x12, 0x0e,
	0x0a, 0x0a, 0x47, 0x43, 0x50, 0x5f, 0x50, 0x55, 0x42, 0x53, 0x55, 0x42, 0x10, 0x09, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x41, 0x54, 0x53, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x41, 0x54, 0x53,
	0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e,
	0x4e, 0x41, 0x54, 0x53, 0x5f, 0x4a, 0x45, 0x54, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x0c,
	0x42, 0x06, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x74, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x63, 0x6f, 0x72, 0x70,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x67,
	0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_destination_proto_rawDescOnce sync.Once
	file_destination_proto_rawDescData = file_destination_proto_rawDesc
)

func file_destination_proto_rawDescGZIP() []byte {
	file_destination_proto_rawDescOnce.Do(func() {
		file_destination_proto_rawDescData = protoimpl.X.CompressGZIP(file_destination_proto_rawDescData)
	})
	return file_destination_proto_rawDescData
}

var file_destination_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_destination_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_destination_proto_goTypes = []interface{}{
	(Destination_Type)(0),              // 0: events.Destination.Type
	(*Destination)(nil),                // 1: events.Destination
	(*destinations.HTTP)(nil),          // 2: destinations.HTTP
	(*destinations.AMQP)(nil),          // 3: destinations.AMQP
	(*destinations.SQS)(nil),           // 4: destinations.SQS
	(*destinations.Kafka)(nil),         // 5: destinations.Kafka
	(*destinations.RedisPubsub)(nil),   // 6: destinations.RedisPubsub
	(*destinations.RedisStreams)(nil),  // 7: destinations.RedisStreams
	(*destinations.Tunnel)(nil),        // 8: destinations.Tunnel
	(*destinations.NSQ)(nil),           // 9: destinations.NSQ
	(*destinations.GCPPubSub)(nil),     // 10: destinations.GCPPubSub
	(*destinations.NATS)(nil),          // 11: destinations.NATS
	(*destinations.NATSStreaming)(nil), // 12: destinations.NATSStreaming
	(*destinations.NATSJetStream)(nil), // 13: destinations.NATSJetStream
}
var file_destination_proto_depIdxs = []int32{
	0,  // 0: events.Destination.type:type_name -> events.Destination.Type
	2,  // 1: events.Destination.http:type_name -> destinations.HTTP
	3,  // 2: events.Destination.amqp:type_name -> destinations.AMQP
	4,  // 3: events.Destination.sqs:type_name -> destinations.SQS
	5,  // 4: events.Destination.kafka:type_name -> destinations.Kafka
	6,  // 5: events.Destination.redis_pubsub:type_name -> destinations.RedisPubsub
	7,  // 6: events.Destination.redis_streams:type_name -> destinations.RedisStreams
	8,  // 7: events.Destination.tunnel:type_name -> destinations.Tunnel
	9,  // 8: events.Destination.nsq:type_name -> destinations.NSQ
	10, // 9: events.Destination.gcp_pubsub:type_name -> destinations.GCPPubSub
	11, // 10: events.Destination.nats:type_name -> destinations.NATS
	12, // 11: events.Destination.nats_streaming:type_name -> destinations.NATSStreaming
	13, // 12: events.Destination.nats_jetstream:type_name -> destinations.NATSJetStream
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_destination_proto_init() }
func file_destination_proto_init() {
	if File_destination_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_destination_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Destination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_destination_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Destination_Http)(nil),
		(*Destination_Amqp)(nil),
		(*Destination_Sqs)(nil),
		(*Destination_Kafka)(nil),
		(*Destination_RedisPubsub)(nil),
		(*Destination_RedisStreams)(nil),
		(*Destination_Tunnel)(nil),
		(*Destination_Nsq)(nil),
		(*Destination_GcpPubsub)(nil),
		(*Destination_Nats)(nil),
		(*Destination_NatsStreaming)(nil),
		(*Destination_NatsJetstream)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_destination_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_destination_proto_goTypes,
		DependencyIndexes: file_destination_proto_depIdxs,
		EnumInfos:         file_destination_proto_enumTypes,
		MessageInfos:      file_destination_proto_msgTypes,
	}.Build()
	File_destination_proto = out.File
	file_destination_proto_rawDesc = nil
	file_destination_proto_goTypes = nil
	file_destination_proto_depIdxs = nil
}
