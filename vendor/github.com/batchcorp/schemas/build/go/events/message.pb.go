// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: message.proto

package events

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Message_Type int32

const (
	// Emitted by UI-BFF
	// Consumed by all collectors in order to pre-load collection configuration
	Message_CREATE_COLLECTION Message_Type = 0
	// Emitted by UI-BFF specifically for protobuf schemas.
	// Consumed by athena-writer which generates a parquet schema (and
	// emits STATUS_ELECT_SCHEMA)
	Message_CREATE_SCHEMA Message_Type = 1
	// Emitted by UI-BFF
	// Consumed by collectors - causes cached config to be released
	Message_DELETE_COLLECTION Message_Type = 2
	// Emitted by UI-BFF
	// Consumed by readers to start reading data from ES
	// Consumed by replayer to know which topic to start reading from
	Message_CREATE_REPLAY Message_Type = 3
	// Emitted by UI-BFF
	// Consumed by readers and replayers
	Message_DELETE_REPLAY Message_Type = 4
	// Emitted by UI-BFF
	// ??? How is this used?
	Message_UPDATE_REPLAY Message_Type = 5
	// Emitted by UI-BFF to temporarily stop an active replay
	// Consumed by readers and replayers
	Message_PAUSE_REPLAY Message_Type = 6
	// Emitted by UI-BFF to resume a paused replay
	Message_RESUME_REPLAY Message_Type = 7
	// Emitted by a replayer
	// Consumed by other replayers.
	//
	// Indicates that a replayer has come across an outbound message with
	// "last" bool set to true and that all other replayers should stop
	// replaying data for the specified replay_id.
	Message_FINISH_REPLAY Message_Type = 8
	// Emitted by reader (as of 10.25.2020)
	// Consumed by replayer
	//
	// Indicates that the active replay must be cancelled; reason for abort
	// may be listed in info.notes)
	Message_ABORT_REPLAY Message_Type = 9
	// Emitted by schema-manager (as of 11.04.2020)
	// Consumed by collectors
	//
	// Indicates that a schema has been updated and contains fingerprint,
	// parquet and/or sql schema. This is in turn used by collectors to
	// update their internal caches in order to facilitate (fast)
	// identification of inbound events.
	//
	// UPDATE 05.05.2020
	// Schema-inference v2 does not use this message type.
	//
	// Deprecated: Do not use.
	Message_UPDATE_SCHEMA Message_Type = 10
	// Emitted by any service (as of 11.17.2020)
	// Consumed by task service
	//
	// Indicates that an async task was created.
	Message_CREATE_TASK Message_Type = 11
	// Emitted by any service (as of 11.17.2020)
	// Consumed by task service
	//
	// Indicates that an async task has been updated.
	Message_UPDATE_TASK Message_Type = 12
	// Emitted by UI-BFF service (as of 12.04.2020)
	// Consumed by writer (as of 06.17.2021)
	Message_UPDATE_COLLECTION Message_Type = 13
	// Emitted by UI-BFF, consumed by health service
	Message_CREATE_DESTINATION Message_Type = 14
	// Emitted by UI-BFF, consumed by health service
	Message_UPDATE_DESTINATION Message_Type = 15
	// Emitted by UI-BFF, consumed by health service
	Message_DELETE_DESTINATION Message_Type = 16
	// Emitted by UI-BFF, consumed by billing
	Message_CREATE_ACCOUNT Message_Type = 17
	// Emitted by UI-BFF, consumed by billing
	Message_UPDATE_ACCOUNT Message_Type = 18
	// Emitted by UI-BFF, consumed by billing
	Message_DELETE_ACCOUNT Message_Type = 19
	// Emitted by billing (for informational purposes)
	Message_STATUS_SUBSCRIPTION Message_Type = 20
	// Emitted by billing, consumed by other billing instances for
	// facilitate cache updates
	Message_STATUS_STRIPE_WEBHOOK Message_Type = 21
	// Emitted by billing when subscription is unpaid or cancelled
	// Will include "Subscription" event
	Message_LOCK_ACCOUNT Message_Type = 22
	// Emitted by billing when an unpaid subscription becomes active
	// Will include "Subscription" event
	Message_UNLOCK_ACCOUNT Message_Type = 23
	// Emitted by collectors when an event comes in that needs either a new or updated schema
	// Consumed only by schema-manager
	//
	// UPDATE 05.05.2020
	// Schema-inference v2 does not use this message type.
	//
	// Deprecated: Do not use.
	Message_GENERATE_SCHEMA Message_Type = 24
	// Emitted by UI-BFF (as of 03.17.2021)
	// Consumed by schema-manager
	Message_UPDATE_PROTOS Message_Type = 25
	// Emitted by athena-writer instances
	// Consumed by schema-manager
	Message_ELECT_SCHEMA Message_Type = 26
	// Emitted by schema-manager
	// Consumed by athena-writer instances and schema-manager itself
	Message_STATUS_ELECT_SCHEMA Message_Type = 27
	// Emitted by ui-bff
	// Consumed by source-manager
	Message_CREATE_SOURCE Message_Type = 28
	// Emitted by ui-bff
	// Consumed by source-manager
	Message_UPDATE_SOURCE Message_Type = 29
	// Emitted by ui-bff
	// Consumed by source-manager
	Message_DELETE_SOURCE Message_Type = 30
	// Emitted by ui-bff
	// Consumed by source-manager
	Message_PAUSE_SOURCE Message_Type = 31
	// Emitted by ui-bff
	// Consumed by source-manager
	Message_RESUME_SOURCE Message_Type = 32
	// Emitted by ui-bff
	// Consumed by dproxy
	Message_CREATE_API_TOKEN Message_Type = 33
	// Emitted by ui-bff
	// Consumed by dproxy
	Message_DELETE_API_TOKEN Message_Type = 34
	// Emitted by dproxy
	// Consumed by dproxy and ui-bff
	Message_CREATE_TUNNEL Message_Type = 35
	// Emitted by dproxy
	// Consumed by dproxy and ui-bff
	Message_DELETE_TUNNEL Message_Type = 36
	// Emitted by ui-bff
	// Consumed by collectors
	Message_PAUSE_COLLECTION Message_Type = 37
	// Emitted by ui-bff
	// Emitted by writer after successful plan change (as of 06.17.2021)
	// Consumed by grpc-collector, http-collector, and writer
	Message_RESUME_COLLECTION Message_Type = 38
	// Emitted by grpc-collector and http-collector (as of 09.07.2021)
	// Consumed by writer and athena-writer
	Message_STATUS_COLLECT Message_Type = 39
	// Emitted by ui-bff (as of 07.25.2022)
	// Consumed by alert service
	Message_CREATE_ALERT Message_Type = 40
	// Emitted by ui-bff (as of 07.25.2022)
	// Consumed by alert service
	Message_UPDATE_ALERT Message_Type = 41
	// Emitted by ui-bff (as of 07.25.2022)
	// Consumed by alert service
	Message_DELETE_ALERT Message_Type = 42
	// Emitted by notifier service (as of 12.28.2021)
	// Consumed by other instances of notifier service
	Message_RESUME_ALERT Message_Type = 43
	// Emitted by notifier service (as of 12.28.2021)
	// Consumed by other instances of notifier service
	Message_MUTE_ALERT Message_Type = 44
	// Emitted by ui-bff (as of 01.06.2022)
	// Consumed by dead-letter service
	//
	// Deprecated: Do not use.
	Message_DELETE_DEAD_LETTER_MESSAGE Message_Type = 45
	// Emitted by ui-bff (as of 01.06.2022)
	// Consumed by dead-letter service
	//
	// Deprecated: Do not use.
	Message_CREATE_DEAD_LETTER_REPLAY Message_Type = 46
	// Emitted by decoder (as of 03.24.2022)
	// Consumed by dead-letter service
	Message_STATUS_COLLECT_DEADLETTER Message_Type = 47
	// Emitted by ui-bff (as of 05.03.2022)
	// Consumed by transformer and monitor
	Message_CREATE_FUNCTION Message_Type = 48
	// Emitted by ui-bff (as of 05.03.2022)
	// Consumed by transformer and monitor
	Message_UPDATE_FUNCTION Message_Type = 49
	// Emitted by ui-bff (as of 05.03.2022)
	// Consumed by transformer and monitor
	Message_DELETE_FUNCTION Message_Type = 50
	// Emitted by ui-bff (as of 07.14.2022)
	// Consumed by monitor service
	Message_CREATE_MONITOR Message_Type = 51
	// Emitted by ui-bff (as of 07.14.2022)
	// Consumed by monitor service
	Message_UPDATE_MONITOR Message_Type = 52
	// Emitted by ui-bff (as of 07.14.2022)
	// Consumed by monitor service
	Message_DELETE_MONITOR Message_Type = 53
	// Emitted by monitor (as of 07.22.2022)
	// Consumed by alert service
	Message_MONITOR_VIOLATION Message_Type = 54
	// Emitted by ui-bff
	// Consumed by dead-letter service
	Message_DEAD_LETTER_CREATE_STAGE Message_Type = 55
	// Emitted by ui-bff
	// Consumed by dead-letter service
	Message_DEAD_LETTER_CREATE_STAGE_COMPLETE Message_Type = 56
	// Emitted by ui-bff
	// Consumed by dead-letter service
	Message_DEAD_LETTER_DELETE_STAGE Message_Type = 57
	// Emitted by dead-letter
	// Consumed by ui-bff service
	Message_DEAD_LETTER_DELETE_STAGE_COMPLETE Message_Type = 58
	// Emitted by ui-bff
	// Consumed by dead-letter service
	Message_DEAD_LETTER_RUN_FUNCTION Message_Type = 59
	// Emitted by dead-letter
	// Consumed by decoder service
	Message_DEAD_LETTER_RUN_FUNCTION_COMPLETE Message_Type = 60
	// Switched dead letter replays to use normal CREATE_REPLAY events instead.
	//
	// Deprecated: Do not use.
	Message_DEAD_LETTER_START_REPLAY Message_Type = 61
	// Deprecated: Do not use.
	Message_DEAD_LETTER_START_REPLAY_COMPLETE Message_Type = 62
	// Emitted by ui-bff
	// Consumed by dead-letter service
	Message_DEAD_LETTER_COPY_MESSAGES Message_Type = 63
	// Emitted by dead-letter
	// Consumed by ui-bff service
	Message_DEAD_LETTER_COPY_MESSAGES_COMPLETE Message_Type = 64
	// Emitted by ui-bff
	// Consumed by dead-letter service
	Message_DEAD_LETTER_DELETE_MESSAGES Message_Type = 65
	// Emitted by dead-letter
	// Consumed by ui-bff service
	Message_DEAD_LETTER_DELETE_MESSAGES_COMPLETE Message_Type = 66
	// Emitted by decoder
	// Consumed by ui-bff
	Message_DEAD_LETTER_VALIDATE_STAGE_COMPLETE Message_Type = 67
	// Emitted by alert
	// Consumed by ui-bff
	Message_ALERT_TRIGGER Message_Type = 68
	// Emitted by decoder
	// Consumed by monitor
	Message_STATUS_SCHEMA_CONFLICT Message_Type = 69
)

// Enum value maps for Message_Type.
var (
	Message_Type_name = map[int32]string{
		0:  "CREATE_COLLECTION",
		1:  "CREATE_SCHEMA",
		2:  "DELETE_COLLECTION",
		3:  "CREATE_REPLAY",
		4:  "DELETE_REPLAY",
		5:  "UPDATE_REPLAY",
		6:  "PAUSE_REPLAY",
		7:  "RESUME_REPLAY",
		8:  "FINISH_REPLAY",
		9:  "ABORT_REPLAY",
		10: "UPDATE_SCHEMA",
		11: "CREATE_TASK",
		12: "UPDATE_TASK",
		13: "UPDATE_COLLECTION",
		14: "CREATE_DESTINATION",
		15: "UPDATE_DESTINATION",
		16: "DELETE_DESTINATION",
		17: "CREATE_ACCOUNT",
		18: "UPDATE_ACCOUNT",
		19: "DELETE_ACCOUNT",
		20: "STATUS_SUBSCRIPTION",
		21: "STATUS_STRIPE_WEBHOOK",
		22: "LOCK_ACCOUNT",
		23: "UNLOCK_ACCOUNT",
		24: "GENERATE_SCHEMA",
		25: "UPDATE_PROTOS",
		26: "ELECT_SCHEMA",
		27: "STATUS_ELECT_SCHEMA",
		28: "CREATE_SOURCE",
		29: "UPDATE_SOURCE",
		30: "DELETE_SOURCE",
		31: "PAUSE_SOURCE",
		32: "RESUME_SOURCE",
		33: "CREATE_API_TOKEN",
		34: "DELETE_API_TOKEN",
		35: "CREATE_TUNNEL",
		36: "DELETE_TUNNEL",
		37: "PAUSE_COLLECTION",
		38: "RESUME_COLLECTION",
		39: "STATUS_COLLECT",
		40: "CREATE_ALERT",
		41: "UPDATE_ALERT",
		42: "DELETE_ALERT",
		43: "RESUME_ALERT",
		44: "MUTE_ALERT",
		45: "DELETE_DEAD_LETTER_MESSAGE",
		46: "CREATE_DEAD_LETTER_REPLAY",
		47: "STATUS_COLLECT_DEADLETTER",
		48: "CREATE_FUNCTION",
		49: "UPDATE_FUNCTION",
		50: "DELETE_FUNCTION",
		51: "CREATE_MONITOR",
		52: "UPDATE_MONITOR",
		53: "DELETE_MONITOR",
		54: "MONITOR_VIOLATION",
		55: "DEAD_LETTER_CREATE_STAGE",
		56: "DEAD_LETTER_CREATE_STAGE_COMPLETE",
		57: "DEAD_LETTER_DELETE_STAGE",
		58: "DEAD_LETTER_DELETE_STAGE_COMPLETE",
		59: "DEAD_LETTER_RUN_FUNCTION",
		60: "DEAD_LETTER_RUN_FUNCTION_COMPLETE",
		61: "DEAD_LETTER_START_REPLAY",
		62: "DEAD_LETTER_START_REPLAY_COMPLETE",
		63: "DEAD_LETTER_COPY_MESSAGES",
		64: "DEAD_LETTER_COPY_MESSAGES_COMPLETE",
		65: "DEAD_LETTER_DELETE_MESSAGES",
		66: "DEAD_LETTER_DELETE_MESSAGES_COMPLETE",
		67: "DEAD_LETTER_VALIDATE_STAGE_COMPLETE",
		68: "ALERT_TRIGGER",
		69: "STATUS_SCHEMA_CONFLICT",
	}
	Message_Type_value = map[string]int32{
		"CREATE_COLLECTION":                    0,
		"CREATE_SCHEMA":                        1,
		"DELETE_COLLECTION":                    2,
		"CREATE_REPLAY":                        3,
		"DELETE_REPLAY":                        4,
		"UPDATE_REPLAY":                        5,
		"PAUSE_REPLAY":                         6,
		"RESUME_REPLAY":                        7,
		"FINISH_REPLAY":                        8,
		"ABORT_REPLAY":                         9,
		"UPDATE_SCHEMA":                        10,
		"CREATE_TASK":                          11,
		"UPDATE_TASK":                          12,
		"UPDATE_COLLECTION":                    13,
		"CREATE_DESTINATION":                   14,
		"UPDATE_DESTINATION":                   15,
		"DELETE_DESTINATION":                   16,
		"CREATE_ACCOUNT":                       17,
		"UPDATE_ACCOUNT":                       18,
		"DELETE_ACCOUNT":                       19,
		"STATUS_SUBSCRIPTION":                  20,
		"STATUS_STRIPE_WEBHOOK":                21,
		"LOCK_ACCOUNT":                         22,
		"UNLOCK_ACCOUNT":                       23,
		"GENERATE_SCHEMA":                      24,
		"UPDATE_PROTOS":                        25,
		"ELECT_SCHEMA":                         26,
		"STATUS_ELECT_SCHEMA":                  27,
		"CREATE_SOURCE":                        28,
		"UPDATE_SOURCE":                        29,
		"DELETE_SOURCE":                        30,
		"PAUSE_SOURCE":                         31,
		"RESUME_SOURCE":                        32,
		"CREATE_API_TOKEN":                     33,
		"DELETE_API_TOKEN":                     34,
		"CREATE_TUNNEL":                        35,
		"DELETE_TUNNEL":                        36,
		"PAUSE_COLLECTION":                     37,
		"RESUME_COLLECTION":                    38,
		"STATUS_COLLECT":                       39,
		"CREATE_ALERT":                         40,
		"UPDATE_ALERT":                         41,
		"DELETE_ALERT":                         42,
		"RESUME_ALERT":                         43,
		"MUTE_ALERT":                           44,
		"DELETE_DEAD_LETTER_MESSAGE":           45,
		"CREATE_DEAD_LETTER_REPLAY":            46,
		"STATUS_COLLECT_DEADLETTER":            47,
		"CREATE_FUNCTION":                      48,
		"UPDATE_FUNCTION":                      49,
		"DELETE_FUNCTION":                      50,
		"CREATE_MONITOR":                       51,
		"UPDATE_MONITOR":                       52,
		"DELETE_MONITOR":                       53,
		"MONITOR_VIOLATION":                    54,
		"DEAD_LETTER_CREATE_STAGE":             55,
		"DEAD_LETTER_CREATE_STAGE_COMPLETE":    56,
		"DEAD_LETTER_DELETE_STAGE":             57,
		"DEAD_LETTER_DELETE_STAGE_COMPLETE":    58,
		"DEAD_LETTER_RUN_FUNCTION":             59,
		"DEAD_LETTER_RUN_FUNCTION_COMPLETE":    60,
		"DEAD_LETTER_START_REPLAY":             61,
		"DEAD_LETTER_START_REPLAY_COMPLETE":    62,
		"DEAD_LETTER_COPY_MESSAGES":            63,
		"DEAD_LETTER_COPY_MESSAGES_COMPLETE":   64,
		"DEAD_LETTER_DELETE_MESSAGES":          65,
		"DEAD_LETTER_DELETE_MESSAGES_COMPLETE": 66,
		"DEAD_LETTER_VALIDATE_STAGE_COMPLETE":  67,
		"ALERT_TRIGGER":                        68,
		"STATUS_SCHEMA_CONFLICT":               69,
	}
)

func (x Message_Type) Enum() *Message_Type {
	p := new(Message_Type)
	*p = x
	return p
}

func (x Message_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[0].Descriptor()
}

func (Message_Type) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[0]
}

func (x Message_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Message_Type.Descriptor instead.
func (Message_Type) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0, 0}
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// What kind of a message is this?
	Type Message_Type `protobuf:"varint,1,opt,name=type,proto3,enum=events.Message_Type" json:"type,omitempty"`
	// Who does this message pertain to?
	Team *Team `protobuf:"bytes,2,opt,name=team,proto3" json:"team,omitempty"`
	// Contains event debug info
	Info *Info `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	// Types that are assignable to Event:
	//
	//	*Message_Collect
	//	*Message_Replay
	//	*Message_Schema
	//	*Message_Task
	//	*Message_Destination
	//	*Message_Account
	//	*Message_Subscription
	//	*Message_StripeWebhook
	//	*Message_Source
	//	*Message_ApiToken
	//	*Message_DeadLetter
	//	*Message_Function
	//	*Message_Monitor
	//	*Message_AlertConfig
	//	*Message_MonitorStatus
	//	*Message_AlertTrigger
	Event isMessage_Event `protobuf_oneof:"event"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetType() Message_Type {
	if x != nil {
		return x.Type
	}
	return Message_CREATE_COLLECTION
}

func (x *Message) GetTeam() *Team {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *Message) GetInfo() *Info {
	if x != nil {
		return x.Info
	}
	return nil
}

func (m *Message) GetEvent() isMessage_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *Message) GetCollect() *Collect {
	if x, ok := x.GetEvent().(*Message_Collect); ok {
		return x.Collect
	}
	return nil
}

func (x *Message) GetReplay() *Replay {
	if x, ok := x.GetEvent().(*Message_Replay); ok {
		return x.Replay
	}
	return nil
}

func (x *Message) GetSchema() *Schema {
	if x, ok := x.GetEvent().(*Message_Schema); ok {
		return x.Schema
	}
	return nil
}

func (x *Message) GetTask() *Task {
	if x, ok := x.GetEvent().(*Message_Task); ok {
		return x.Task
	}
	return nil
}

func (x *Message) GetDestination() *Destination {
	if x, ok := x.GetEvent().(*Message_Destination); ok {
		return x.Destination
	}
	return nil
}

func (x *Message) GetAccount() *Account {
	if x, ok := x.GetEvent().(*Message_Account); ok {
		return x.Account
	}
	return nil
}

func (x *Message) GetSubscription() *Subscription {
	if x, ok := x.GetEvent().(*Message_Subscription); ok {
		return x.Subscription
	}
	return nil
}

func (x *Message) GetStripeWebhook() *StripeWebhook {
	if x, ok := x.GetEvent().(*Message_StripeWebhook); ok {
		return x.StripeWebhook
	}
	return nil
}

func (x *Message) GetSource() *Source {
	if x, ok := x.GetEvent().(*Message_Source); ok {
		return x.Source
	}
	return nil
}

func (x *Message) GetApiToken() *APIToken {
	if x, ok := x.GetEvent().(*Message_ApiToken); ok {
		return x.ApiToken
	}
	return nil
}

func (x *Message) GetDeadLetter() *DeadLetter {
	if x, ok := x.GetEvent().(*Message_DeadLetter); ok {
		return x.DeadLetter
	}
	return nil
}

func (x *Message) GetFunction() *Function {
	if x, ok := x.GetEvent().(*Message_Function); ok {
		return x.Function
	}
	return nil
}

func (x *Message) GetMonitor() *Monitor {
	if x, ok := x.GetEvent().(*Message_Monitor); ok {
		return x.Monitor
	}
	return nil
}

func (x *Message) GetAlertConfig() *AlertConfig {
	if x, ok := x.GetEvent().(*Message_AlertConfig); ok {
		return x.AlertConfig
	}
	return nil
}

func (x *Message) GetMonitorStatus() *MonitorStatus {
	if x, ok := x.GetEvent().(*Message_MonitorStatus); ok {
		return x.MonitorStatus
	}
	return nil
}

func (x *Message) GetAlertTrigger() *AlertTrigger {
	if x, ok := x.GetEvent().(*Message_AlertTrigger); ok {
		return x.AlertTrigger
	}
	return nil
}

type isMessage_Event interface {
	isMessage_Event()
}

type Message_Collect struct {
	// Info used by collectors to manage event collection
	Collect *Collect `protobuf:"bytes,100,opt,name=collect,proto3,oneof"`
}

type Message_Replay struct {
	// Contains configuration used for event replay
	Replay *Replay `protobuf:"bytes,101,opt,name=replay,proto3,oneof"`
}

type Message_Schema struct {
	// Contains info about a schema.
	// CREATE_SCHEMA, UPDATE_PROTOS, ELECT_SCHEMA, STATUS_ELECT_SCHEMA
	Schema *Schema `protobuf:"bytes,102,opt,name=schema,proto3,oneof"`
}

type Message_Task struct {
	// contains info on async task
	Task *Task `protobuf:"bytes,103,opt,name=task,proto3,oneof"`
}

type Message_Destination struct {
	// contains destination info
	Destination *Destination `protobuf:"bytes,104,opt,name=destination,proto3,oneof"`
}

type Message_Account struct {
	// contains account info
	Account *Account `protobuf:"bytes,105,opt,name=account,proto3,oneof"`
}

type Message_Subscription struct {
	// contains subscription related info
	Subscription *Subscription `protobuf:"bytes,106,opt,name=subscription,proto3,oneof"`
}

type Message_StripeWebhook struct {
	// contains stripe webhook event details
	StripeWebhook *StripeWebhook `protobuf:"bytes,107,opt,name=stripe_webhook,json=stripeWebhook,proto3,oneof"`
}

type Message_Source struct {
	// contains info for source-manager events
	Source *Source `protobuf:"bytes,108,opt,name=source,proto3,oneof"`
}

type Message_ApiToken struct {
	// Contains info for an API token used to authenticate plumber tunnels
	ApiToken *APIToken `protobuf:"bytes,109,opt,name=api_token,json=apiToken,proto3,oneof"`
}

type Message_DeadLetter struct {
	// Contains info about a dead-letter delete or replay request (01.06.2022)
	DeadLetter *DeadLetter `protobuf:"bytes,111,opt,name=dead_letter,json=deadLetter,proto3,oneof"`
}

type Message_Function struct {
	// Transform and monitoring functions
	Function *Function `protobuf:"bytes,112,opt,name=function,proto3,oneof"`
}

type Message_Monitor struct {
	// Contains instructions for how to monitor fields in a payload
	Monitor *Monitor `protobuf:"bytes,113,opt,name=monitor,proto3,oneof"`
}

type Message_AlertConfig struct {
	// Contains instructions for how to alert end users when an alert trigger fires
	AlertConfig *AlertConfig `protobuf:"bytes,114,opt,name=alert_config,json=alertConfig,proto3,oneof"`
}

type Message_MonitorStatus struct {
	MonitorStatus *MonitorStatus `protobuf:"bytes,115,opt,name=monitor_status,json=monitorStatus,proto3,oneof"`
}

type Message_AlertTrigger struct {
	// Contains information about when an alert was triggered, if it sent a notification and how long the notification window stays open
	AlertTrigger *AlertTrigger `protobuf:"bytes,116,opt,name=alert_trigger,json=alertTrigger,proto3,oneof"`
}

func (*Message_Collect) isMessage_Event() {}

func (*Message_Replay) isMessage_Event() {}

func (*Message_Schema) isMessage_Event() {}

func (*Message_Task) isMessage_Event() {}

func (*Message_Destination) isMessage_Event() {}

func (*Message_Account) isMessage_Event() {}

func (*Message_Subscription) isMessage_Event() {}

func (*Message_StripeWebhook) isMessage_Event() {}

func (*Message_Source) isMessage_Event() {}

func (*Message_ApiToken) isMessage_Event() {}

func (*Message_DeadLetter) isMessage_Event() {}

func (*Message_Function) isMessage_Event() {}

func (*Message_Monitor) isMessage_Event() {}

func (*Message_AlertConfig) isMessage_Event() {}

func (*Message_MonitorStatus) isMessage_Event() {}

func (*Message_AlertTrigger) isMessage_Event() {}

var File_message_proto protoreflect.FileDescriptor

var file_message_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0e, 0x61, 0x70, 0x69, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10,
	0x64, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xcc, 0x14, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x65, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a,
	0x07, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x79, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x79, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x48, 0x00, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x22,
	0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x12, 0x37, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x5f, 0x77,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x57, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x6c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2f,
	0x0a, 0x09, 0x61, 0x70, 0x69, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x6d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x50, 0x49, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x61, 0x70, 0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x35, 0x0a, 0x0b, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x6f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x44, 0x65,
	0x61, 0x64, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x61, 0x64,
	0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x0b, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e, 0x0a,
	0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0d,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a,
	0x0d, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x74,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x22, 0x96, 0x0d, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f,
	0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52,
	0x45, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x05, 0x12, 0x10, 0x0a,
	0x0c, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x06, 0x12,
	0x11, 0x0a, 0x0d, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59,
	0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x41, 0x59, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x5f, 0x52,
	0x45, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x0d, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x10, 0x0a, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x0b, 0x12,
	0x0f, 0x0a, 0x0b, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x0c,
	0x12, 0x15, 0x0a, 0x11, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0e, 0x12,
	0x16, 0x0a, 0x12, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x12,
	0x12, 0x0a, 0x0e, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x11, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x12, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x13, 0x12, 0x17, 0x0a, 0x13, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x14, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53,
	0x54, 0x52, 0x49, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x10, 0x15, 0x12,
	0x10, 0x0a, 0x0c, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10,
	0x16, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x10, 0x17, 0x12, 0x17, 0x0a, 0x0f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54,
	0x45, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x10, 0x18, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x53, 0x10,
	0x19, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d,
	0x41, 0x10, 0x1a, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x4c,
	0x45, 0x43, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x10, 0x1b, 0x12, 0x11, 0x0a, 0x0d,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x1c, 0x12,
	0x11, 0x0a, 0x0d, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x10, 0x1d, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x10, 0x1e, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x1f, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x53, 0x55, 0x4d,
	0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x20, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x21,
	0x12, 0x14, 0x0a, 0x10, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x54,
	0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x22, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x23, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x24, 0x12, 0x14, 0x0a, 0x10,
	0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x25, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x4c,
	0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x26, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x27, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x28, 0x12,
	0x10, 0x0a, 0x0c, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10,
	0x29, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x41, 0x4c, 0x45, 0x52,
	0x54, 0x10, 0x2a, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x5f, 0x41, 0x4c,
	0x45, 0x52, 0x54, 0x10, 0x2b, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x55, 0x54, 0x45, 0x5f, 0x41, 0x4c,
	0x45, 0x52, 0x54, 0x10, 0x2c, 0x12, 0x22, 0x0a, 0x1a, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f,
	0x44, 0x45, 0x41, 0x44, 0x5f, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x10, 0x2d, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x21, 0x0a, 0x19, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x5f, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f,
	0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x2e, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x1d, 0x0a, 0x19,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x44,
	0x45, 0x41, 0x44, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x10, 0x2f, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x30,
	0x12, 0x13, 0x0a, 0x0f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x31, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f,
	0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x32, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x10, 0x33, 0x12, 0x12,
	0x0a, 0x0e, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52,
	0x10, 0x34, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x4e,
	0x49, 0x54, 0x4f, 0x52, 0x10, 0x35, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f,
	0x52, 0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x36, 0x12, 0x1c, 0x0a,
	0x18, 0x44, 0x45, 0x41, 0x44, 0x5f, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x10, 0x37, 0x12, 0x25, 0x0a, 0x21, 0x44,
	0x45, 0x41, 0x44, 0x5f, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x10, 0x38, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x41, 0x44, 0x5f, 0x4c, 0x45, 0x54, 0x54, 0x45,
	0x52, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x10, 0x39,
	0x12, 0x25, 0x0a, 0x21, 0x44, 0x45, 0x41, 0x44, 0x5f, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x3a, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x41, 0x44, 0x5f,
	0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x3b, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x45, 0x41, 0x44, 0x5f, 0x4c, 0x45,
	0x54, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x3c, 0x12, 0x20, 0x0a, 0x18,
	0x44, 0x45, 0x41, 0x44, 0x5f, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x3d, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x29,
	0x0a, 0x21, 0x44, 0x45, 0x41, 0x44, 0x5f, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x45, 0x10, 0x3e, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x45, 0x41,
	0x44, 0x5f, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x10, 0x3f, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x45, 0x41, 0x44,
	0x5f, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x5f, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x40,
	0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x45, 0x41, 0x44, 0x5f, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x10,
	0x41, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x45, 0x41, 0x44, 0x5f, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x53,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x42, 0x12, 0x27, 0x0a, 0x23, 0x44,
	0x45, 0x41, 0x44, 0x5f, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x43, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x54, 0x52,
	0x49, 0x47, 0x47, 0x45, 0x52, 0x10, 0x44, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43,
	0x54, 0x10, 0x45, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x6e,
	0x10, 0x6f, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x63, 0x6f, 0x72, 0x70, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_message_proto_rawDescOnce sync.Once
	file_message_proto_rawDescData = file_message_proto_rawDesc
)

func file_message_proto_rawDescGZIP() []byte {
	file_message_proto_rawDescOnce.Do(func() {
		file_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_proto_rawDescData)
	})
	return file_message_proto_rawDescData
}

var file_message_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_message_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_message_proto_goTypes = []interface{}{
	(Message_Type)(0),     // 0: events.Message.Type
	(*Message)(nil),       // 1: events.Message
	(*Team)(nil),          // 2: events.Team
	(*Info)(nil),          // 3: events.Info
	(*Collect)(nil),       // 4: events.Collect
	(*Replay)(nil),        // 5: events.Replay
	(*Schema)(nil),        // 6: events.Schema
	(*Task)(nil),          // 7: events.Task
	(*Destination)(nil),   // 8: events.Destination
	(*Account)(nil),       // 9: events.Account
	(*Subscription)(nil),  // 10: events.Subscription
	(*StripeWebhook)(nil), // 11: events.StripeWebhook
	(*Source)(nil),        // 12: events.Source
	(*APIToken)(nil),      // 13: events.APIToken
	(*DeadLetter)(nil),    // 14: events.DeadLetter
	(*Function)(nil),      // 15: events.Function
	(*Monitor)(nil),       // 16: events.Monitor
	(*AlertConfig)(nil),   // 17: events.AlertConfig
	(*MonitorStatus)(nil), // 18: events.MonitorStatus
	(*AlertTrigger)(nil),  // 19: events.AlertTrigger
}
var file_message_proto_depIdxs = []int32{
	0,  // 0: events.Message.type:type_name -> events.Message.Type
	2,  // 1: events.Message.team:type_name -> events.Team
	3,  // 2: events.Message.info:type_name -> events.Info
	4,  // 3: events.Message.collect:type_name -> events.Collect
	5,  // 4: events.Message.replay:type_name -> events.Replay
	6,  // 5: events.Message.schema:type_name -> events.Schema
	7,  // 6: events.Message.task:type_name -> events.Task
	8,  // 7: events.Message.destination:type_name -> events.Destination
	9,  // 8: events.Message.account:type_name -> events.Account
	10, // 9: events.Message.subscription:type_name -> events.Subscription
	11, // 10: events.Message.stripe_webhook:type_name -> events.StripeWebhook
	12, // 11: events.Message.source:type_name -> events.Source
	13, // 12: events.Message.api_token:type_name -> events.APIToken
	14, // 13: events.Message.dead_letter:type_name -> events.DeadLetter
	15, // 14: events.Message.function:type_name -> events.Function
	16, // 15: events.Message.monitor:type_name -> events.Monitor
	17, // 16: events.Message.alert_config:type_name -> events.AlertConfig
	18, // 17: events.Message.monitor_status:type_name -> events.MonitorStatus
	19, // 18: events.Message.alert_trigger:type_name -> events.AlertTrigger
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_message_proto_init() }
func file_message_proto_init() {
	if File_message_proto != nil {
		return
	}
	file_account_proto_init()
	file_alert_config_proto_init()
	file_alert_trigger_proto_init()
	file_apitoken_proto_init()
	file_collect_proto_init()
	file_deadletter_proto_init()
	file_destination_proto_init()
	file_function_proto_init()
	file_info_proto_init()
	file_monitor_proto_init()
	file_replay_proto_init()
	file_schema_proto_init()
	file_source_proto_init()
	file_subscription_proto_init()
	file_task_proto_init()
	file_team_proto_init()
	file_webhook_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_message_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Message_Collect)(nil),
		(*Message_Replay)(nil),
		(*Message_Schema)(nil),
		(*Message_Task)(nil),
		(*Message_Destination)(nil),
		(*Message_Account)(nil),
		(*Message_Subscription)(nil),
		(*Message_StripeWebhook)(nil),
		(*Message_Source)(nil),
		(*Message_ApiToken)(nil),
		(*Message_DeadLetter)(nil),
		(*Message_Function)(nil),
		(*Message_Monitor)(nil),
		(*Message_AlertConfig)(nil),
		(*Message_MonitorStatus)(nil),
		(*Message_AlertTrigger)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_proto_goTypes,
		DependencyIndexes: file_message_proto_depIdxs,
		EnumInfos:         file_message_proto_enumTypes,
		MessageInfos:      file_message_proto_msgTypes,
	}.Build()
	File_message_proto = out.File
	file_message_proto_rawDesc = nil
	file_message_proto_goTypes = nil
	file_message_proto_depIdxs = nil
}
