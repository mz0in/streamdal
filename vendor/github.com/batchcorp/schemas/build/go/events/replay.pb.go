// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: replay.proto

package events

import (
	destinations "github.com/batchcorp/schemas/build/go/events/destinations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReplaySource_Type int32

const (
	ReplaySource_UNSET             ReplaySource_Type = 0
	ReplaySource_COLLECTION        ReplaySource_Type = 1
	ReplaySource_DEAD_LETTER       ReplaySource_Type = 2
	ReplaySource_DEAD_LETTER_STAGE ReplaySource_Type = 3
)

// Enum value maps for ReplaySource_Type.
var (
	ReplaySource_Type_name = map[int32]string{
		0: "UNSET",
		1: "COLLECTION",
		2: "DEAD_LETTER",
		3: "DEAD_LETTER_STAGE",
	}
	ReplaySource_Type_value = map[string]int32{
		"UNSET":             0,
		"COLLECTION":        1,
		"DEAD_LETTER":       2,
		"DEAD_LETTER_STAGE": 3,
	}
)

func (x ReplaySource_Type) Enum() *ReplaySource_Type {
	p := new(ReplaySource_Type)
	*p = x
	return p
}

func (x ReplaySource_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReplaySource_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_replay_proto_enumTypes[0].Descriptor()
}

func (ReplaySource_Type) Type() protoreflect.EnumType {
	return &file_replay_proto_enumTypes[0]
}

func (x ReplaySource_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReplaySource_Type.Descriptor instead.
func (ReplaySource_Type) EnumDescriptor() ([]byte, []int) {
	return file_replay_proto_rawDescGZIP(), []int{0, 0}
}

type Replay_Type int32

const (
	Replay_UNSET      Replay_Type = 0
	Replay_ONETIME    Replay_Type = 1
	Replay_CONTINUOUS Replay_Type = 2
)

// Enum value maps for Replay_Type.
var (
	Replay_Type_name = map[int32]string{
		0: "UNSET",
		1: "ONETIME",
		2: "CONTINUOUS",
	}
	Replay_Type_value = map[string]int32{
		"UNSET":      0,
		"ONETIME":    1,
		"CONTINUOUS": 2,
	}
)

func (x Replay_Type) Enum() *Replay_Type {
	p := new(Replay_Type)
	*p = x
	return p
}

func (x Replay_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Replay_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_replay_proto_enumTypes[1].Descriptor()
}

func (Replay_Type) Type() protoreflect.EnumType {
	return &file_replay_proto_enumTypes[1]
}

func (x Replay_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Replay_Type.Descriptor instead.
func (Replay_Type) EnumDescriptor() ([]byte, []int) {
	return file_replay_proto_rawDescGZIP(), []int{1, 0}
}

type ReplaySource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ReplaySource_Type `protobuf:"varint,1,opt,name=type,proto3,enum=events.ReplaySource_Type" json:"type,omitempty"`
	// UUID of collection, dead letter or stage ID
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReplaySource) Reset() {
	*x = ReplaySource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replay_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaySource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaySource) ProtoMessage() {}

func (x *ReplaySource) ProtoReflect() protoreflect.Message {
	mi := &file_replay_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaySource.ProtoReflect.Descriptor instead.
func (*ReplaySource) Descriptor() ([]byte, []int) {
	return file_replay_proto_rawDescGZIP(), []int{0}
}

func (x *ReplaySource) GetType() ReplaySource_Type {
	if x != nil {
		return x.Type
	}
	return ReplaySource_UNSET
}

func (x *ReplaySource) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Replay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Replay id in DB
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Filter is used by the search service to find fitting events and pushing
	// them to HSB for consumption by the replay service.
	Filter *Filter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	// Used by reader to know which index to use
	// Deprecated as of 2022-10-12. Superseded by ReplaySource field
	//
	// Deprecated: Do not use.
	CollectId string `protobuf:"bytes,3,opt,name=collect_id,json=collectId,proto3" json:"collect_id,omitempty"`
	// Emitted by reader via an UPDATE_SCHEMA message
	// Consumed by ui-bff for storage to perform a replay redo
	// Consumed by reader in a CREATE_SCHEMA message in order to perform a replay redo
	QueryExecutionId string `protobuf:"bytes,4,opt,name=query_execution_id,json=queryExecutionId,proto3" json:"query_execution_id,omitempty"`
	// Used by reader and replayer to know if this replay is continuous or not
	Type Replay_Type `protobuf:"varint,5,opt,name=type,proto3,enum=events.Replay_Type" json:"type,omitempty"`
	// Whether to pull include metadata, with the message
	// GCP only currently. ~MG 2021-11-30
	IncludeMetadata bool `protobuf:"varint,6,opt,name=include_metadata,json=includeMetadata,proto3" json:"include_metadata,omitempty"`
	// No longer used. Transforms will now be done via pipelines
	//
	// Deprecated: Do not use.
	TransformFunction []byte `protobuf:"bytes,7,opt,name=transform_function,json=transformFunction,proto3" json:"transform_function,omitempty"`
	// Contains the data flow pipeline - usually filled out by ui-bff when creating
	// CREATE_REPLAY messages.
	Pipeline map[string]*Pipeline `protobuf:"bytes,8,rep,name=pipeline,proto3" json:"pipeline,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Deprecated. Use functions field below
	//
	// Deprecated: Do not use.
	Transformations map[int32]string `protobuf:"bytes,9,rep,name=transformations,proto3" json:"transformations,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Source          *ReplaySource    `protobuf:"bytes,10,opt,name=source,proto3" json:"source,omitempty"`
	// Index is the order in which transforms should be executed
	// Message contains database UUID of the suborbital function to run
	// and the ui-bff association_id for recording metrics for the function
	Functions map[int32]*FunctionAssoc `protobuf:"bytes,11,rep,name=functions,proto3" json:"functions,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Needed for destination metrics
	DestinationId string `protobuf:"bytes,12,opt,name=destination_id,json=destinationId,proto3" json:"destination_id,omitempty"`
	// Used by the replay service
	//
	// Types that are assignable to Dst:
	//
	//	*Replay_Http
	//	*Replay_Sqs
	//	*Replay_Amqp
	//	*Replay_Kafka
	//	*Replay_RedisPubsub
	//	*Replay_RedisStreams
	//	*Replay_Tunnel
	//	*Replay_Nsq
	//	*Replay_GcpPubsub
	//	*Replay_Nats
	//	*Replay_NatsStreaming
	//	*Replay_NatsJetstream
	//	*Replay_Collector
	Dst isReplay_Dst `protobuf_oneof:"dst"`
}

func (x *Replay) Reset() {
	*x = Replay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replay_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Replay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Replay) ProtoMessage() {}

func (x *Replay) ProtoReflect() protoreflect.Message {
	mi := &file_replay_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Replay.ProtoReflect.Descriptor instead.
func (*Replay) Descriptor() ([]byte, []int) {
	return file_replay_proto_rawDescGZIP(), []int{1}
}

func (x *Replay) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Replay) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

// Deprecated: Do not use.
func (x *Replay) GetCollectId() string {
	if x != nil {
		return x.CollectId
	}
	return ""
}

func (x *Replay) GetQueryExecutionId() string {
	if x != nil {
		return x.QueryExecutionId
	}
	return ""
}

func (x *Replay) GetType() Replay_Type {
	if x != nil {
		return x.Type
	}
	return Replay_UNSET
}

func (x *Replay) GetIncludeMetadata() bool {
	if x != nil {
		return x.IncludeMetadata
	}
	return false
}

// Deprecated: Do not use.
func (x *Replay) GetTransformFunction() []byte {
	if x != nil {
		return x.TransformFunction
	}
	return nil
}

func (x *Replay) GetPipeline() map[string]*Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// Deprecated: Do not use.
func (x *Replay) GetTransformations() map[int32]string {
	if x != nil {
		return x.Transformations
	}
	return nil
}

func (x *Replay) GetSource() *ReplaySource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Replay) GetFunctions() map[int32]*FunctionAssoc {
	if x != nil {
		return x.Functions
	}
	return nil
}

func (x *Replay) GetDestinationId() string {
	if x != nil {
		return x.DestinationId
	}
	return ""
}

func (m *Replay) GetDst() isReplay_Dst {
	if m != nil {
		return m.Dst
	}
	return nil
}

func (x *Replay) GetHttp() *destinations.HTTP {
	if x, ok := x.GetDst().(*Replay_Http); ok {
		return x.Http
	}
	return nil
}

func (x *Replay) GetSqs() *destinations.SQS {
	if x, ok := x.GetDst().(*Replay_Sqs); ok {
		return x.Sqs
	}
	return nil
}

func (x *Replay) GetAmqp() *destinations.AMQP {
	if x, ok := x.GetDst().(*Replay_Amqp); ok {
		return x.Amqp
	}
	return nil
}

func (x *Replay) GetKafka() *destinations.Kafka {
	if x, ok := x.GetDst().(*Replay_Kafka); ok {
		return x.Kafka
	}
	return nil
}

func (x *Replay) GetRedisPubsub() *destinations.RedisPubsub {
	if x, ok := x.GetDst().(*Replay_RedisPubsub); ok {
		return x.RedisPubsub
	}
	return nil
}

func (x *Replay) GetRedisStreams() *destinations.RedisStreams {
	if x, ok := x.GetDst().(*Replay_RedisStreams); ok {
		return x.RedisStreams
	}
	return nil
}

func (x *Replay) GetTunnel() *destinations.Tunnel {
	if x, ok := x.GetDst().(*Replay_Tunnel); ok {
		return x.Tunnel
	}
	return nil
}

func (x *Replay) GetNsq() *destinations.NSQ {
	if x, ok := x.GetDst().(*Replay_Nsq); ok {
		return x.Nsq
	}
	return nil
}

func (x *Replay) GetGcpPubsub() *destinations.GCPPubSub {
	if x, ok := x.GetDst().(*Replay_GcpPubsub); ok {
		return x.GcpPubsub
	}
	return nil
}

func (x *Replay) GetNats() *destinations.NATS {
	if x, ok := x.GetDst().(*Replay_Nats); ok {
		return x.Nats
	}
	return nil
}

func (x *Replay) GetNatsStreaming() *destinations.NATSStreaming {
	if x, ok := x.GetDst().(*Replay_NatsStreaming); ok {
		return x.NatsStreaming
	}
	return nil
}

func (x *Replay) GetNatsJetstream() *destinations.NATSJetStream {
	if x, ok := x.GetDst().(*Replay_NatsJetstream); ok {
		return x.NatsJetstream
	}
	return nil
}

func (x *Replay) GetCollector() *destinations.Collector {
	if x, ok := x.GetDst().(*Replay_Collector); ok {
		return x.Collector
	}
	return nil
}

type isReplay_Dst interface {
	isReplay_Dst()
}

type Replay_Http struct {
	Http *destinations.HTTP `protobuf:"bytes,100,opt,name=http,proto3,oneof"`
}

type Replay_Sqs struct {
	Sqs *destinations.SQS `protobuf:"bytes,101,opt,name=sqs,proto3,oneof"`
}

type Replay_Amqp struct {
	Amqp *destinations.AMQP `protobuf:"bytes,102,opt,name=amqp,proto3,oneof"`
}

type Replay_Kafka struct {
	Kafka *destinations.Kafka `protobuf:"bytes,103,opt,name=kafka,proto3,oneof"`
}

type Replay_RedisPubsub struct {
	RedisPubsub *destinations.RedisPubsub `protobuf:"bytes,104,opt,name=redis_pubsub,json=redisPubsub,proto3,oneof"`
}

type Replay_RedisStreams struct {
	RedisStreams *destinations.RedisStreams `protobuf:"bytes,105,opt,name=redis_streams,json=redisStreams,proto3,oneof"`
}

type Replay_Tunnel struct {
	Tunnel *destinations.Tunnel `protobuf:"bytes,106,opt,name=tunnel,proto3,oneof"`
}

type Replay_Nsq struct {
	Nsq *destinations.NSQ `protobuf:"bytes,107,opt,name=nsq,proto3,oneof"`
}

type Replay_GcpPubsub struct {
	GcpPubsub *destinations.GCPPubSub `protobuf:"bytes,108,opt,name=gcp_pubsub,json=gcpPubsub,proto3,oneof"`
}

type Replay_Nats struct {
	Nats *destinations.NATS `protobuf:"bytes,109,opt,name=nats,proto3,oneof"`
}

type Replay_NatsStreaming struct {
	NatsStreaming *destinations.NATSStreaming `protobuf:"bytes,110,opt,name=nats_streaming,json=natsStreaming,proto3,oneof"`
}

type Replay_NatsJetstream struct {
	NatsJetstream *destinations.NATSJetStream `protobuf:"bytes,111,opt,name=nats_jetstream,json=natsJetstream,proto3,oneof"`
}

type Replay_Collector struct {
	Collector *destinations.Collector `protobuf:"bytes,112,opt,name=collector,proto3,oneof"`
}

func (*Replay_Http) isReplay_Dst() {}

func (*Replay_Sqs) isReplay_Dst() {}

func (*Replay_Amqp) isReplay_Dst() {}

func (*Replay_Kafka) isReplay_Dst() {}

func (*Replay_RedisPubsub) isReplay_Dst() {}

func (*Replay_RedisStreams) isReplay_Dst() {}

func (*Replay_Tunnel) isReplay_Dst() {}

func (*Replay_Nsq) isReplay_Dst() {}

func (*Replay_GcpPubsub) isReplay_Dst() {}

func (*Replay_Nats) isReplay_Dst() {}

func (*Replay_NatsStreaming) isReplay_Dst() {}

func (*Replay_NatsJetstream) isReplay_Dst() {}

func (*Replay_Collector) isReplay_Dst() {}

var File_replay_proto protoreflect.FileDescriptor

var file_replay_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x17, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6d, 0x71, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x63, 0x70, 0x5f,
	0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6e, 0x61,
	0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x6a, 0x65, 0x74, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6e, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x73, 0x75,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x71, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x98, 0x01, 0x0a, 0x0c, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x49, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x44, 0x45, 0x41, 0x44, 0x5f, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x44, 0x45, 0x41, 0x44, 0x5f, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x47, 0x45, 0x10, 0x03, 0x22, 0x81, 0x0c, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x26, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x71, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a,
	0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x02, 0x18, 0x01, 0x52, 0x11, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x51, 0x0a, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x48, 0x54, 0x54,
	0x50, 0x48, 0x00, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x25, 0x0a, 0x03, 0x73, 0x71, 0x73,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x51, 0x53, 0x48, 0x00, 0x52, 0x03, 0x73, 0x71, 0x73,
	0x12, 0x28, 0x0a, 0x04, 0x61, 0x6d, 0x71, 0x70, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x4d,
	0x51, 0x50, 0x48, 0x00, 0x52, 0x04, 0x61, 0x6d, 0x71, 0x70, 0x12, 0x2b, 0x0a, 0x05, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x48, 0x00,
	0x52, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x5f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x64,
	0x69, 0x73, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69,
	0x73, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x12, 0x41, 0x0a, 0x0d, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65,
	0x64, 0x69, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65,
	0x64, 0x69, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x48, 0x00, 0x52, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x03, 0x6e, 0x73,
	0x71, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x53, 0x51, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x73,
	0x71, 0x12, 0x38, 0x0a, 0x0a, 0x67, 0x63, 0x70, 0x5f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x18,
	0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x43, 0x50, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x48, 0x00,
	0x52, 0x09, 0x67, 0x63, 0x70, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x12, 0x28, 0x0a, 0x04, 0x6e,
	0x61, 0x74, 0x73, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x41, 0x54, 0x53, 0x48, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x0e, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x41, 0x54,
	0x53, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0d, 0x6e, 0x61,
	0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a, 0x0e, 0x6e,
	0x61, 0x74, 0x73, 0x5f, 0x6a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x6f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4e, 0x41, 0x54, 0x53, 0x4a, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x48, 0x00, 0x52, 0x0d, 0x6e, 0x61, 0x74, 0x73, 0x4a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x70,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x4d, 0x0a, 0x0d, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a,
	0x0e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x2e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x4e, 0x45, 0x54, 0x49, 0x4d, 0x45,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x4f, 0x55, 0x53,
	0x10, 0x02, 0x42, 0x05, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x63, 0x6f, 0x72,
	0x70, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f,
	0x67, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_replay_proto_rawDescOnce sync.Once
	file_replay_proto_rawDescData = file_replay_proto_rawDesc
)

func file_replay_proto_rawDescGZIP() []byte {
	file_replay_proto_rawDescOnce.Do(func() {
		file_replay_proto_rawDescData = protoimpl.X.CompressGZIP(file_replay_proto_rawDescData)
	})
	return file_replay_proto_rawDescData
}

var file_replay_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_replay_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_replay_proto_goTypes = []interface{}{
	(ReplaySource_Type)(0),             // 0: events.ReplaySource.Type
	(Replay_Type)(0),                   // 1: events.Replay.Type
	(*ReplaySource)(nil),               // 2: events.ReplaySource
	(*Replay)(nil),                     // 3: events.Replay
	nil,                                // 4: events.Replay.PipelineEntry
	nil,                                // 5: events.Replay.TransformationsEntry
	nil,                                // 6: events.Replay.FunctionsEntry
	(*Filter)(nil),                     // 7: events.Filter
	(*destinations.HTTP)(nil),          // 8: destinations.HTTP
	(*destinations.SQS)(nil),           // 9: destinations.SQS
	(*destinations.AMQP)(nil),          // 10: destinations.AMQP
	(*destinations.Kafka)(nil),         // 11: destinations.Kafka
	(*destinations.RedisPubsub)(nil),   // 12: destinations.RedisPubsub
	(*destinations.RedisStreams)(nil),  // 13: destinations.RedisStreams
	(*destinations.Tunnel)(nil),        // 14: destinations.Tunnel
	(*destinations.NSQ)(nil),           // 15: destinations.NSQ
	(*destinations.GCPPubSub)(nil),     // 16: destinations.GCPPubSub
	(*destinations.NATS)(nil),          // 17: destinations.NATS
	(*destinations.NATSStreaming)(nil), // 18: destinations.NATSStreaming
	(*destinations.NATSJetStream)(nil), // 19: destinations.NATSJetStream
	(*destinations.Collector)(nil),     // 20: destinations.Collector
	(*Pipeline)(nil),                   // 21: events.Pipeline
	(*FunctionAssoc)(nil),              // 22: events.FunctionAssoc
}
var file_replay_proto_depIdxs = []int32{
	0,  // 0: events.ReplaySource.type:type_name -> events.ReplaySource.Type
	7,  // 1: events.Replay.filter:type_name -> events.Filter
	1,  // 2: events.Replay.type:type_name -> events.Replay.Type
	4,  // 3: events.Replay.pipeline:type_name -> events.Replay.PipelineEntry
	5,  // 4: events.Replay.transformations:type_name -> events.Replay.TransformationsEntry
	2,  // 5: events.Replay.source:type_name -> events.ReplaySource
	6,  // 6: events.Replay.functions:type_name -> events.Replay.FunctionsEntry
	8,  // 7: events.Replay.http:type_name -> destinations.HTTP
	9,  // 8: events.Replay.sqs:type_name -> destinations.SQS
	10, // 9: events.Replay.amqp:type_name -> destinations.AMQP
	11, // 10: events.Replay.kafka:type_name -> destinations.Kafka
	12, // 11: events.Replay.redis_pubsub:type_name -> destinations.RedisPubsub
	13, // 12: events.Replay.redis_streams:type_name -> destinations.RedisStreams
	14, // 13: events.Replay.tunnel:type_name -> destinations.Tunnel
	15, // 14: events.Replay.nsq:type_name -> destinations.NSQ
	16, // 15: events.Replay.gcp_pubsub:type_name -> destinations.GCPPubSub
	17, // 16: events.Replay.nats:type_name -> destinations.NATS
	18, // 17: events.Replay.nats_streaming:type_name -> destinations.NATSStreaming
	19, // 18: events.Replay.nats_jetstream:type_name -> destinations.NATSJetStream
	20, // 19: events.Replay.collector:type_name -> destinations.Collector
	21, // 20: events.Replay.PipelineEntry.value:type_name -> events.Pipeline
	22, // 21: events.Replay.FunctionsEntry.value:type_name -> events.FunctionAssoc
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_replay_proto_init() }
func file_replay_proto_init() {
	if File_replay_proto != nil {
		return
	}
	file_filter_proto_init()
	file_function_proto_init()
	file_pipeline_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_replay_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaySource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replay_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Replay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_replay_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Replay_Http)(nil),
		(*Replay_Sqs)(nil),
		(*Replay_Amqp)(nil),
		(*Replay_Kafka)(nil),
		(*Replay_RedisPubsub)(nil),
		(*Replay_RedisStreams)(nil),
		(*Replay_Tunnel)(nil),
		(*Replay_Nsq)(nil),
		(*Replay_GcpPubsub)(nil),
		(*Replay_Nats)(nil),
		(*Replay_NatsStreaming)(nil),
		(*Replay_NatsJetstream)(nil),
		(*Replay_Collector)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_replay_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_replay_proto_goTypes,
		DependencyIndexes: file_replay_proto_depIdxs,
		EnumInfos:         file_replay_proto_enumTypes,
		MessageInfos:      file_replay_proto_msgTypes,
	}.Build()
	File_replay_proto = out.File
	file_replay_proto_rawDesc = nil
	file_replay_proto_goTypes = nil
	file_replay_proto_depIdxs = nil
}
