// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: counter.proto

package metrics

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Counter_Type int32

const (
	Counter_UNSET Counter_Type = 0
	// Number of events collected
	//
	// Deprecated: Do not use.
	Counter_COLLECTION Counter_Type = 1
	// Number of events replayed
	//
	// Deprecated: Do not use.
	Counter_REPLAY Counter_Type = 2
	// Number of events written to ElasticSearch
	//
	// Deprecated: Do not use.
	Counter_STORAGE Counter_Type = 3
	// Renamed from REPLAY_BYTES to allow for V2. ~DS 10.18.2022
	//
	// Deprecated: Do not use.
	Counter_REPLAY_BYTES_OLD Counter_Type = 4
	// Number of bytes written to ElasticSearch ~DS 10.05.2022
	//
	// Deprecated: Do not use.
	Counter_STORAGE_BYTES Counter_Type = 5
	// Number of events written to a dead letter queue
	//
	// Deprecated: Do not use.
	Counter_DEADLETTER Counter_Type = 6
	// Ingest (grpc/http-collector) counters
	//
	// Deprecated: Do not use.
	Counter_INGEST_BYTES Counter_Type = 7
	// Number of bytes passed through a transform function for a collection
	//
	// Deprecated: Do not use.
	Counter_TRANSFORM_BYTES_INGEST Counter_Type = 8
	// Number of bytes passed through a transform function for a replay
	//
	// Deprecated: Do not use.
	Counter_TRANSFORM_BYTES_REPLAY Counter_Type = 9
	// Number of bytes written to customer's S3 bucket
	//
	// Deprecated: Do not use.
	Counter_STORAGE_BYTES_LTS_EXTERNAL Counter_Type = 11
	// Number of bytes written to our S3 bucket
	//
	// Deprecated: Do not use.
	Counter_STORAGE_BYTES_LTS_INTERNAL   Counter_Type = 12
	Counter_COLLECT_BYTES                Counter_Type = 100
	Counter_COLLECT_EVENTS               Counter_Type = 101
	Counter_COLLECT_ERRORS               Counter_Type = 102
	Counter_REPLAY_BYTES                 Counter_Type = 200
	Counter_REPLAY_EVENTS                Counter_Type = 201
	Counter_REPLAY_ERRORS                Counter_Type = 202
	Counter_STORAGE_HOT_BYTES            Counter_Type = 300
	Counter_STORAGE_HOT_EVENTS           Counter_Type = 301
	Counter_STORAGE_HOT_ERRORS           Counter_Type = 302
	Counter_STORAGE_COLD_INTERNAL_BYTES  Counter_Type = 400
	Counter_STORAGE_COLD_INTERNAL_EVENTS Counter_Type = 401
	Counter_STORAGE_COLD_INTERNAL_ERRORS Counter_Type = 402
	Counter_STORAGE_COLD_EXTERNAL_BYTES  Counter_Type = 500
	Counter_STORAGE_COLD_EXTERNAL_EVENTS Counter_Type = 501
	Counter_STORAGE_COLD_EXTERNAL_ERRORS Counter_Type = 502
	// Recorded under function->resource association recorded in ui_bff.func_assoc table
	Counter_FUNCTION_COLLECT_BYTES      Counter_Type = 600
	Counter_FUNCTION_COLLECT_EVENTS     Counter_Type = 601
	Counter_FUNCTION_COLLECT_ERRORS     Counter_Type = 602
	Counter_FUNCTION_COLLECT_MEMORY     Counter_Type = 603
	Counter_FUNCTION_COLLECT_RUNTIME_MS Counter_Type = 604
	// Recorded under function->resource association recorded in ui_bff.func_assoc table
	Counter_FUNCTION_REPLAY_BYTES      Counter_Type = 700
	Counter_FUNCTION_REPLAY_EVENTS     Counter_Type = 701
	Counter_FUNCTION_REPLAY_ERRORS     Counter_Type = 702
	Counter_FUNCTION_REPLAY_MEMORY     Counter_Type = 703
	Counter_FUNCTION_REPLAY_RUNTIME_MS Counter_Type = 704
	// Recorded under function->resource association recorded in ui_bff.func_assoc table
	Counter_FUNCTION_MONITOR_BYTES      Counter_Type = 705
	Counter_FUNCTION_MONITOR_EVENTS     Counter_Type = 706
	Counter_FUNCTION_MONITOR_ERRORS     Counter_Type = 707
	Counter_FUNCTION_MONITOR_MEMORY     Counter_Type = 708
	Counter_FUNCTION_MONITOR_RUNTIME_MS Counter_Type = 709
	Counter_DEAD_LETTER_BYTES           Counter_Type = 800
	Counter_DEAD_LETTER_EVENTS          Counter_Type = 801
	Counter_DEAD_LETTER_ERRORS          Counter_Type = 802
	Counter_MONITOR_BYTES               Counter_Type = 900
	Counter_MONITOR_EVENTS              Counter_Type = 901
	Counter_MONITOR_ERRORS              Counter_Type = 902
	Counter_MONITOR_TRIGGERS            Counter_Type = 903
	Counter_DESTINATION_BYTES           Counter_Type = 1000
	Counter_DESTINATION_EVENTS          Counter_Type = 1001
	Counter_DESTINATION_ERRORS          Counter_Type = 1002
	// These are recorded under the actual function id, unlike FUNCTION_XXXXX_BYTES
	// etc events which are recorded under the function->resource association ID.
	Counter_FUNCTION_BYTES                  Counter_Type = 1100
	Counter_FUNCTION_EVENTS                 Counter_Type = 1101
	Counter_FUNCTION_ERRORS                 Counter_Type = 1102
	Counter_FUNCTION_MEMORY                 Counter_Type = 1103
	Counter_FUNCTION_RUNTIME_MS             Counter_Type = 1104
	Counter_FUNCTION_DEAD_LETTER_BYTES      Counter_Type = 1200
	Counter_FUNCTION_DEAD_LETTER_EVENTS     Counter_Type = 1201
	Counter_FUNCTION_DEAD_LETTER_ERRORS     Counter_Type = 1202
	Counter_FUNCTION_DEAD_LETTER_MEMORY     Counter_Type = 1203
	Counter_FUNCTION_DEAD_LETTER_RUNTIME_MS Counter_Type = 1204
	Counter_MONITOR_COLLECT_BYTES           Counter_Type = 1300
	Counter_MONITOR_COLLECT_EVENTS          Counter_Type = 1301
	Counter_MONITOR_COLLECT_ERRORS          Counter_Type = 1302
	Counter_MONITOR_COLLECT_TRIGGERS        Counter_Type = 1303
)

// Enum value maps for Counter_Type.
var (
	Counter_Type_name = map[int32]string{
		0:    "UNSET",
		1:    "COLLECTION",
		2:    "REPLAY",
		3:    "STORAGE",
		4:    "REPLAY_BYTES_OLD",
		5:    "STORAGE_BYTES",
		6:    "DEADLETTER",
		7:    "INGEST_BYTES",
		8:    "TRANSFORM_BYTES_INGEST",
		9:    "TRANSFORM_BYTES_REPLAY",
		11:   "STORAGE_BYTES_LTS_EXTERNAL",
		12:   "STORAGE_BYTES_LTS_INTERNAL",
		100:  "COLLECT_BYTES",
		101:  "COLLECT_EVENTS",
		102:  "COLLECT_ERRORS",
		200:  "REPLAY_BYTES",
		201:  "REPLAY_EVENTS",
		202:  "REPLAY_ERRORS",
		300:  "STORAGE_HOT_BYTES",
		301:  "STORAGE_HOT_EVENTS",
		302:  "STORAGE_HOT_ERRORS",
		400:  "STORAGE_COLD_INTERNAL_BYTES",
		401:  "STORAGE_COLD_INTERNAL_EVENTS",
		402:  "STORAGE_COLD_INTERNAL_ERRORS",
		500:  "STORAGE_COLD_EXTERNAL_BYTES",
		501:  "STORAGE_COLD_EXTERNAL_EVENTS",
		502:  "STORAGE_COLD_EXTERNAL_ERRORS",
		600:  "FUNCTION_COLLECT_BYTES",
		601:  "FUNCTION_COLLECT_EVENTS",
		602:  "FUNCTION_COLLECT_ERRORS",
		603:  "FUNCTION_COLLECT_MEMORY",
		604:  "FUNCTION_COLLECT_RUNTIME_MS",
		700:  "FUNCTION_REPLAY_BYTES",
		701:  "FUNCTION_REPLAY_EVENTS",
		702:  "FUNCTION_REPLAY_ERRORS",
		703:  "FUNCTION_REPLAY_MEMORY",
		704:  "FUNCTION_REPLAY_RUNTIME_MS",
		705:  "FUNCTION_MONITOR_BYTES",
		706:  "FUNCTION_MONITOR_EVENTS",
		707:  "FUNCTION_MONITOR_ERRORS",
		708:  "FUNCTION_MONITOR_MEMORY",
		709:  "FUNCTION_MONITOR_RUNTIME_MS",
		800:  "DEAD_LETTER_BYTES",
		801:  "DEAD_LETTER_EVENTS",
		802:  "DEAD_LETTER_ERRORS",
		900:  "MONITOR_BYTES",
		901:  "MONITOR_EVENTS",
		902:  "MONITOR_ERRORS",
		903:  "MONITOR_TRIGGERS",
		1000: "DESTINATION_BYTES",
		1001: "DESTINATION_EVENTS",
		1002: "DESTINATION_ERRORS",
		1100: "FUNCTION_BYTES",
		1101: "FUNCTION_EVENTS",
		1102: "FUNCTION_ERRORS",
		1103: "FUNCTION_MEMORY",
		1104: "FUNCTION_RUNTIME_MS",
		1200: "FUNCTION_DEAD_LETTER_BYTES",
		1201: "FUNCTION_DEAD_LETTER_EVENTS",
		1202: "FUNCTION_DEAD_LETTER_ERRORS",
		1203: "FUNCTION_DEAD_LETTER_MEMORY",
		1204: "FUNCTION_DEAD_LETTER_RUNTIME_MS",
		1300: "MONITOR_COLLECT_BYTES",
		1301: "MONITOR_COLLECT_EVENTS",
		1302: "MONITOR_COLLECT_ERRORS",
		1303: "MONITOR_COLLECT_TRIGGERS",
	}
	Counter_Type_value = map[string]int32{
		"UNSET":                           0,
		"COLLECTION":                      1,
		"REPLAY":                          2,
		"STORAGE":                         3,
		"REPLAY_BYTES_OLD":                4,
		"STORAGE_BYTES":                   5,
		"DEADLETTER":                      6,
		"INGEST_BYTES":                    7,
		"TRANSFORM_BYTES_INGEST":          8,
		"TRANSFORM_BYTES_REPLAY":          9,
		"STORAGE_BYTES_LTS_EXTERNAL":      11,
		"STORAGE_BYTES_LTS_INTERNAL":      12,
		"COLLECT_BYTES":                   100,
		"COLLECT_EVENTS":                  101,
		"COLLECT_ERRORS":                  102,
		"REPLAY_BYTES":                    200,
		"REPLAY_EVENTS":                   201,
		"REPLAY_ERRORS":                   202,
		"STORAGE_HOT_BYTES":               300,
		"STORAGE_HOT_EVENTS":              301,
		"STORAGE_HOT_ERRORS":              302,
		"STORAGE_COLD_INTERNAL_BYTES":     400,
		"STORAGE_COLD_INTERNAL_EVENTS":    401,
		"STORAGE_COLD_INTERNAL_ERRORS":    402,
		"STORAGE_COLD_EXTERNAL_BYTES":     500,
		"STORAGE_COLD_EXTERNAL_EVENTS":    501,
		"STORAGE_COLD_EXTERNAL_ERRORS":    502,
		"FUNCTION_COLLECT_BYTES":          600,
		"FUNCTION_COLLECT_EVENTS":         601,
		"FUNCTION_COLLECT_ERRORS":         602,
		"FUNCTION_COLLECT_MEMORY":         603,
		"FUNCTION_COLLECT_RUNTIME_MS":     604,
		"FUNCTION_REPLAY_BYTES":           700,
		"FUNCTION_REPLAY_EVENTS":          701,
		"FUNCTION_REPLAY_ERRORS":          702,
		"FUNCTION_REPLAY_MEMORY":          703,
		"FUNCTION_REPLAY_RUNTIME_MS":      704,
		"FUNCTION_MONITOR_BYTES":          705,
		"FUNCTION_MONITOR_EVENTS":         706,
		"FUNCTION_MONITOR_ERRORS":         707,
		"FUNCTION_MONITOR_MEMORY":         708,
		"FUNCTION_MONITOR_RUNTIME_MS":     709,
		"DEAD_LETTER_BYTES":               800,
		"DEAD_LETTER_EVENTS":              801,
		"DEAD_LETTER_ERRORS":              802,
		"MONITOR_BYTES":                   900,
		"MONITOR_EVENTS":                  901,
		"MONITOR_ERRORS":                  902,
		"MONITOR_TRIGGERS":                903,
		"DESTINATION_BYTES":               1000,
		"DESTINATION_EVENTS":              1001,
		"DESTINATION_ERRORS":              1002,
		"FUNCTION_BYTES":                  1100,
		"FUNCTION_EVENTS":                 1101,
		"FUNCTION_ERRORS":                 1102,
		"FUNCTION_MEMORY":                 1103,
		"FUNCTION_RUNTIME_MS":             1104,
		"FUNCTION_DEAD_LETTER_BYTES":      1200,
		"FUNCTION_DEAD_LETTER_EVENTS":     1201,
		"FUNCTION_DEAD_LETTER_ERRORS":     1202,
		"FUNCTION_DEAD_LETTER_MEMORY":     1203,
		"FUNCTION_DEAD_LETTER_RUNTIME_MS": 1204,
		"MONITOR_COLLECT_BYTES":           1300,
		"MONITOR_COLLECT_EVENTS":          1301,
		"MONITOR_COLLECT_ERRORS":          1302,
		"MONITOR_COLLECT_TRIGGERS":        1303,
	}
)

func (x Counter_Type) Enum() *Counter_Type {
	p := new(Counter_Type)
	*p = x
	return p
}

func (x Counter_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Counter_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_counter_proto_enumTypes[0].Descriptor()
}

func (Counter_Type) Type() protoreflect.EnumType {
	return &file_counter_proto_enumTypes[0]
}

func (x Counter_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Counter_Type.Descriptor instead.
func (Counter_Type) EnumDescriptor() ([]byte, []int) {
	return file_counter_proto_rawDescGZIP(), []int{0, 0}
}

// Used for internal metrics collection with "mlib" library and metrics service.
type Counter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Replay ID, collection ID, monitor ID, function ID, etc.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Team ID
	TeamId string `protobuf:"bytes,2,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	// Type of counter
	Type Counter_Type `protobuf:"varint,3,opt,name=type,proto3,enum=metrics.Counter_Type" json:"type,omitempty"`
	// Usually service name
	Source string `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	// Counter value
	Value int64 `protobuf:"varint,5,opt,name=value,proto3" json:"value,omitempty"`
	// Unix nanosecond timestamp in UTC
	Timestamp int64 `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Counter) Reset() {
	*x = Counter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_counter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Counter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Counter) ProtoMessage() {}

func (x *Counter) ProtoReflect() protoreflect.Message {
	mi := &file_counter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Counter.ProtoReflect.Descriptor instead.
func (*Counter) Descriptor() ([]byte, []int) {
	return file_counter_proto_rawDescGZIP(), []int{0}
}

func (x *Counter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Counter) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *Counter) GetType() Counter_Type {
	if x != nil {
		return x.Type
	}
	return Counter_UNSET
}

func (x *Counter) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Counter) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Counter) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

var File_counter_proto protoreflect.FileDescriptor

var file_counter_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xa7, 0x0f, 0x0a, 0x07, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0xfb, 0x0d, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a,
	0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0a, 0x43, 0x4f, 0x4c, 0x4c,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x0e, 0x0a, 0x06,
	0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x0f, 0x0a, 0x07,
	0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x18, 0x0a,
	0x10, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x5f, 0x4f, 0x4c,
	0x44, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x15, 0x0a, 0x0d, 0x53, 0x54, 0x4f, 0x52, 0x41,
	0x47, 0x45, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x05, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x12,
	0x0a, 0x0a, 0x44, 0x45, 0x41, 0x44, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x10, 0x06, 0x1a, 0x02,
	0x08, 0x01, 0x12, 0x14, 0x0a, 0x0c, 0x49, 0x4e, 0x47, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x59, 0x54,
	0x45, 0x53, 0x10, 0x07, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x1e, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x47, 0x45,
	0x53, 0x54, 0x10, 0x08, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x1e, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4c,
	0x41, 0x59, 0x10, 0x09, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x22, 0x0a, 0x1a, 0x53, 0x54, 0x4f, 0x52,
	0x41, 0x47, 0x45, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x5f, 0x4c, 0x54, 0x53, 0x5f, 0x45, 0x58,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x0b, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x22, 0x0a, 0x1a,
	0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x5f, 0x4c, 0x54,
	0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x0c, 0x1a, 0x02, 0x08, 0x01,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x42, 0x59, 0x54, 0x45,
	0x53, 0x10, 0x64, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4c, 0x4c, 0x45,
	0x43, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x10, 0x66, 0x12, 0x11, 0x0a, 0x0c, 0x52,
	0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0xc8, 0x01, 0x12, 0x12,
	0x0a, 0x0d, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x10,
	0xc9, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x53, 0x10, 0xca, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47,
	0x45, 0x5f, 0x48, 0x4f, 0x54, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0xac, 0x02, 0x12, 0x17,
	0x0a, 0x12, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x48, 0x4f, 0x54, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x53, 0x10, 0xad, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x53, 0x54, 0x4f, 0x52, 0x41,
	0x47, 0x45, 0x5f, 0x48, 0x4f, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x10, 0xae, 0x02,
	0x12, 0x20, 0x0a, 0x1b, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x44,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10,
	0x90, 0x03, 0x12, 0x21, 0x0a, 0x1c, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f,
	0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x53, 0x10, 0x91, 0x03, 0x12, 0x21, 0x0a, 0x1c, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45,
	0x5f, 0x43, 0x4f, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x53, 0x10, 0x92, 0x03, 0x12, 0x20, 0x0a, 0x1b, 0x53, 0x54, 0x4f, 0x52,
	0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x44, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0xf4, 0x03, 0x12, 0x21, 0x0a, 0x1c, 0x53, 0x54,
	0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x44, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x10, 0xf5, 0x03, 0x12, 0x21, 0x0a,
	0x1c, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x44, 0x5f, 0x45, 0x58,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x10, 0xf6, 0x03,
	0x12, 0x1b, 0x0a, 0x16, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4c,
	0x4c, 0x45, 0x43, 0x54, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0xd8, 0x04, 0x12, 0x1c, 0x0a,
	0x17, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43,
	0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x10, 0xd9, 0x04, 0x12, 0x1c, 0x0a, 0x17, 0x46,
	0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x10, 0xda, 0x04, 0x12, 0x1c, 0x0a, 0x17, 0x46, 0x55, 0x4e,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x45,
	0x4d, 0x4f, 0x52, 0x59, 0x10, 0xdb, 0x04, 0x12, 0x20, 0x0a, 0x1b, 0x46, 0x55, 0x4e, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x4d, 0x53, 0x10, 0xdc, 0x04, 0x12, 0x1a, 0x0a, 0x15, 0x46, 0x55, 0x4e,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x42, 0x59, 0x54,
	0x45, 0x53, 0x10, 0xbc, 0x05, 0x12, 0x1b, 0x0a, 0x16, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x10,
	0xbd, 0x05, 0x12, 0x1b, 0x0a, 0x16, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x10, 0xbe, 0x05, 0x12,
	0x1b, 0x0a, 0x16, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x50, 0x4c,
	0x41, 0x59, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x10, 0xbf, 0x05, 0x12, 0x1f, 0x0a, 0x1a,
	0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f,
	0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4d, 0x53, 0x10, 0xc0, 0x05, 0x12, 0x1b, 0x0a,
	0x16, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f,
	0x52, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0xc1, 0x05, 0x12, 0x1c, 0x0a, 0x17, 0x46, 0x55,
	0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x53, 0x10, 0xc2, 0x05, 0x12, 0x1c, 0x0a, 0x17, 0x46, 0x55, 0x4e, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x53, 0x10, 0xc3, 0x05, 0x12, 0x1c, 0x0a, 0x17, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52,
	0x59, 0x10, 0xc4, 0x05, 0x12, 0x20, 0x0a, 0x1b, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x4d, 0x53, 0x10, 0xc5, 0x05, 0x12, 0x16, 0x0a, 0x11, 0x44, 0x45, 0x41, 0x44, 0x5f, 0x4c,
	0x45, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0xa0, 0x06, 0x12, 0x17,
	0x0a, 0x12, 0x44, 0x45, 0x41, 0x44, 0x5f, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x53, 0x10, 0xa1, 0x06, 0x12, 0x17, 0x0a, 0x12, 0x44, 0x45, 0x41, 0x44, 0x5f,
	0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x10, 0xa2, 0x06,
	0x12, 0x12, 0x0a, 0x0d, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x42, 0x59, 0x54, 0x45,
	0x53, 0x10, 0x84, 0x07, 0x12, 0x13, 0x0a, 0x0e, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x85, 0x07, 0x12, 0x13, 0x0a, 0x0e, 0x4d, 0x4f, 0x4e,
	0x49, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x10, 0x86, 0x07, 0x12, 0x15,
	0x0a, 0x10, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45,
	0x52, 0x53, 0x10, 0x87, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0xe8, 0x07, 0x12, 0x17, 0x0a,
	0x12, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x53, 0x10, 0xe9, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x10, 0xea, 0x07, 0x12,
	0x13, 0x0a, 0x0e, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x59, 0x54, 0x45,
	0x53, 0x10, 0xcc, 0x08, 0x12, 0x14, 0x0a, 0x0f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x10, 0xcd, 0x08, 0x12, 0x14, 0x0a, 0x0f, 0x46, 0x55,
	0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x10, 0xce, 0x08,
	0x12, 0x14, 0x0a, 0x0f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x4d,
	0x4f, 0x52, 0x59, 0x10, 0xcf, 0x08, 0x12, 0x18, 0x0a, 0x13, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4d, 0x53, 0x10, 0xd0, 0x08,
	0x12, 0x1f, 0x0a, 0x1a, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x41,
	0x44, 0x5f, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0xb0,
	0x09, 0x12, 0x20, 0x0a, 0x1b, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45,
	0x41, 0x44, 0x5f, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53,
	0x10, 0xb1, 0x09, 0x12, 0x20, 0x0a, 0x1b, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x45, 0x41, 0x44, 0x5f, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x53, 0x10, 0xb2, 0x09, 0x12, 0x20, 0x0a, 0x1b, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x5f, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x45,
	0x4d, 0x4f, 0x52, 0x59, 0x10, 0xb3, 0x09, 0x12, 0x24, 0x0a, 0x1f, 0x46, 0x55, 0x4e, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x5f, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f,
	0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4d, 0x53, 0x10, 0xb4, 0x09, 0x12, 0x1a, 0x0a,
	0x15, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54,
	0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x94, 0x0a, 0x12, 0x1b, 0x0a, 0x16, 0x4d, 0x4f, 0x4e,
	0x49, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x53, 0x10, 0x95, 0x0a, 0x12, 0x1b, 0x0a, 0x16, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f,
	0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53,
	0x10, 0x96, 0x0a, 0x12, 0x1d, 0x0a, 0x18, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x43,
	0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x53, 0x10,
	0x97, 0x0a, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x63, 0x6f, 0x72, 0x70, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_counter_proto_rawDescOnce sync.Once
	file_counter_proto_rawDescData = file_counter_proto_rawDesc
)

func file_counter_proto_rawDescGZIP() []byte {
	file_counter_proto_rawDescOnce.Do(func() {
		file_counter_proto_rawDescData = protoimpl.X.CompressGZIP(file_counter_proto_rawDescData)
	})
	return file_counter_proto_rawDescData
}

var file_counter_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_counter_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_counter_proto_goTypes = []interface{}{
	(Counter_Type)(0), // 0: metrics.Counter.Type
	(*Counter)(nil),   // 1: metrics.Counter
}
var file_counter_proto_depIdxs = []int32{
	0, // 0: metrics.Counter.type:type_name -> metrics.Counter.Type
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_counter_proto_init() }
func file_counter_proto_init() {
	if File_counter_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_counter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Counter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_counter_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_counter_proto_goTypes,
		DependencyIndexes: file_counter_proto_depIdxs,
		EnumInfos:         file_counter_proto_enumTypes,
		MessageInfos:      file_counter_proto_msgTypes,
	}.Build()
	File_counter_proto = out.File
	file_counter_proto_rawDesc = nil
	file_counter_proto_goTypes = nil
	file_counter_proto_depIdxs = nil
}
