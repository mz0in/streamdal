// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: schema.proto

package events

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Schema_Type int32

const (
	Schema_UNKNOWN  Schema_Type = 0
	Schema_PLAIN    Schema_Type = 1
	Schema_JSON     Schema_Type = 2
	Schema_PROTOBUF Schema_Type = 3
)

// Enum value maps for Schema_Type.
var (
	Schema_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "PLAIN",
		2: "JSON",
		3: "PROTOBUF",
	}
	Schema_Type_value = map[string]int32{
		"UNKNOWN":  0,
		"PLAIN":    1,
		"JSON":     2,
		"PROTOBUF": 3,
	}
)

func (x Schema_Type) Enum() *Schema_Type {
	p := new(Schema_Type)
	*p = x
	return p
}

func (x Schema_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Schema_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_proto_enumTypes[0].Descriptor()
}

func (Schema_Type) Type() protoreflect.EnumType {
	return &file_schema_proto_enumTypes[0]
}

func (x Schema_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Schema_Type.Descriptor instead.
func (Schema_Type) EnumDescriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{0, 0}
}

type Schema_ElectionStatus int32

const (
	Schema_UNSET   Schema_ElectionStatus = 0
	Schema_SUCCESS Schema_ElectionStatus = 1
	Schema_FAILED  Schema_ElectionStatus = 2
)

// Enum value maps for Schema_ElectionStatus.
var (
	Schema_ElectionStatus_name = map[int32]string{
		0: "UNSET",
		1: "SUCCESS",
		2: "FAILED",
	}
	Schema_ElectionStatus_value = map[string]int32{
		"UNSET":   0,
		"SUCCESS": 1,
		"FAILED":  2,
	}
)

func (x Schema_ElectionStatus) Enum() *Schema_ElectionStatus {
	p := new(Schema_ElectionStatus)
	*p = x
	return p
}

func (x Schema_ElectionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Schema_ElectionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_proto_enumTypes[1].Descriptor()
}

func (Schema_ElectionStatus) Type() protoreflect.EnumType {
	return &file_schema_proto_enumTypes[1]
}

func (x Schema_ElectionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Schema_ElectionStatus.Descriptor instead.
func (Schema_ElectionStatus) EnumDescriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{0, 1}
}

// deprecated
type Schema_UpdateType int32

const (
	Schema_INITIAL  Schema_UpdateType = 0
	Schema_EXISTING Schema_UpdateType = 1
)

// Enum value maps for Schema_UpdateType.
var (
	Schema_UpdateType_name = map[int32]string{
		0: "INITIAL",
		1: "EXISTING",
	}
	Schema_UpdateType_value = map[string]int32{
		"INITIAL":  0,
		"EXISTING": 1,
	}
)

func (x Schema_UpdateType) Enum() *Schema_UpdateType {
	p := new(Schema_UpdateType)
	*p = x
	return p
}

func (x Schema_UpdateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Schema_UpdateType) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_proto_enumTypes[2].Descriptor()
}

func (Schema_UpdateType) Type() protoreflect.EnumType {
	return &file_schema_proto_enumTypes[2]
}

func (x Schema_UpdateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Schema_UpdateType.Descriptor instead.
func (Schema_UpdateType) EnumDescriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{0, 2}
}

type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The collector will ONLY fill out the 'id' for incoming messages - it is
	// the responsibility of downstream consumers to lookup the corresponding
	// schema configuration by 'id'.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Indicates the "data type" - what format are the collectors expecting to
	// receive the events in?
	Type Schema_Type `protobuf:"varint,2,opt,name=type,proto3,enum=events.Schema_Type" json:"type,omitempty"`
	// Not sure what this is used for - super vague; Mark wasn't able to find any uses
	//
	// Deprecated: Do not use.
	Raw map[string][]byte `protobuf:"bytes,3,rep,name=raw,proto3" json:"raw,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Only used when Type == PROTOBUF
	ProtobufMessageName       string `protobuf:"bytes,4,opt,name=protobuf_message_name,json=protobufMessageName,proto3" json:"protobuf_message_name,omitempty"`
	ProtobufFileDescriptorSet []byte `protobuf:"bytes,5,opt,name=protobuf_file_descriptor_set,json=protobufFileDescriptorSet,proto3" json:"protobuf_file_descriptor_set,omitempty"`
	// Used for shallow envelopes. This is the protobuf field ID that will contain the encoded
	// shallow schema. We need to decode this separately from
	FieldId int32 `protobuf:"varint,14,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
	// A single election can reference multiple batches - this ID represents
	// this specific election event. Set by athena-writer, used by schema-manager
	// for the etcd key under /schema-manager/elections/$collection_id/<$election_id>
	ElectionId string `protobuf:"bytes,99,opt,name=election_id,json=electionId,proto3" json:"election_id,omitempty"`
	// What collection this schema message pertains to
	ElectionCollectionId string `protobuf:"bytes,100,opt,name=election_collection_id,json=electionCollectionId,proto3" json:"election_collection_id,omitempty"`
	// Indicates the status of a completed election; set by schema-manager
	ElectionStatus Schema_ElectionStatus `protobuf:"varint,101,opt,name=election_status,json=electionStatus,proto3,enum=events.Schema_ElectionStatus" json:"election_status,omitempty"`
	// In case of election failure, this field explains what happened
	ElectionStatusMessage string `protobuf:"bytes,102,opt,name=election_status_message,json=electionStatusMessage,proto3" json:"election_status_message,omitempty"`
	// Which batches this election pertains to.
	// Every athena-writer assigns a unique batch-id for the batch they are
	// working on/electing. If a STATUS_ELECT_SCHEMA comes in, athena-writer
	// needs to check that the STATUS_ELECT_SCHEMA pertains to both the
	// collection_id AND batch id before it uses the elected schema. If the
	// batch id is not found, then their ELECT_SCHEMA probably pertains to
	// another election (and should continue waiting for another
	// STATUS_ELECT_SCHEMA message).
	//
	// This field is used by both - athena-writer and schema-manager:
	//
	// athena-writer uses it to specify what batch this ELECT_SCHEMA pertains to
	// schema-manager uses it to indicate which batches an STATUS_ELECT_SCHEMA pertains to
	ElectionBatchIds []string `protobuf:"bytes,103,rep,name=election_batch_ids,json=electionBatchIds,proto3" json:"election_batch_ids,omitempty"`
	// Set by athena-writer IF schema election succeeded
	ElectionParquetSchema []byte `protobuf:"bytes,104,opt,name=election_parquet_schema,json=electionParquetSchema,proto3" json:"election_parquet_schema,omitempty"`
}

func (x *Schema) Reset() {
	*x = Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{0}
}

func (x *Schema) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Schema) GetType() Schema_Type {
	if x != nil {
		return x.Type
	}
	return Schema_UNKNOWN
}

// Deprecated: Do not use.
func (x *Schema) GetRaw() map[string][]byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

func (x *Schema) GetProtobufMessageName() string {
	if x != nil {
		return x.ProtobufMessageName
	}
	return ""
}

func (x *Schema) GetProtobufFileDescriptorSet() []byte {
	if x != nil {
		return x.ProtobufFileDescriptorSet
	}
	return nil
}

func (x *Schema) GetFieldId() int32 {
	if x != nil {
		return x.FieldId
	}
	return 0
}

func (x *Schema) GetElectionId() string {
	if x != nil {
		return x.ElectionId
	}
	return ""
}

func (x *Schema) GetElectionCollectionId() string {
	if x != nil {
		return x.ElectionCollectionId
	}
	return ""
}

func (x *Schema) GetElectionStatus() Schema_ElectionStatus {
	if x != nil {
		return x.ElectionStatus
	}
	return Schema_UNSET
}

func (x *Schema) GetElectionStatusMessage() string {
	if x != nil {
		return x.ElectionStatusMessage
	}
	return ""
}

func (x *Schema) GetElectionBatchIds() []string {
	if x != nil {
		return x.ElectionBatchIds
	}
	return nil
}

func (x *Schema) GetElectionParquetSchema() []byte {
	if x != nil {
		return x.ElectionParquetSchema
	}
	return nil
}

var File_schema_proto protoreflect.FileDescriptor

var file_schema_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x92, 0x06, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x72, 0x61,
	0x77, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x61, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a,
	0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x46, 0x69, 0x6c,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x63, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x46, 0x0a, 0x0f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x67, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x73, 0x12, 0x36,
	0x0a, 0x17, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x71, 0x75,
	0x65, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x15, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x36, 0x0a, 0x08, 0x52, 0x61, 0x77, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x36,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x42, 0x55, 0x46, 0x10, 0x03, 0x22, 0x34, 0x0a, 0x0e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x22, 0x27, 0x0a, 0x0a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x0e, 0x42, 0x2e, 0x5a, 0x2c, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x63,
	0x6f, 0x72, 0x70, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_schema_proto_rawDescOnce sync.Once
	file_schema_proto_rawDescData = file_schema_proto_rawDesc
)

func file_schema_proto_rawDescGZIP() []byte {
	file_schema_proto_rawDescOnce.Do(func() {
		file_schema_proto_rawDescData = protoimpl.X.CompressGZIP(file_schema_proto_rawDescData)
	})
	return file_schema_proto_rawDescData
}

var file_schema_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_schema_proto_goTypes = []interface{}{
	(Schema_Type)(0),           // 0: events.Schema.Type
	(Schema_ElectionStatus)(0), // 1: events.Schema.ElectionStatus
	(Schema_UpdateType)(0),     // 2: events.Schema.UpdateType
	(*Schema)(nil),             // 3: events.Schema
	nil,                        // 4: events.Schema.RawEntry
}
var file_schema_proto_depIdxs = []int32{
	0, // 0: events.Schema.type:type_name -> events.Schema.Type
	4, // 1: events.Schema.raw:type_name -> events.Schema.RawEntry
	1, // 2: events.Schema.election_status:type_name -> events.Schema.ElectionStatus
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_schema_proto_init() }
func file_schema_proto_init() {
	if File_schema_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_schema_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_schema_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_schema_proto_goTypes,
		DependencyIndexes: file_schema_proto_depIdxs,
		EnumInfos:         file_schema_proto_enumTypes,
		MessageInfos:      file_schema_proto_msgTypes,
	}.Build()
	File_schema_proto = out.File
	file_schema_proto_rawDesc = nil
	file_schema_proto_goTypes = nil
	file_schema_proto_depIdxs = nil
}
