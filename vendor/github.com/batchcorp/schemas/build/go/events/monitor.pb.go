// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: monitor.proto

package events

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MonitorType int32

const (
	MonitorType_MONITOR_TYPE_UNSET       MonitorType = 0
	MonitorType_MONITOR_TYPE_FIELD       MonitorType = 1
	MonitorType_MONITOR_TYPE_FUNCTION    MonitorType = 2
	MonitorType_MONITOR_TYPE_RATE        MonitorType = 3
	MonitorType_MONITOR_TYPE_SCHEMA      MonitorType = 4
	MonitorType_MONITOR_TYPE_DEAD_LETTER MonitorType = 5
)

// Enum value maps for MonitorType.
var (
	MonitorType_name = map[int32]string{
		0: "MONITOR_TYPE_UNSET",
		1: "MONITOR_TYPE_FIELD",
		2: "MONITOR_TYPE_FUNCTION",
		3: "MONITOR_TYPE_RATE",
		4: "MONITOR_TYPE_SCHEMA",
		5: "MONITOR_TYPE_DEAD_LETTER",
	}
	MonitorType_value = map[string]int32{
		"MONITOR_TYPE_UNSET":       0,
		"MONITOR_TYPE_FIELD":       1,
		"MONITOR_TYPE_FUNCTION":    2,
		"MONITOR_TYPE_RATE":        3,
		"MONITOR_TYPE_SCHEMA":      4,
		"MONITOR_TYPE_DEAD_LETTER": 5,
	}
)

func (x MonitorType) Enum() *MonitorType {
	p := new(MonitorType)
	*p = x
	return p
}

func (x MonitorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MonitorType) Descriptor() protoreflect.EnumDescriptor {
	return file_monitor_proto_enumTypes[0].Descriptor()
}

func (MonitorType) Type() protoreflect.EnumType {
	return &file_monitor_proto_enumTypes[0]
}

func (x MonitorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MonitorType.Descriptor instead.
func (MonitorType) EnumDescriptor() ([]byte, []int) {
	return file_monitor_proto_rawDescGZIP(), []int{0}
}

type MonitorState int32

const (
	MonitorState_MONITOR_STATE_UNSET    MonitorState = 0
	MonitorState_MONITOR_STATE_ACTIVE   MonitorState = 1
	MonitorState_MONITOR_STATE_INACTIVE MonitorState = 2
)

// Enum value maps for MonitorState.
var (
	MonitorState_name = map[int32]string{
		0: "MONITOR_STATE_UNSET",
		1: "MONITOR_STATE_ACTIVE",
		2: "MONITOR_STATE_INACTIVE",
	}
	MonitorState_value = map[string]int32{
		"MONITOR_STATE_UNSET":    0,
		"MONITOR_STATE_ACTIVE":   1,
		"MONITOR_STATE_INACTIVE": 2,
	}
)

func (x MonitorState) Enum() *MonitorState {
	p := new(MonitorState)
	*p = x
	return p
}

func (x MonitorState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MonitorState) Descriptor() protoreflect.EnumDescriptor {
	return file_monitor_proto_enumTypes[1].Descriptor()
}

func (MonitorState) Type() protoreflect.EnumType {
	return &file_monitor_proto_enumTypes[1]
}

func (x MonitorState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MonitorState.Descriptor instead.
func (MonitorState) EnumDescriptor() ([]byte, []int) {
	return file_monitor_proto_rawDescGZIP(), []int{1}
}

type MonitorStatusLevel int32

const (
	MonitorStatusLevel_MONITOR_STATUS_UNSET    MonitorStatusLevel = 0
	MonitorStatusLevel_MONITOR_STATUS_WARNING  MonitorStatusLevel = 1
	MonitorStatusLevel_MONITOR_STATUS_CRITICAL MonitorStatusLevel = 2
	MonitorStatusLevel_MONITOR_STATUS_RESOLVED MonitorStatusLevel = 3
)

// Enum value maps for MonitorStatusLevel.
var (
	MonitorStatusLevel_name = map[int32]string{
		0: "MONITOR_STATUS_UNSET",
		1: "MONITOR_STATUS_WARNING",
		2: "MONITOR_STATUS_CRITICAL",
		3: "MONITOR_STATUS_RESOLVED",
	}
	MonitorStatusLevel_value = map[string]int32{
		"MONITOR_STATUS_UNSET":    0,
		"MONITOR_STATUS_WARNING":  1,
		"MONITOR_STATUS_CRITICAL": 2,
		"MONITOR_STATUS_RESOLVED": 3,
	}
)

func (x MonitorStatusLevel) Enum() *MonitorStatusLevel {
	p := new(MonitorStatusLevel)
	*p = x
	return p
}

func (x MonitorStatusLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MonitorStatusLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_monitor_proto_enumTypes[2].Descriptor()
}

func (MonitorStatusLevel) Type() protoreflect.EnumType {
	return &file_monitor_proto_enumTypes[2]
}

func (x MonitorStatusLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MonitorStatusLevel.Descriptor instead.
func (MonitorStatusLevel) EnumDescriptor() ([]byte, []int) {
	return file_monitor_proto_rawDescGZIP(), []int{2}
}

type MonitorActionType int32

const (
	MonitorActionType_MONITOR_ACTION_UNSET MonitorActionType = 0
	// Send an alert
	MonitorActionType_MONITOR_ACTION_ALERT MonitorActionType = 1
	// Write message to dead-letter queue instead of collection
	MonitorActionType_MONITOR_ACTION_DEAD_LETTER MonitorActionType = 2
)

// Enum value maps for MonitorActionType.
var (
	MonitorActionType_name = map[int32]string{
		0: "MONITOR_ACTION_UNSET",
		1: "MONITOR_ACTION_ALERT",
		2: "MONITOR_ACTION_DEAD_LETTER",
	}
	MonitorActionType_value = map[string]int32{
		"MONITOR_ACTION_UNSET":       0,
		"MONITOR_ACTION_ALERT":       1,
		"MONITOR_ACTION_DEAD_LETTER": 2,
	}
)

func (x MonitorActionType) Enum() *MonitorActionType {
	p := new(MonitorActionType)
	*p = x
	return p
}

func (x MonitorActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MonitorActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_monitor_proto_enumTypes[3].Descriptor()
}

func (MonitorActionType) Type() protoreflect.EnumType {
	return &file_monitor_proto_enumTypes[3]
}

func (x MonitorActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MonitorActionType.Descriptor instead.
func (MonitorActionType) EnumDescriptor() ([]byte, []int) {
	return file_monitor_proto_rawDescGZIP(), []int{3}
}

type RateMonitor_ValueType int32

const (
	RateMonitor_VALUE_TYPE_UNSET RateMonitor_ValueType = 0
	RateMonitor_BYTES            RateMonitor_ValueType = 1
	RateMonitor_EVENTS           RateMonitor_ValueType = 2
	RateMonitor_ERRORS           RateMonitor_ValueType = 3
)

// Enum value maps for RateMonitor_ValueType.
var (
	RateMonitor_ValueType_name = map[int32]string{
		0: "VALUE_TYPE_UNSET",
		1: "BYTES",
		2: "EVENTS",
		3: "ERRORS",
	}
	RateMonitor_ValueType_value = map[string]int32{
		"VALUE_TYPE_UNSET": 0,
		"BYTES":            1,
		"EVENTS":           2,
		"ERRORS":           3,
	}
)

func (x RateMonitor_ValueType) Enum() *RateMonitor_ValueType {
	p := new(RateMonitor_ValueType)
	*p = x
	return p
}

func (x RateMonitor_ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RateMonitor_ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_monitor_proto_enumTypes[4].Descriptor()
}

func (RateMonitor_ValueType) Type() protoreflect.EnumType {
	return &file_monitor_proto_enumTypes[4]
}

func (x RateMonitor_ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RateMonitor_ValueType.Descriptor instead.
func (RateMonitor_ValueType) EnumDescriptor() ([]byte, []int) {
	return file_monitor_proto_rawDescGZIP(), []int{3, 0}
}

type RateMonitor_Operator int32

const (
	RateMonitor_OPERATOR_UNSET RateMonitor_Operator = 0
	RateMonitor_GT             RateMonitor_Operator = 1
	RateMonitor_LT             RateMonitor_Operator = 2
)

// Enum value maps for RateMonitor_Operator.
var (
	RateMonitor_Operator_name = map[int32]string{
		0: "OPERATOR_UNSET",
		1: "GT",
		2: "LT",
	}
	RateMonitor_Operator_value = map[string]int32{
		"OPERATOR_UNSET": 0,
		"GT":             1,
		"LT":             2,
	}
)

func (x RateMonitor_Operator) Enum() *RateMonitor_Operator {
	p := new(RateMonitor_Operator)
	*p = x
	return p
}

func (x RateMonitor_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RateMonitor_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_monitor_proto_enumTypes[5].Descriptor()
}

func (RateMonitor_Operator) Type() protoreflect.EnumType {
	return &file_monitor_proto_enumTypes[5]
}

func (x RateMonitor_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RateMonitor_Operator.Descriptor instead.
func (RateMonitor_Operator) EnumDescriptor() ([]byte, []int) {
	return file_monitor_proto_rawDescGZIP(), []int{3, 1}
}

type SchemaMonitor_Condition int32

const (
	SchemaMonitor_UNSET     SchemaMonitor_Condition = 0
	SchemaMonitor_EVOLUTION SchemaMonitor_Condition = 1
	SchemaMonitor_CONFLICT  SchemaMonitor_Condition = 2
)

// Enum value maps for SchemaMonitor_Condition.
var (
	SchemaMonitor_Condition_name = map[int32]string{
		0: "UNSET",
		1: "EVOLUTION",
		2: "CONFLICT",
	}
	SchemaMonitor_Condition_value = map[string]int32{
		"UNSET":     0,
		"EVOLUTION": 1,
		"CONFLICT":  2,
	}
)

func (x SchemaMonitor_Condition) Enum() *SchemaMonitor_Condition {
	p := new(SchemaMonitor_Condition)
	*p = x
	return p
}

func (x SchemaMonitor_Condition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SchemaMonitor_Condition) Descriptor() protoreflect.EnumDescriptor {
	return file_monitor_proto_enumTypes[6].Descriptor()
}

func (SchemaMonitor_Condition) Type() protoreflect.EnumType {
	return &file_monitor_proto_enumTypes[6]
}

func (x SchemaMonitor_Condition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SchemaMonitor_Condition.Descriptor instead.
func (SchemaMonitor_Condition) EnumDescriptor() ([]byte, []int) {
	return file_monitor_proto_rawDescGZIP(), []int{5, 0}
}

type Note struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message            string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	CreatedByAccountId string `protobuf:"bytes,2,opt,name=created_by_account_id,json=createdByAccountId,proto3" json:"created_by_account_id,omitempty"`
	CreatedAt          int64  `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *Note) Reset() {
	*x = Note{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Note) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Note) ProtoMessage() {}

func (x *Note) ProtoReflect() protoreflect.Message {
	mi := &file_monitor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Note.ProtoReflect.Descriptor instead.
func (*Note) Descriptor() ([]byte, []int) {
	return file_monitor_proto_rawDescGZIP(), []int{0}
}

func (x *Note) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Note) GetCreatedByAccountId() string {
	if x != nil {
		return x.CreatedByAccountId
	}
	return ""
}

func (x *Note) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type FieldMonitor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field    string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Rule     string   `protobuf:"bytes,2,opt,name=rule,proto3" json:"rule,omitempty"` // this will probably have to be updated ~DS
	RuleArgs []string `protobuf:"bytes,3,rep,name=rule_args,json=ruleArgs,proto3" json:"rule_args,omitempty"`
}

func (x *FieldMonitor) Reset() {
	*x = FieldMonitor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldMonitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldMonitor) ProtoMessage() {}

func (x *FieldMonitor) ProtoReflect() protoreflect.Message {
	mi := &file_monitor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldMonitor.ProtoReflect.Descriptor instead.
func (*FieldMonitor) Descriptor() ([]byte, []int) {
	return file_monitor_proto_rawDescGZIP(), []int{1}
}

func (x *FieldMonitor) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *FieldMonitor) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

func (x *FieldMonitor) GetRuleArgs() []string {
	if x != nil {
		return x.RuleArgs
	}
	return nil
}

type DeadLetterMonitor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeadLetterMonitor) Reset() {
	*x = DeadLetterMonitor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeadLetterMonitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeadLetterMonitor) ProtoMessage() {}

func (x *DeadLetterMonitor) ProtoReflect() protoreflect.Message {
	mi := &file_monitor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeadLetterMonitor.ProtoReflect.Descriptor instead.
func (*DeadLetterMonitor) Descriptor() ([]byte, []int) {
	return file_monitor_proto_rawDescGZIP(), []int{2}
}

type RateMonitor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value           int64                 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	ValueType       RateMonitor_ValueType `protobuf:"varint,2,opt,name=value_type,json=valueType,proto3,enum=events.RateMonitor_ValueType" json:"value_type,omitempty"`
	IntervalSeconds int64                 `protobuf:"varint,3,opt,name=interval_seconds,json=intervalSeconds,proto3" json:"interval_seconds,omitempty"`
	Operator        RateMonitor_Operator  `protobuf:"varint,4,opt,name=operator,proto3,enum=events.RateMonitor_Operator" json:"operator,omitempty"`
}

func (x *RateMonitor) Reset() {
	*x = RateMonitor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateMonitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateMonitor) ProtoMessage() {}

func (x *RateMonitor) ProtoReflect() protoreflect.Message {
	mi := &file_monitor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateMonitor.ProtoReflect.Descriptor instead.
func (*RateMonitor) Descriptor() ([]byte, []int) {
	return file_monitor_proto_rawDescGZIP(), []int{3}
}

func (x *RateMonitor) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *RateMonitor) GetValueType() RateMonitor_ValueType {
	if x != nil {
		return x.ValueType
	}
	return RateMonitor_VALUE_TYPE_UNSET
}

func (x *RateMonitor) GetIntervalSeconds() int64 {
	if x != nil {
		return x.IntervalSeconds
	}
	return 0
}

func (x *RateMonitor) GetOperator() RateMonitor_Operator {
	if x != nil {
		return x.Operator
	}
	return RateMonitor_OPERATOR_UNSET
}

// Suborbital function will be executed and provided with the payload
// If the function returns "true", the configured alert will be triggered
type FunctionMonitor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Message contains database UUID of the suborbital function to run
	// and the ui-bff association_id for recording metrics for the function
	Function *FunctionAssoc `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`
}

func (x *FunctionMonitor) Reset() {
	*x = FunctionMonitor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionMonitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionMonitor) ProtoMessage() {}

func (x *FunctionMonitor) ProtoReflect() protoreflect.Message {
	mi := &file_monitor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionMonitor.ProtoReflect.Descriptor instead.
func (*FunctionMonitor) Descriptor() ([]byte, []int) {
	return file_monitor_proto_rawDescGZIP(), []int{4}
}

func (x *FunctionMonitor) GetFunction() *FunctionAssoc {
	if x != nil {
		return x.Function
	}
	return nil
}

type SchemaMonitor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition SchemaMonitor_Condition `protobuf:"varint,1,opt,name=condition,proto3,enum=events.SchemaMonitor_Condition" json:"condition,omitempty"`
}

func (x *SchemaMonitor) Reset() {
	*x = SchemaMonitor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaMonitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaMonitor) ProtoMessage() {}

func (x *SchemaMonitor) ProtoReflect() protoreflect.Message {
	mi := &file_monitor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaMonitor.ProtoReflect.Descriptor instead.
func (*SchemaMonitor) Descriptor() ([]byte, []int) {
	return file_monitor_proto_rawDescGZIP(), []int{5}
}

func (x *SchemaMonitor) GetCondition() SchemaMonitor_Condition {
	if x != nil {
		return x.Condition
	}
	return SchemaMonitor_UNSET
}

// The period of time and number of occurrences that a monitor should exceed in order to trigger
// a monitor violation
type Threshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interval is in seconds.
	Interval    int64 `protobuf:"varint,1,opt,name=interval,proto3" json:"interval,omitempty"`
	Occurrences int64 `protobuf:"varint,2,opt,name=occurrences,proto3" json:"occurrences,omitempty"`
}

func (x *Threshold) Reset() {
	*x = Threshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Threshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Threshold) ProtoMessage() {}

func (x *Threshold) ProtoReflect() protoreflect.Message {
	mi := &file_monitor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Threshold.ProtoReflect.Descriptor instead.
func (*Threshold) Descriptor() ([]byte, []int) {
	return file_monitor_proto_rawDescGZIP(), []int{6}
}

func (x *Threshold) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *Threshold) GetOccurrences() int64 {
	if x != nil {
		return x.Occurrences
	}
	return 0
}

type Monitor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Notes []*Note `protobuf:"bytes,2,rep,name=notes,proto3" json:"notes,omitempty"`
	// Deprecated in favor of MonitorAssoc
	//
	// Deprecated: Do not use.
	CollectionIds      []string     `protobuf:"bytes,3,rep,name=collection_ids,json=collectionIds,proto3" json:"collection_ids,omitempty"`
	Type               MonitorType  `protobuf:"varint,4,opt,name=type,proto3,enum=events.MonitorType" json:"type,omitempty"` // Indicates which condition to expect
	State              MonitorState `protobuf:"varint,5,opt,name=state,proto3,enum=events.MonitorState" json:"state,omitempty"`
	CreatedByAccountId string       `protobuf:"bytes,6,opt,name=created_by_account_id,json=createdByAccountId,proto3" json:"created_by_account_id,omitempty"`
	CreatedAt          int64        `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedByAccountId string       `protobuf:"bytes,8,opt,name=updated_by_account_id,json=updatedByAccountId,proto3" json:"updated_by_account_id,omitempty"`
	UpdatedAt          int64        `protobuf:"varint,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Deprecated, use ActionAlert instead
	//
	// Deprecated: Do not use.
	AlertConfigIds []string `protobuf:"bytes,10,rep,name=alert_config_ids,json=alertConfigIds,proto3" json:"alert_config_ids,omitempty"`
	// The level that will be emitted with the MonitorStatus event when there is a violation
	// May be over ridden in certain instances such as detection of SSNs, CC numbers
	DefaultStatusLevel MonitorStatusLevel `protobuf:"varint,11,opt,name=default_status_level,json=defaultStatusLevel,proto3,enum=events.MonitorStatusLevel" json:"default_status_level,omitempty"`
	// The period of time (in seconds) and number of occurrences that a monitor should exceed in order to trigger a violation
	Threshold *Threshold       `protobuf:"bytes,12,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Actions   []*MonitorAction `protobuf:"bytes,13,rep,name=actions,proto3" json:"actions,omitempty"`
	Name      string           `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`
	// Key is collection ID
	Collections map[string]*MonitorAssoc `protobuf:"bytes,15,rep,name=collections,proto3" json:"collections,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are assignable to Condition:
	//
	//	*Monitor_Field
	//	*Monitor_Function
	//	*Monitor_Rate
	//	*Monitor_Schema
	//	*Monitor_DeadLetter
	Condition isMonitor_Condition `protobuf_oneof:"condition"`
}

func (x *Monitor) Reset() {
	*x = Monitor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Monitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Monitor) ProtoMessage() {}

func (x *Monitor) ProtoReflect() protoreflect.Message {
	mi := &file_monitor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Monitor.ProtoReflect.Descriptor instead.
func (*Monitor) Descriptor() ([]byte, []int) {
	return file_monitor_proto_rawDescGZIP(), []int{7}
}

func (x *Monitor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Monitor) GetNotes() []*Note {
	if x != nil {
		return x.Notes
	}
	return nil
}

// Deprecated: Do not use.
func (x *Monitor) GetCollectionIds() []string {
	if x != nil {
		return x.CollectionIds
	}
	return nil
}

func (x *Monitor) GetType() MonitorType {
	if x != nil {
		return x.Type
	}
	return MonitorType_MONITOR_TYPE_UNSET
}

func (x *Monitor) GetState() MonitorState {
	if x != nil {
		return x.State
	}
	return MonitorState_MONITOR_STATE_UNSET
}

func (x *Monitor) GetCreatedByAccountId() string {
	if x != nil {
		return x.CreatedByAccountId
	}
	return ""
}

func (x *Monitor) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Monitor) GetUpdatedByAccountId() string {
	if x != nil {
		return x.UpdatedByAccountId
	}
	return ""
}

func (x *Monitor) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// Deprecated: Do not use.
func (x *Monitor) GetAlertConfigIds() []string {
	if x != nil {
		return x.AlertConfigIds
	}
	return nil
}

func (x *Monitor) GetDefaultStatusLevel() MonitorStatusLevel {
	if x != nil {
		return x.DefaultStatusLevel
	}
	return MonitorStatusLevel_MONITOR_STATUS_UNSET
}

func (x *Monitor) GetThreshold() *Threshold {
	if x != nil {
		return x.Threshold
	}
	return nil
}

func (x *Monitor) GetActions() []*MonitorAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *Monitor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Monitor) GetCollections() map[string]*MonitorAssoc {
	if x != nil {
		return x.Collections
	}
	return nil
}

func (m *Monitor) GetCondition() isMonitor_Condition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (x *Monitor) GetField() *FieldMonitor {
	if x, ok := x.GetCondition().(*Monitor_Field); ok {
		return x.Field
	}
	return nil
}

func (x *Monitor) GetFunction() *FunctionMonitor {
	if x, ok := x.GetCondition().(*Monitor_Function); ok {
		return x.Function
	}
	return nil
}

func (x *Monitor) GetRate() *RateMonitor {
	if x, ok := x.GetCondition().(*Monitor_Rate); ok {
		return x.Rate
	}
	return nil
}

func (x *Monitor) GetSchema() *SchemaMonitor {
	if x, ok := x.GetCondition().(*Monitor_Schema); ok {
		return x.Schema
	}
	return nil
}

func (x *Monitor) GetDeadLetter() *DeadLetterMonitor {
	if x, ok := x.GetCondition().(*Monitor_DeadLetter); ok {
		return x.DeadLetter
	}
	return nil
}

type isMonitor_Condition interface {
	isMonitor_Condition()
}

type Monitor_Field struct {
	Field *FieldMonitor `protobuf:"bytes,100,opt,name=field,proto3,oneof"`
}

type Monitor_Function struct {
	Function *FunctionMonitor `protobuf:"bytes,101,opt,name=function,proto3,oneof"`
}

type Monitor_Rate struct {
	Rate *RateMonitor `protobuf:"bytes,102,opt,name=rate,proto3,oneof"`
}

type Monitor_Schema struct {
	Schema *SchemaMonitor `protobuf:"bytes,103,opt,name=schema,proto3,oneof"`
}

type Monitor_DeadLetter struct {
	DeadLetter *DeadLetterMonitor `protobuf:"bytes,104,opt,name=dead_letter,json=deadLetter,proto3,oneof"`
}

func (*Monitor_Field) isMonitor_Condition() {}

func (*Monitor_Function) isMonitor_Condition() {}

func (*Monitor_Rate) isMonitor_Condition() {}

func (*Monitor_Schema) isMonitor_Condition() {}

func (*Monitor_DeadLetter) isMonitor_Condition() {}

// Emitted by monitor service with the type MONITOR_VIOLATION
type MonitorStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of a monitor emitted by CREATE_MONITOR’
	MonitorId string `protobuf:"bytes,1,opt,name=monitor_id,json=monitorId,proto3" json:"monitor_id,omitempty"`
	// Message to display to the user
	Message   string             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Level     MonitorStatusLevel `protobuf:"varint,3,opt,name=level,proto3,enum=events.MonitorStatusLevel" json:"level,omitempty"`
	CreatedAt int64              `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Any additional data needed to present to the user
	Metadata map[string]string `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// UUIDs of the AlertConfigs to be used to send alerts to the customer
	AlertConfigIds []string `protobuf:"bytes,6,rep,name=alert_config_ids,json=alertConfigIds,proto3" json:"alert_config_ids,omitempty"`
	// What team does this monitor belong to?
	// (Needed when publishing metrics or auditlogs)
	TeamId  string           `protobuf:"bytes,7,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	Actions []*MonitorAction `protobuf:"bytes,8,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *MonitorStatus) Reset() {
	*x = MonitorStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorStatus) ProtoMessage() {}

func (x *MonitorStatus) ProtoReflect() protoreflect.Message {
	mi := &file_monitor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorStatus.ProtoReflect.Descriptor instead.
func (*MonitorStatus) Descriptor() ([]byte, []int) {
	return file_monitor_proto_rawDescGZIP(), []int{8}
}

func (x *MonitorStatus) GetMonitorId() string {
	if x != nil {
		return x.MonitorId
	}
	return ""
}

func (x *MonitorStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MonitorStatus) GetLevel() MonitorStatusLevel {
	if x != nil {
		return x.Level
	}
	return MonitorStatusLevel_MONITOR_STATUS_UNSET
}

func (x *MonitorStatus) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *MonitorStatus) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *MonitorStatus) GetAlertConfigIds() []string {
	if x != nil {
		return x.AlertConfigIds
	}
	return nil
}

func (x *MonitorStatus) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *MonitorStatus) GetActions() []*MonitorAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

type MonitorAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type MonitorActionType `protobuf:"varint,200,opt,name=type,proto3,enum=events.MonitorActionType" json:"type,omitempty"`
	// Types that are assignable to Action:
	//
	//	*MonitorAction_Alert
	//	*MonitorAction_DeadLetter
	Action isMonitorAction_Action `protobuf_oneof:"action"`
}

func (x *MonitorAction) Reset() {
	*x = MonitorAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitor_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorAction) ProtoMessage() {}

func (x *MonitorAction) ProtoReflect() protoreflect.Message {
	mi := &file_monitor_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorAction.ProtoReflect.Descriptor instead.
func (*MonitorAction) Descriptor() ([]byte, []int) {
	return file_monitor_proto_rawDescGZIP(), []int{9}
}

func (x *MonitorAction) GetType() MonitorActionType {
	if x != nil {
		return x.Type
	}
	return MonitorActionType_MONITOR_ACTION_UNSET
}

func (m *MonitorAction) GetAction() isMonitorAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *MonitorAction) GetAlert() *ActionAlert {
	if x, ok := x.GetAction().(*MonitorAction_Alert); ok {
		return x.Alert
	}
	return nil
}

func (x *MonitorAction) GetDeadLetter() *ActionDeadLetter {
	if x, ok := x.GetAction().(*MonitorAction_DeadLetter); ok {
		return x.DeadLetter
	}
	return nil
}

type isMonitorAction_Action interface {
	isMonitorAction_Action()
}

type MonitorAction_Alert struct {
	Alert *ActionAlert `protobuf:"bytes,201,opt,name=alert,proto3,oneof"`
}

type MonitorAction_DeadLetter struct {
	DeadLetter *ActionDeadLetter `protobuf:"bytes,202,opt,name=dead_letter,json=deadLetter,proto3,oneof"`
}

func (*MonitorAction_Alert) isMonitorAction_Action() {}

func (*MonitorAction_DeadLetter) isMonitorAction_Action() {}

type ActionDeadLetter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionDeadLetter) Reset() {
	*x = ActionDeadLetter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitor_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionDeadLetter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionDeadLetter) ProtoMessage() {}

func (x *ActionDeadLetter) ProtoReflect() protoreflect.Message {
	mi := &file_monitor_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionDeadLetter.ProtoReflect.Descriptor instead.
func (*ActionDeadLetter) Descriptor() ([]byte, []int) {
	return file_monitor_proto_rawDescGZIP(), []int{10}
}

type ActionAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlertConfigIds []string `protobuf:"bytes,1,rep,name=alert_config_ids,json=alertConfigIds,proto3" json:"alert_config_ids,omitempty"`
}

func (x *ActionAlert) Reset() {
	*x = ActionAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitor_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionAlert) ProtoMessage() {}

func (x *ActionAlert) ProtoReflect() protoreflect.Message {
	mi := &file_monitor_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionAlert.ProtoReflect.Descriptor instead.
func (*ActionAlert) Descriptor() ([]byte, []int) {
	return file_monitor_proto_rawDescGZIP(), []int{11}
}

func (x *ActionAlert) GetAlertConfigIds() []string {
	if x != nil {
		return x.AlertConfigIds
	}
	return nil
}

// MonitorAssoc is a convenience struct used to encapsulate the collection -> monitor association for metrics
// So that we know how much data/events is used for a specific monitor on a specific collection
type MonitorAssoc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the collection
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// ID from ui-bff monitor_assoc table, for recording metrics
	AssociationId string `protobuf:"bytes,2,opt,name=association_id,json=associationId,proto3" json:"association_id,omitempty"`
}

func (x *MonitorAssoc) Reset() {
	*x = MonitorAssoc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitor_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorAssoc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorAssoc) ProtoMessage() {}

func (x *MonitorAssoc) ProtoReflect() protoreflect.Message {
	mi := &file_monitor_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorAssoc.ProtoReflect.Descriptor instead.
func (*MonitorAssoc) Descriptor() ([]byte, []int) {
	return file_monitor_proto_rawDescGZIP(), []int{12}
}

func (x *MonitorAssoc) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *MonitorAssoc) GetAssociationId() string {
	if x != nil {
		return x.AssociationId
	}
	return ""
}

var File_monitor_proto protoreflect.FileDescriptor

var file_monitor_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x72, 0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x55, 0x0a, 0x0c, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x41, 0x72,
	0x67, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x44, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x22, 0xbc, 0x02, 0x0a, 0x0b, 0x52, 0x61, 0x74, 0x65,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a,
	0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x22, 0x44, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x53, 0x10, 0x03, 0x22, 0x2e, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x54, 0x10, 0x01, 0x12, 0x06,
	0x0a, 0x02, 0x4c, 0x54, 0x10, 0x02, 0x22, 0x44, 0x0a, 0x0f, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x08, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73,
	0x6f, 0x63, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x83, 0x01, 0x0a,
	0x0d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x3d,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x33, 0x0a,
	0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x56, 0x4f, 0x4c, 0x55, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54,
	0x10, 0x02, 0x22, 0x49, 0x0a, 0x09, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x6f,
	0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xf9, 0x07,
	0x0a, 0x07, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x05, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x29, 0x0a,
	0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a,
	0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x31, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x2c, 0x0a, 0x10, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x0e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x73, 0x12,
	0x4c, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2f, 0x0a,
	0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2f,
	0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x04,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x48,
	0x00, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x3c, 0x0a, 0x0b, 0x64, 0x65, 0x61, 0x64,
	0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x61, 0x64,
	0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x1a, 0x54, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x73, 0x73, 0x6f,
	0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8b, 0x03, 0x0a, 0x0d, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb5, 0x01, 0x0a, 0x0d, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x64, 0x65, 0x61, 0x64, 0x5f,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x61,
	0x64, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x61, 0x64, 0x4c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x12, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x22, 0x37, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x73, 0x22, 0x5a, 0x0a, 0x0c,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2a, 0xa6, 0x01, 0x0a, 0x0b, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4f, 0x4e, 0x49,
	0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4f, 0x4e, 0x49,
	0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4f,
	0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d,
	0x41, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x5f, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x10,
	0x05, 0x2a, 0x5d, 0x0a, 0x0c, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4f,
	0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02,
	0x2a, 0x84, 0x01, 0x0a, 0x12, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4f, 0x4e, 0x49, 0x54,
	0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1b, 0x0a,
	0x17, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x4f,
	0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x67, 0x0a, 0x11, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14,
	0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f,
	0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x01,
	0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x5f, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x10, 0x02,
	0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x63, 0x6f, 0x72, 0x70, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73,
	0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_monitor_proto_rawDescOnce sync.Once
	file_monitor_proto_rawDescData = file_monitor_proto_rawDesc
)

func file_monitor_proto_rawDescGZIP() []byte {
	file_monitor_proto_rawDescOnce.Do(func() {
		file_monitor_proto_rawDescData = protoimpl.X.CompressGZIP(file_monitor_proto_rawDescData)
	})
	return file_monitor_proto_rawDescData
}

var file_monitor_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_monitor_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_monitor_proto_goTypes = []interface{}{
	(MonitorType)(0),             // 0: events.MonitorType
	(MonitorState)(0),            // 1: events.MonitorState
	(MonitorStatusLevel)(0),      // 2: events.MonitorStatusLevel
	(MonitorActionType)(0),       // 3: events.MonitorActionType
	(RateMonitor_ValueType)(0),   // 4: events.RateMonitor.ValueType
	(RateMonitor_Operator)(0),    // 5: events.RateMonitor.Operator
	(SchemaMonitor_Condition)(0), // 6: events.SchemaMonitor.Condition
	(*Note)(nil),                 // 7: events.Note
	(*FieldMonitor)(nil),         // 8: events.FieldMonitor
	(*DeadLetterMonitor)(nil),    // 9: events.DeadLetterMonitor
	(*RateMonitor)(nil),          // 10: events.RateMonitor
	(*FunctionMonitor)(nil),      // 11: events.FunctionMonitor
	(*SchemaMonitor)(nil),        // 12: events.SchemaMonitor
	(*Threshold)(nil),            // 13: events.Threshold
	(*Monitor)(nil),              // 14: events.Monitor
	(*MonitorStatus)(nil),        // 15: events.MonitorStatus
	(*MonitorAction)(nil),        // 16: events.MonitorAction
	(*ActionDeadLetter)(nil),     // 17: events.ActionDeadLetter
	(*ActionAlert)(nil),          // 18: events.ActionAlert
	(*MonitorAssoc)(nil),         // 19: events.MonitorAssoc
	nil,                          // 20: events.Monitor.CollectionsEntry
	nil,                          // 21: events.MonitorStatus.MetadataEntry
	(*FunctionAssoc)(nil),        // 22: events.FunctionAssoc
}
var file_monitor_proto_depIdxs = []int32{
	4,  // 0: events.RateMonitor.value_type:type_name -> events.RateMonitor.ValueType
	5,  // 1: events.RateMonitor.operator:type_name -> events.RateMonitor.Operator
	22, // 2: events.FunctionMonitor.function:type_name -> events.FunctionAssoc
	6,  // 3: events.SchemaMonitor.condition:type_name -> events.SchemaMonitor.Condition
	7,  // 4: events.Monitor.notes:type_name -> events.Note
	0,  // 5: events.Monitor.type:type_name -> events.MonitorType
	1,  // 6: events.Monitor.state:type_name -> events.MonitorState
	2,  // 7: events.Monitor.default_status_level:type_name -> events.MonitorStatusLevel
	13, // 8: events.Monitor.threshold:type_name -> events.Threshold
	16, // 9: events.Monitor.actions:type_name -> events.MonitorAction
	20, // 10: events.Monitor.collections:type_name -> events.Monitor.CollectionsEntry
	8,  // 11: events.Monitor.field:type_name -> events.FieldMonitor
	11, // 12: events.Monitor.function:type_name -> events.FunctionMonitor
	10, // 13: events.Monitor.rate:type_name -> events.RateMonitor
	12, // 14: events.Monitor.schema:type_name -> events.SchemaMonitor
	9,  // 15: events.Monitor.dead_letter:type_name -> events.DeadLetterMonitor
	2,  // 16: events.MonitorStatus.level:type_name -> events.MonitorStatusLevel
	21, // 17: events.MonitorStatus.metadata:type_name -> events.MonitorStatus.MetadataEntry
	16, // 18: events.MonitorStatus.actions:type_name -> events.MonitorAction
	3,  // 19: events.MonitorAction.type:type_name -> events.MonitorActionType
	18, // 20: events.MonitorAction.alert:type_name -> events.ActionAlert
	17, // 21: events.MonitorAction.dead_letter:type_name -> events.ActionDeadLetter
	19, // 22: events.Monitor.CollectionsEntry.value:type_name -> events.MonitorAssoc
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_monitor_proto_init() }
func file_monitor_proto_init() {
	if File_monitor_proto != nil {
		return
	}
	file_function_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_monitor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Note); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldMonitor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeadLetterMonitor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateMonitor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionMonitor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaMonitor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitor_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Threshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitor_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Monitor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitor_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitor_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitor_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionDeadLetter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitor_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitor_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorAssoc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_monitor_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*Monitor_Field)(nil),
		(*Monitor_Function)(nil),
		(*Monitor_Rate)(nil),
		(*Monitor_Schema)(nil),
		(*Monitor_DeadLetter)(nil),
	}
	file_monitor_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*MonitorAction_Alert)(nil),
		(*MonitorAction_DeadLetter)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_monitor_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_monitor_proto_goTypes,
		DependencyIndexes: file_monitor_proto_depIdxs,
		EnumInfos:         file_monitor_proto_enumTypes,
		MessageInfos:      file_monitor_proto_msgTypes,
	}.Build()
	File_monitor_proto = out.File
	file_monitor_proto_rawDesc = nil
	file_monitor_proto_goTypes = nil
	file_monitor_proto_depIdxs = nil
}
