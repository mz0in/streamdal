syntax = "proto3";

package protos;

import "common.proto";
import "info.proto";
import "notify.proto";
import "pipeline.proto";

option go_package = "github.com/streamdal/snitch-protos/build/go/protos";

service External {
  // Build a service map
  rpc GetServiceMap(GetServiceMapRequest) returns (GetServiceMapResponse);

  rpc GetPipelines(GetPipelinesRequest) returns (GetPipelinesResponse);
  rpc GetPipeline(GetPipelineRequest) returns (GetPipelineResponse);
  rpc CreatePipeline(CreatePipelineRequest) returns (protos.StandardResponse);
  rpc UpdatePipeline(UpdatePipelineRequest) returns (protos.StandardResponse);
  rpc DeletePipeline(DeletePipelineRequest) returns (protos.StandardResponse);

  rpc AttachPipeline(AttachPipelineRequest) returns (protos.StandardResponse);
  rpc DetachPipeline(DetachPipelineRequest) returns (protos.StandardResponse);
  rpc PausePipeline(PausePipelineRequest) returns (protos.StandardResponse);
  rpc ResumePipeline(ResumePipelineRequest) returns (protos.StandardResponse);

  rpc CreateNotification(CreateNotificationRequest) returns (protos.StandardResponse);
  rpc UpdateNotification(UpdateNotificationRequest) returns (protos.StandardResponse);
  rpc DeleteNotification(DeleteNotificationRequest) returns (protos.StandardResponse);
  rpc GetNotifications(GetNotificationsRequest) returns (GetNotificationsResponse);
  rpc GetNotification(GetNotificationRequest) returns (GetNotificationResponse);
  rpc AttachNotification(AttachNotificationRequest) returns (protos.StandardResponse);

  // Test method
  rpc Test(TestRequest) returns (TestResponse);
}



// Notifications
message CreateNotificationRequest {
  protos.NotificationConfig notification = 1;
}

message UpdateNotificationRequest {
  protos.NotificationConfig notification = 1;
}

message DeleteNotificationRequest {
  string notification_id = 1;
}

message GetNotificationsRequest {
  // Don't think we need anything here
}

message GetNotificationsResponse {
  map<string,protos.NotificationConfig> notifications = 1;
}

message GetNotificationRequest {
  string notification_id = 1;
}

message GetNotificationResponse {
  protos.NotificationConfig notification = 1;
}

message AttachNotificationRequest {
  string notification_id = 1;
  string pipeline_id = 2;
}

message GetServiceMapRequest {
  // Don't think there is anything to pass in (yet)?
}

message GetServiceMapResponse {
  // Key == service name
  map<string, protos.ServiceInfo> service_map = 1;
}

message GetPipelinesRequest {
  // Don't think we need anything here
}

message GetPipelinesResponse {
  repeated protos.Pipeline pipelines = 1;
}

message GetPipelineRequest {
  string pipeline_id = 1;
}

message GetPipelineResponse {
  protos.Pipeline pipeline = 1;
}

message CreatePipelineRequest {
  protos.Pipeline pipeline = 1;
}

message UpdatePipelineRequest {
  protos.Pipeline pipeline = 1;
}

message DeletePipelineRequest {
  string pipeline_id = 1;
}

message AttachPipelineRequest {
  string pipeline_id = 1;
  protos.Audience audience = 2;
}

message DetachPipelineRequest {
  string pipeline_id = 1;
  protos.Audience audience = 2;
}

message PausePipelineRequest {
  string pipeline_id = 1;
  protos.Audience audience = 2;
}

message ResumePipelineRequest {
  string pipeline_id = 1;
  protos.Audience audience = 2;
}

message TestRequest {
  string input = 1;
}

message TestResponse {
  string output = 2;
}
