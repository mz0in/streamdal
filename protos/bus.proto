syntax = "proto3";

package protos;

import "command.proto";
import "internal.proto";
import "external.proto";

option go_package = "github.com/streamdal/snitch-protos/build/go/protos";

// Type used by `snitch-server` for broadcasting events to other snitch nodes
message BusEvent {
  string source = 1;

  // This _should_ contain request messages - each node can determine how to
  // interpret and handle the message.
  oneof event {
    protos.RegisterRequest register_request = 100;
    protos.DeregisterRequest deregister_request = 101;
    protos.HeartbeatRequest heartbeat_request = 102;
    protos.CreatePipelineRequest create_pipeline_request = 103;
    protos.DeletePipelineRequest delete_pipeline_request = 104;
    protos.UpdatePipelineRequest update_pipeline_request = 105;
    protos.AttachPipelineRequest attach_pipeline_request = 106;
    protos.DetachPipelineRequest detach_pipeline_request = 107;
    protos.PausePipelineRequest pause_pipeline_request = 108;
    protos.ResumePipelineRequest resume_pipeline_request = 109;
  }

  // All gRPC metadata is stored in ctx; when request goes outside of gRPC
  // bounds, we will translate ctx metadata into this field.
  //
  // Example:
  // 1. Request comes into snitch-server via external gRPC to set new pipeline
  // 2. snitch-server has to send SetPipeline cmd to SDK via gRPC - it passes
  //    on original metadata in request.
  // 3. snitch-server has to broadcast SetPipeline cmd to other services via bus
  // 4. Since this is not a gRPC call, snitch-server translates ctx metadata to
  //    this field and includes it in the bus event.
  map <string, string> _metadata = 1000; // protolint:disable:this FIELD_NAMES_LOWER_SNAKE_CASE
}
