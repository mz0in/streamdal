// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `client.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.ClientRequestMetadata)
pub struct ClientRequestMetadata {
    // message fields
    // @@protoc_insertion_point(field:protos.ClientRequestMetadata.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:protos.ClientRequestMetadata.source)
    pub source: ::std::string::String,
    // @@protoc_insertion_point(field:protos.ClientRequestMetadata.timestamp_nano_utc)
    pub timestamp_nano_utc: i64,
    // special fields
    // @@protoc_insertion_point(special_field:protos.ClientRequestMetadata.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ClientRequestMetadata {
    fn default() -> &'a ClientRequestMetadata {
        <ClientRequestMetadata as ::protobuf::Message>::default_instance()
    }
}

impl ClientRequestMetadata {
    pub fn new() -> ClientRequestMetadata {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &ClientRequestMetadata| { &m.id },
            |m: &mut ClientRequestMetadata| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "source",
            |m: &ClientRequestMetadata| { &m.source },
            |m: &mut ClientRequestMetadata| { &mut m.source },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timestamp_nano_utc",
            |m: &ClientRequestMetadata| { &m.timestamp_nano_utc },
            |m: &mut ClientRequestMetadata| { &mut m.timestamp_nano_utc },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ClientRequestMetadata>(
            "ClientRequestMetadata",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ClientRequestMetadata {
    const NAME: &'static str = "ClientRequestMetadata";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.source = is.read_string()?;
                },
                24 => {
                    self.timestamp_nano_utc = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.source.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.source);
        }
        if self.timestamp_nano_utc != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.timestamp_nano_utc);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.source.is_empty() {
            os.write_string(2, &self.source)?;
        }
        if self.timestamp_nano_utc != 0 {
            os.write_int64(3, self.timestamp_nano_utc)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ClientRequestMetadata {
        ClientRequestMetadata::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.source.clear();
        self.timestamp_nano_utc = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ClientRequestMetadata {
        static instance: ClientRequestMetadata = ClientRequestMetadata {
            id: ::std::string::String::new(),
            source: ::std::string::String::new(),
            timestamp_nano_utc: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ClientRequestMetadata {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ClientRequestMetadata").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ClientRequestMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientRequestMetadata {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.ClientResponseMetadata)
pub struct ClientResponseMetadata {
    // message fields
    // @@protoc_insertion_point(field:protos.ClientResponseMetadata.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:protos.ClientResponseMetadata.timestamp_nano_utc)
    pub timestamp_nano_utc: i64,
    // special fields
    // @@protoc_insertion_point(special_field:protos.ClientResponseMetadata.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ClientResponseMetadata {
    fn default() -> &'a ClientResponseMetadata {
        <ClientResponseMetadata as ::protobuf::Message>::default_instance()
    }
}

impl ClientResponseMetadata {
    pub fn new() -> ClientResponseMetadata {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &ClientResponseMetadata| { &m.id },
            |m: &mut ClientResponseMetadata| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timestamp_nano_utc",
            |m: &ClientResponseMetadata| { &m.timestamp_nano_utc },
            |m: &mut ClientResponseMetadata| { &mut m.timestamp_nano_utc },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ClientResponseMetadata>(
            "ClientResponseMetadata",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ClientResponseMetadata {
    const NAME: &'static str = "ClientResponseMetadata";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                16 => {
                    self.timestamp_nano_utc = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if self.timestamp_nano_utc != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.timestamp_nano_utc);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if self.timestamp_nano_utc != 0 {
            os.write_int64(2, self.timestamp_nano_utc)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ClientResponseMetadata {
        ClientResponseMetadata::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.timestamp_nano_utc = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ClientResponseMetadata {
        static instance: ClientResponseMetadata = ClientResponseMetadata {
            id: ::std::string::String::new(),
            timestamp_nano_utc: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ClientResponseMetadata {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ClientResponseMetadata").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ClientResponseMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientResponseMetadata {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.ClientRequest)
pub struct ClientRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.ClientRequest.metadata)
    pub metadata: ::protobuf::MessageField<ClientRequestMetadata>,
    // message oneof groups
    pub request_type: ::std::option::Option<client_request::Request_type>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.ClientRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ClientRequest {
    fn default() -> &'a ClientRequest {
        <ClientRequest as ::protobuf::Message>::default_instance()
    }
}

impl ClientRequest {
    pub fn new() -> ClientRequest {
        ::std::default::Default::default()
    }

    // .rules.MatchRequest match = 100;

    pub fn match_(&self) -> &super::match_::MatchRequest {
        match self.request_type {
            ::std::option::Option::Some(client_request::Request_type::Match(ref v)) => v,
            _ => <super::match_::MatchRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_match_(&mut self) {
        self.request_type = ::std::option::Option::None;
    }

    pub fn has_match(&self) -> bool {
        match self.request_type {
            ::std::option::Option::Some(client_request::Request_type::Match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_match(&mut self, v: super::match_::MatchRequest) {
        self.request_type = ::std::option::Option::Some(client_request::Request_type::Match(v))
    }

    // Mutable pointer to the field.
    pub fn mut_match(&mut self) -> &mut super::match_::MatchRequest {
        if let ::std::option::Option::Some(client_request::Request_type::Match(_)) = self.request_type {
        } else {
            self.request_type = ::std::option::Option::Some(client_request::Request_type::Match(super::match_::MatchRequest::new()));
        }
        match self.request_type {
            ::std::option::Option::Some(client_request::Request_type::Match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_match_(&mut self) -> super::match_::MatchRequest {
        if self.has_match() {
            match self.request_type.take() {
                ::std::option::Option::Some(client_request::Request_type::Match(v)) => v,
                _ => panic!(),
            }
        } else {
            super::match_::MatchRequest::new()
        }
    }

    // .rules.TransformRequest transform = 101;

    pub fn transform(&self) -> &super::transform::TransformRequest {
        match self.request_type {
            ::std::option::Option::Some(client_request::Request_type::Transform(ref v)) => v,
            _ => <super::transform::TransformRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_transform(&mut self) {
        self.request_type = ::std::option::Option::None;
    }

    pub fn has_transform(&self) -> bool {
        match self.request_type {
            ::std::option::Option::Some(client_request::Request_type::Transform(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_transform(&mut self, v: super::transform::TransformRequest) {
        self.request_type = ::std::option::Option::Some(client_request::Request_type::Transform(v))
    }

    // Mutable pointer to the field.
    pub fn mut_transform(&mut self) -> &mut super::transform::TransformRequest {
        if let ::std::option::Option::Some(client_request::Request_type::Transform(_)) = self.request_type {
        } else {
            self.request_type = ::std::option::Option::Some(client_request::Request_type::Transform(super::transform::TransformRequest::new()));
        }
        match self.request_type {
            ::std::option::Option::Some(client_request::Request_type::Transform(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_transform(&mut self) -> super::transform::TransformRequest {
        if self.has_transform() {
            match self.request_type.take() {
                ::std::option::Option::Some(client_request::Request_type::Transform(v)) => v,
                _ => panic!(),
            }
        } else {
            super::transform::TransformRequest::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ClientRequestMetadata>(
            "metadata",
            |m: &ClientRequest| { &m.metadata },
            |m: &mut ClientRequest| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::match_::MatchRequest>(
            "match",
            ClientRequest::has_match,
            ClientRequest::match_,
            ClientRequest::mut_match,
            ClientRequest::set_match,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::transform::TransformRequest>(
            "transform",
            ClientRequest::has_transform,
            ClientRequest::transform,
            ClientRequest::mut_transform,
            ClientRequest::set_transform,
        ));
        oneofs.push(client_request::Request_type::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ClientRequest>(
            "ClientRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ClientRequest {
    const NAME: &'static str = "ClientRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                802 => {
                    self.request_type = ::std::option::Option::Some(client_request::Request_type::Match(is.read_message()?));
                },
                810 => {
                    self.request_type = ::std::option::Option::Some(client_request::Request_type::Transform(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.request_type {
            match v {
                &client_request::Request_type::Match(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &client_request::Request_type::Transform(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.request_type {
            match v {
                &client_request::Request_type::Match(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(100, v, os)?;
                },
                &client_request::Request_type::Transform(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(101, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ClientRequest {
        ClientRequest::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.request_type = ::std::option::Option::None;
        self.request_type = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ClientRequest {
        static instance: ClientRequest = ClientRequest {
            metadata: ::protobuf::MessageField::none(),
            request_type: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ClientRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ClientRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ClientRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ClientRequest`
pub mod client_request {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:protos.ClientRequest.request_type)
    pub enum Request_type {
        // @@protoc_insertion_point(oneof_field:protos.ClientRequest.match)
        Match(super::super::match_::MatchRequest),
        // @@protoc_insertion_point(oneof_field:protos.ClientRequest.transform)
        Transform(super::super::transform::TransformRequest),
    }

    impl ::protobuf::Oneof for Request_type {
    }

    impl ::protobuf::OneofFull for Request_type {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::ClientRequest as ::protobuf::MessageFull>::descriptor().oneof_by_name("request_type").unwrap()).clone()
        }
    }

    impl Request_type {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Request_type>("request_type")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.ClientResponse)
pub struct ClientResponse {
    // message fields
    // @@protoc_insertion_point(field:protos.ClientResponse.metadata)
    pub metadata: ::protobuf::MessageField<ClientResponseMetadata>,
    // message oneof groups
    pub response_type: ::std::option::Option<client_response::Response_type>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.ClientResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ClientResponse {
    fn default() -> &'a ClientResponse {
        <ClientResponse as ::protobuf::Message>::default_instance()
    }
}

impl ClientResponse {
    pub fn new() -> ClientResponse {
        ::std::default::Default::default()
    }

    // .rules.MatchResponse match = 100;

    pub fn match_(&self) -> &super::match_::MatchResponse {
        match self.response_type {
            ::std::option::Option::Some(client_response::Response_type::Match(ref v)) => v,
            _ => <super::match_::MatchResponse as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_match_(&mut self) {
        self.response_type = ::std::option::Option::None;
    }

    pub fn has_match(&self) -> bool {
        match self.response_type {
            ::std::option::Option::Some(client_response::Response_type::Match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_match(&mut self, v: super::match_::MatchResponse) {
        self.response_type = ::std::option::Option::Some(client_response::Response_type::Match(v))
    }

    // Mutable pointer to the field.
    pub fn mut_match(&mut self) -> &mut super::match_::MatchResponse {
        if let ::std::option::Option::Some(client_response::Response_type::Match(_)) = self.response_type {
        } else {
            self.response_type = ::std::option::Option::Some(client_response::Response_type::Match(super::match_::MatchResponse::new()));
        }
        match self.response_type {
            ::std::option::Option::Some(client_response::Response_type::Match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_match_(&mut self) -> super::match_::MatchResponse {
        if self.has_match() {
            match self.response_type.take() {
                ::std::option::Option::Some(client_response::Response_type::Match(v)) => v,
                _ => panic!(),
            }
        } else {
            super::match_::MatchResponse::new()
        }
    }

    // .rules.TransformResponse transform = 101;

    pub fn transform(&self) -> &super::transform::TransformResponse {
        match self.response_type {
            ::std::option::Option::Some(client_response::Response_type::Transform(ref v)) => v,
            _ => <super::transform::TransformResponse as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_transform(&mut self) {
        self.response_type = ::std::option::Option::None;
    }

    pub fn has_transform(&self) -> bool {
        match self.response_type {
            ::std::option::Option::Some(client_response::Response_type::Transform(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_transform(&mut self, v: super::transform::TransformResponse) {
        self.response_type = ::std::option::Option::Some(client_response::Response_type::Transform(v))
    }

    // Mutable pointer to the field.
    pub fn mut_transform(&mut self) -> &mut super::transform::TransformResponse {
        if let ::std::option::Option::Some(client_response::Response_type::Transform(_)) = self.response_type {
        } else {
            self.response_type = ::std::option::Option::Some(client_response::Response_type::Transform(super::transform::TransformResponse::new()));
        }
        match self.response_type {
            ::std::option::Option::Some(client_response::Response_type::Transform(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_transform(&mut self) -> super::transform::TransformResponse {
        if self.has_transform() {
            match self.response_type.take() {
                ::std::option::Option::Some(client_response::Response_type::Transform(v)) => v,
                _ => panic!(),
            }
        } else {
            super::transform::TransformResponse::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ClientResponseMetadata>(
            "metadata",
            |m: &ClientResponse| { &m.metadata },
            |m: &mut ClientResponse| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::match_::MatchResponse>(
            "match",
            ClientResponse::has_match,
            ClientResponse::match_,
            ClientResponse::mut_match,
            ClientResponse::set_match,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::transform::TransformResponse>(
            "transform",
            ClientResponse::has_transform,
            ClientResponse::transform,
            ClientResponse::mut_transform,
            ClientResponse::set_transform,
        ));
        oneofs.push(client_response::Response_type::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ClientResponse>(
            "ClientResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ClientResponse {
    const NAME: &'static str = "ClientResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                802 => {
                    self.response_type = ::std::option::Option::Some(client_response::Response_type::Match(is.read_message()?));
                },
                810 => {
                    self.response_type = ::std::option::Option::Some(client_response::Response_type::Transform(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.response_type {
            match v {
                &client_response::Response_type::Match(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &client_response::Response_type::Transform(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.response_type {
            match v {
                &client_response::Response_type::Match(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(100, v, os)?;
                },
                &client_response::Response_type::Transform(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(101, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ClientResponse {
        ClientResponse::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.response_type = ::std::option::Option::None;
        self.response_type = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ClientResponse {
        static instance: ClientResponse = ClientResponse {
            metadata: ::protobuf::MessageField::none(),
            response_type: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ClientResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ClientResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ClientResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ClientResponse`
pub mod client_response {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:protos.ClientResponse.response_type)
    pub enum Response_type {
        // @@protoc_insertion_point(oneof_field:protos.ClientResponse.match)
        Match(super::super::match_::MatchResponse),
        // @@protoc_insertion_point(oneof_field:protos.ClientResponse.transform)
        Transform(super::super::transform::TransformResponse),
    }

    impl ::protobuf::Oneof for Response_type {
    }

    impl ::protobuf::OneofFull for Response_type {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::ClientResponse as ::protobuf::MessageFull>::descriptor().oneof_by_name("response_type").unwrap()).clone()
        }
    }

    impl Response_type {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Response_type>("response_type")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cclient.proto\x12\x06protos\x1a\x11rules/match.proto\x1a\x15rules/t\
    ransform.proto\"m\n\x15ClientRequestMetadata\x12\x0e\n\x02id\x18\x01\x20\
    \x01(\tR\x02id\x12\x16\n\x06source\x18\x02\x20\x01(\tR\x06source\x12,\n\
    \x12timestamp_nano_utc\x18\x03\x20\x01(\x03R\x10timestampNanoUtc\"V\n\
    \x16ClientResponseMetadata\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\
    ,\n\x12timestamp_nano_utc\x18\x02\x20\x01(\x03R\x10timestampNanoUtc\"\
    \xc0\x01\n\rClientRequest\x129\n\x08metadata\x18\x01\x20\x01(\x0b2\x1d.p\
    rotos.ClientRequestMetadataR\x08metadata\x12+\n\x05match\x18d\x20\x01(\
    \x0b2\x13.rules.MatchRequestH\0R\x05match\x127\n\ttransform\x18e\x20\x01\
    (\x0b2\x17.rules.TransformRequestH\0R\ttransformB\x0e\n\x0crequest_type\
    \"\xc5\x01\n\x0eClientResponse\x12:\n\x08metadata\x18\x01\x20\x01(\x0b2\
    \x1e.protos.ClientResponseMetadataR\x08metadata\x12,\n\x05match\x18d\x20\
    \x01(\x0b2\x14.rules.MatchResponseH\0R\x05match\x128\n\ttransform\x18e\
    \x20\x01(\x0b2\x18.rules.TransformResponseH\0R\ttransformB\x0f\n\rrespon\
    se_typeB6Z4github.com/streamdal/snitch-protobuf/build/go/protosJ\xbc\x06\
    \n\x06\x12\x04\0\0$\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\
    \x12\x03\x02\0\x0f\n\t\n\x02\x03\0\x12\x03\x04\0\x1b\n\t\n\x02\x03\x01\
    \x12\x03\x05\0\x1f\n\x08\n\x01\x08\x12\x03\x07\0K\n\t\n\x02\x08\x0b\x12\
    \x03\x07\0K\n\n\n\x02\x04\0\x12\x04\t\0\r\x01\n\n\n\x03\x04\0\x01\x12\
    \x03\t\x08\x1d\n\x0b\n\x04\x04\0\x02\0\x12\x03\n\x02\x10\n\x0c\n\x05\x04\
    \0\x02\0\x05\x12\x03\n\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\n\t\
    \x0b\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\n\x0e\x0f\n\x0b\n\x04\x04\0\x02\
    \x01\x12\x03\x0b\x02\x14\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x0b\x02\
    \x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0b\t\x0f\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03\x0b\x12\x13\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x0c\
    \x02\x1f\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x0c\x02\x07\n\x0c\n\x05\
    \x04\0\x02\x02\x01\x12\x03\x0c\x08\x1a\n\x0c\n\x05\x04\0\x02\x02\x03\x12\
    \x03\x0c\x1d\x1e\n\n\n\x02\x04\x01\x12\x04\x0f\0\x12\x01\n\n\n\x03\x04\
    \x01\x01\x12\x03\x0f\x08\x1e\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x10\x02\
    \x10\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x10\x02\x08\n\x0c\n\x05\x04\
    \x01\x02\0\x01\x12\x03\x10\t\x0b\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\
    \x10\x0e\x0f\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x11\x02\x1f\n\x0c\n\x05\
    \x04\x01\x02\x01\x05\x12\x03\x11\x02\x07\n\x0c\n\x05\x04\x01\x02\x01\x01\
    \x12\x03\x11\x08\x1a\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x11\x1d\x1e\
    \n\n\n\x02\x04\x02\x12\x04\x14\0\x1b\x01\n\n\n\x03\x04\x02\x01\x12\x03\
    \x14\x08\x15\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x15\x02%\n\x0c\n\x05\x04\
    \x02\x02\0\x06\x12\x03\x15\x02\x17\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\
    \x15\x18\x20\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x15#$\n\x0c\n\x04\x04\
    \x02\x08\0\x12\x04\x17\x02\x1a\x03\n\x0c\n\x05\x04\x02\x08\0\x01\x12\x03\
    \x17\x08\x14\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x18\x04#\n\x0c\n\x05\
    \x04\x02\x02\x01\x06\x12\x03\x18\x04\x16\n\x0c\n\x05\x04\x02\x02\x01\x01\
    \x12\x03\x18\x17\x1c\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x18\x1f\"\n\
    \x0b\n\x04\x04\x02\x02\x02\x12\x03\x19\x04+\n\x0c\n\x05\x04\x02\x02\x02\
    \x06\x12\x03\x19\x04\x1a\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x19\x1b\
    $\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\x19'*\n\n\n\x02\x04\x03\x12\
    \x04\x1d\0$\x01\n\n\n\x03\x04\x03\x01\x12\x03\x1d\x08\x16\n\x0b\n\x04\
    \x04\x03\x02\0\x12\x03\x1e\x02&\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03\
    \x1e\x02\x18\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x1e\x19!\n\x0c\n\x05\
    \x04\x03\x02\0\x03\x12\x03\x1e$%\n\x0c\n\x04\x04\x03\x08\0\x12\x04\x20\
    \x02#\x03\n\x0c\n\x05\x04\x03\x08\0\x01\x12\x03\x20\x08\x15\n\x0b\n\x04\
    \x04\x03\x02\x01\x12\x03!\x04$\n\x0c\n\x05\x04\x03\x02\x01\x06\x12\x03!\
    \x04\x17\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03!\x18\x1d\n\x0c\n\x05\
    \x04\x03\x02\x01\x03\x12\x03!\x20#\n\x0b\n\x04\x04\x03\x02\x02\x12\x03\"\
    \x04,\n\x0c\n\x05\x04\x03\x02\x02\x06\x12\x03\"\x04\x1b\n\x0c\n\x05\x04\
    \x03\x02\x02\x01\x12\x03\"\x1c%\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03\
    \"(+b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::match_::file_descriptor().clone());
            deps.push(super::transform::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(ClientRequestMetadata::generated_message_descriptor_data());
            messages.push(ClientResponseMetadata::generated_message_descriptor_data());
            messages.push(ClientRequest::generated_message_descriptor_data());
            messages.push(ClientResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
