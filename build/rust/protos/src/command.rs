// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `command.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

///  Command is used by snitch-server for sending commands to SDKs
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.Command)
pub struct Command {
    // message fields
    ///  Who is this command intended for?
    ///  NOTE: Some commands (such as KeepAliveCommand, KVCommand) do NOT use audience and will ignore it
    // @@protoc_insertion_point(field:protos.Command.audience)
    pub audience: ::protobuf::MessageField<super::common::Audience>,
    // message oneof groups
    pub command: ::std::option::Option<command::Command>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.Command.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Command {
    fn default() -> &'a Command {
        <Command as ::protobuf::Message>::default_instance()
    }
}

impl Command {
    pub fn new() -> Command {
        ::std::default::Default::default()
    }

    // .protos.AttachPipelineCommand attach_pipeline = 100;

    pub fn attach_pipeline(&self) -> &AttachPipelineCommand {
        match self.command {
            ::std::option::Option::Some(command::Command::AttachPipeline(ref v)) => v,
            _ => <AttachPipelineCommand as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_attach_pipeline(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_attach_pipeline(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(command::Command::AttachPipeline(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_attach_pipeline(&mut self, v: AttachPipelineCommand) {
        self.command = ::std::option::Option::Some(command::Command::AttachPipeline(v))
    }

    // Mutable pointer to the field.
    pub fn mut_attach_pipeline(&mut self) -> &mut AttachPipelineCommand {
        if let ::std::option::Option::Some(command::Command::AttachPipeline(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(command::Command::AttachPipeline(AttachPipelineCommand::new()));
        }
        match self.command {
            ::std::option::Option::Some(command::Command::AttachPipeline(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_attach_pipeline(&mut self) -> AttachPipelineCommand {
        if self.has_attach_pipeline() {
            match self.command.take() {
                ::std::option::Option::Some(command::Command::AttachPipeline(v)) => v,
                _ => panic!(),
            }
        } else {
            AttachPipelineCommand::new()
        }
    }

    // .protos.DetachPipelineCommand detach_pipeline = 101;

    pub fn detach_pipeline(&self) -> &DetachPipelineCommand {
        match self.command {
            ::std::option::Option::Some(command::Command::DetachPipeline(ref v)) => v,
            _ => <DetachPipelineCommand as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_detach_pipeline(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_detach_pipeline(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(command::Command::DetachPipeline(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_detach_pipeline(&mut self, v: DetachPipelineCommand) {
        self.command = ::std::option::Option::Some(command::Command::DetachPipeline(v))
    }

    // Mutable pointer to the field.
    pub fn mut_detach_pipeline(&mut self) -> &mut DetachPipelineCommand {
        if let ::std::option::Option::Some(command::Command::DetachPipeline(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(command::Command::DetachPipeline(DetachPipelineCommand::new()));
        }
        match self.command {
            ::std::option::Option::Some(command::Command::DetachPipeline(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_detach_pipeline(&mut self) -> DetachPipelineCommand {
        if self.has_detach_pipeline() {
            match self.command.take() {
                ::std::option::Option::Some(command::Command::DetachPipeline(v)) => v,
                _ => panic!(),
            }
        } else {
            DetachPipelineCommand::new()
        }
    }

    // .protos.PausePipelineCommand pause_pipeline = 102;

    pub fn pause_pipeline(&self) -> &PausePipelineCommand {
        match self.command {
            ::std::option::Option::Some(command::Command::PausePipeline(ref v)) => v,
            _ => <PausePipelineCommand as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_pause_pipeline(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_pause_pipeline(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(command::Command::PausePipeline(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_pause_pipeline(&mut self, v: PausePipelineCommand) {
        self.command = ::std::option::Option::Some(command::Command::PausePipeline(v))
    }

    // Mutable pointer to the field.
    pub fn mut_pause_pipeline(&mut self) -> &mut PausePipelineCommand {
        if let ::std::option::Option::Some(command::Command::PausePipeline(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(command::Command::PausePipeline(PausePipelineCommand::new()));
        }
        match self.command {
            ::std::option::Option::Some(command::Command::PausePipeline(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_pause_pipeline(&mut self) -> PausePipelineCommand {
        if self.has_pause_pipeline() {
            match self.command.take() {
                ::std::option::Option::Some(command::Command::PausePipeline(v)) => v,
                _ => panic!(),
            }
        } else {
            PausePipelineCommand::new()
        }
    }

    // .protos.ResumePipelineCommand resume_pipeline = 103;

    pub fn resume_pipeline(&self) -> &ResumePipelineCommand {
        match self.command {
            ::std::option::Option::Some(command::Command::ResumePipeline(ref v)) => v,
            _ => <ResumePipelineCommand as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_resume_pipeline(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_resume_pipeline(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(command::Command::ResumePipeline(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_resume_pipeline(&mut self, v: ResumePipelineCommand) {
        self.command = ::std::option::Option::Some(command::Command::ResumePipeline(v))
    }

    // Mutable pointer to the field.
    pub fn mut_resume_pipeline(&mut self) -> &mut ResumePipelineCommand {
        if let ::std::option::Option::Some(command::Command::ResumePipeline(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(command::Command::ResumePipeline(ResumePipelineCommand::new()));
        }
        match self.command {
            ::std::option::Option::Some(command::Command::ResumePipeline(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_resume_pipeline(&mut self) -> ResumePipelineCommand {
        if self.has_resume_pipeline() {
            match self.command.take() {
                ::std::option::Option::Some(command::Command::ResumePipeline(v)) => v,
                _ => panic!(),
            }
        } else {
            ResumePipelineCommand::new()
        }
    }

    // .protos.KeepAliveCommand keep_alive = 104;

    pub fn keep_alive(&self) -> &KeepAliveCommand {
        match self.command {
            ::std::option::Option::Some(command::Command::KeepAlive(ref v)) => v,
            _ => <KeepAliveCommand as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_keep_alive(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_keep_alive(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(command::Command::KeepAlive(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_keep_alive(&mut self, v: KeepAliveCommand) {
        self.command = ::std::option::Option::Some(command::Command::KeepAlive(v))
    }

    // Mutable pointer to the field.
    pub fn mut_keep_alive(&mut self) -> &mut KeepAliveCommand {
        if let ::std::option::Option::Some(command::Command::KeepAlive(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(command::Command::KeepAlive(KeepAliveCommand::new()));
        }
        match self.command {
            ::std::option::Option::Some(command::Command::KeepAlive(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_keep_alive(&mut self) -> KeepAliveCommand {
        if self.has_keep_alive() {
            match self.command.take() {
                ::std::option::Option::Some(command::Command::KeepAlive(v)) => v,
                _ => panic!(),
            }
        } else {
            KeepAliveCommand::new()
        }
    }

    // .protos.KVCommand kv = 105;

    pub fn kv(&self) -> &KVCommand {
        match self.command {
            ::std::option::Option::Some(command::Command::Kv(ref v)) => v,
            _ => <KVCommand as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_kv(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_kv(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(command::Command::Kv(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_kv(&mut self, v: KVCommand) {
        self.command = ::std::option::Option::Some(command::Command::Kv(v))
    }

    // Mutable pointer to the field.
    pub fn mut_kv(&mut self) -> &mut KVCommand {
        if let ::std::option::Option::Some(command::Command::Kv(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(command::Command::Kv(KVCommand::new()));
        }
        match self.command {
            ::std::option::Option::Some(command::Command::Kv(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_kv(&mut self) -> KVCommand {
        if self.has_kv() {
            match self.command.take() {
                ::std::option::Option::Some(command::Command::Kv(v)) => v,
                _ => panic!(),
            }
        } else {
            KVCommand::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::Audience>(
            "audience",
            |m: &Command| { &m.audience },
            |m: &mut Command| { &mut m.audience },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, AttachPipelineCommand>(
            "attach_pipeline",
            Command::has_attach_pipeline,
            Command::attach_pipeline,
            Command::mut_attach_pipeline,
            Command::set_attach_pipeline,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, DetachPipelineCommand>(
            "detach_pipeline",
            Command::has_detach_pipeline,
            Command::detach_pipeline,
            Command::mut_detach_pipeline,
            Command::set_detach_pipeline,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, PausePipelineCommand>(
            "pause_pipeline",
            Command::has_pause_pipeline,
            Command::pause_pipeline,
            Command::mut_pause_pipeline,
            Command::set_pause_pipeline,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ResumePipelineCommand>(
            "resume_pipeline",
            Command::has_resume_pipeline,
            Command::resume_pipeline,
            Command::mut_resume_pipeline,
            Command::set_resume_pipeline,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, KeepAliveCommand>(
            "keep_alive",
            Command::has_keep_alive,
            Command::keep_alive,
            Command::mut_keep_alive,
            Command::set_keep_alive,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, KVCommand>(
            "kv",
            Command::has_kv,
            Command::kv,
            Command::mut_kv,
            Command::set_kv,
        ));
        oneofs.push(command::Command::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Command>(
            "Command",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Command {
    const NAME: &'static str = "Command";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.audience)?;
                },
                802 => {
                    self.command = ::std::option::Option::Some(command::Command::AttachPipeline(is.read_message()?));
                },
                810 => {
                    self.command = ::std::option::Option::Some(command::Command::DetachPipeline(is.read_message()?));
                },
                818 => {
                    self.command = ::std::option::Option::Some(command::Command::PausePipeline(is.read_message()?));
                },
                826 => {
                    self.command = ::std::option::Option::Some(command::Command::ResumePipeline(is.read_message()?));
                },
                834 => {
                    self.command = ::std::option::Option::Some(command::Command::KeepAlive(is.read_message()?));
                },
                842 => {
                    self.command = ::std::option::Option::Some(command::Command::Kv(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.audience.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.command {
            match v {
                &command::Command::AttachPipeline(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &command::Command::DetachPipeline(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &command::Command::PausePipeline(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &command::Command::ResumePipeline(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &command::Command::KeepAlive(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &command::Command::Kv(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.audience.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.command {
            match v {
                &command::Command::AttachPipeline(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(100, v, os)?;
                },
                &command::Command::DetachPipeline(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(101, v, os)?;
                },
                &command::Command::PausePipeline(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(102, v, os)?;
                },
                &command::Command::ResumePipeline(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(103, v, os)?;
                },
                &command::Command::KeepAlive(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(104, v, os)?;
                },
                &command::Command::Kv(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(105, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Command {
        Command::new()
    }

    fn clear(&mut self) {
        self.audience.clear();
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Command {
        static instance: Command = Command {
            audience: ::protobuf::MessageField::none(),
            command: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Command {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Command").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Command {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Command {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Command`
pub mod command {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:protos.Command.command)
    pub enum Command {
        // @@protoc_insertion_point(oneof_field:protos.Command.attach_pipeline)
        AttachPipeline(super::AttachPipelineCommand),
        // @@protoc_insertion_point(oneof_field:protos.Command.detach_pipeline)
        DetachPipeline(super::DetachPipelineCommand),
        // @@protoc_insertion_point(oneof_field:protos.Command.pause_pipeline)
        PausePipeline(super::PausePipelineCommand),
        // @@protoc_insertion_point(oneof_field:protos.Command.resume_pipeline)
        ResumePipeline(super::ResumePipelineCommand),
        // @@protoc_insertion_point(oneof_field:protos.Command.keep_alive)
        KeepAlive(super::KeepAliveCommand),
        // @@protoc_insertion_point(oneof_field:protos.Command.kv)
        Kv(super::KVCommand),
    }

    impl ::protobuf::Oneof for Command {
    }

    impl ::protobuf::OneofFull for Command {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Command as ::protobuf::MessageFull>::descriptor().oneof_by_name("command").unwrap()).clone()
        }
    }

    impl Command {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Command>("command")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.AttachPipelineCommand)
pub struct AttachPipelineCommand {
    // message fields
    // @@protoc_insertion_point(field:protos.AttachPipelineCommand.pipeline)
    pub pipeline: ::protobuf::MessageField<super::pipeline::Pipeline>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.AttachPipelineCommand.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AttachPipelineCommand {
    fn default() -> &'a AttachPipelineCommand {
        <AttachPipelineCommand as ::protobuf::Message>::default_instance()
    }
}

impl AttachPipelineCommand {
    pub fn new() -> AttachPipelineCommand {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pipeline::Pipeline>(
            "pipeline",
            |m: &AttachPipelineCommand| { &m.pipeline },
            |m: &mut AttachPipelineCommand| { &mut m.pipeline },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AttachPipelineCommand>(
            "AttachPipelineCommand",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AttachPipelineCommand {
    const NAME: &'static str = "AttachPipelineCommand";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pipeline)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.pipeline.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.pipeline.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AttachPipelineCommand {
        AttachPipelineCommand::new()
    }

    fn clear(&mut self) {
        self.pipeline.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AttachPipelineCommand {
        static instance: AttachPipelineCommand = AttachPipelineCommand {
            pipeline: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AttachPipelineCommand {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AttachPipelineCommand").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AttachPipelineCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AttachPipelineCommand {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.DetachPipelineCommand)
pub struct DetachPipelineCommand {
    // message fields
    // @@protoc_insertion_point(field:protos.DetachPipelineCommand.pipeline_id)
    pub pipeline_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.DetachPipelineCommand.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DetachPipelineCommand {
    fn default() -> &'a DetachPipelineCommand {
        <DetachPipelineCommand as ::protobuf::Message>::default_instance()
    }
}

impl DetachPipelineCommand {
    pub fn new() -> DetachPipelineCommand {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pipeline_id",
            |m: &DetachPipelineCommand| { &m.pipeline_id },
            |m: &mut DetachPipelineCommand| { &mut m.pipeline_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DetachPipelineCommand>(
            "DetachPipelineCommand",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DetachPipelineCommand {
    const NAME: &'static str = "DetachPipelineCommand";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.pipeline_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.pipeline_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pipeline_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.pipeline_id.is_empty() {
            os.write_string(1, &self.pipeline_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DetachPipelineCommand {
        DetachPipelineCommand::new()
    }

    fn clear(&mut self) {
        self.pipeline_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DetachPipelineCommand {
        static instance: DetachPipelineCommand = DetachPipelineCommand {
            pipeline_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DetachPipelineCommand {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DetachPipelineCommand").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DetachPipelineCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DetachPipelineCommand {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.PausePipelineCommand)
pub struct PausePipelineCommand {
    // message fields
    // @@protoc_insertion_point(field:protos.PausePipelineCommand.pipeline_id)
    pub pipeline_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.PausePipelineCommand.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PausePipelineCommand {
    fn default() -> &'a PausePipelineCommand {
        <PausePipelineCommand as ::protobuf::Message>::default_instance()
    }
}

impl PausePipelineCommand {
    pub fn new() -> PausePipelineCommand {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pipeline_id",
            |m: &PausePipelineCommand| { &m.pipeline_id },
            |m: &mut PausePipelineCommand| { &mut m.pipeline_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PausePipelineCommand>(
            "PausePipelineCommand",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PausePipelineCommand {
    const NAME: &'static str = "PausePipelineCommand";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.pipeline_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.pipeline_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pipeline_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.pipeline_id.is_empty() {
            os.write_string(1, &self.pipeline_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PausePipelineCommand {
        PausePipelineCommand::new()
    }

    fn clear(&mut self) {
        self.pipeline_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PausePipelineCommand {
        static instance: PausePipelineCommand = PausePipelineCommand {
            pipeline_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PausePipelineCommand {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PausePipelineCommand").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PausePipelineCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PausePipelineCommand {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.ResumePipelineCommand)
pub struct ResumePipelineCommand {
    // message fields
    // @@protoc_insertion_point(field:protos.ResumePipelineCommand.pipeline_id)
    pub pipeline_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.ResumePipelineCommand.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ResumePipelineCommand {
    fn default() -> &'a ResumePipelineCommand {
        <ResumePipelineCommand as ::protobuf::Message>::default_instance()
    }
}

impl ResumePipelineCommand {
    pub fn new() -> ResumePipelineCommand {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pipeline_id",
            |m: &ResumePipelineCommand| { &m.pipeline_id },
            |m: &mut ResumePipelineCommand| { &mut m.pipeline_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ResumePipelineCommand>(
            "ResumePipelineCommand",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ResumePipelineCommand {
    const NAME: &'static str = "ResumePipelineCommand";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.pipeline_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.pipeline_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pipeline_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.pipeline_id.is_empty() {
            os.write_string(1, &self.pipeline_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ResumePipelineCommand {
        ResumePipelineCommand::new()
    }

    fn clear(&mut self) {
        self.pipeline_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ResumePipelineCommand {
        static instance: ResumePipelineCommand = ResumePipelineCommand {
            pipeline_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ResumePipelineCommand {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ResumePipelineCommand").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ResumePipelineCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResumePipelineCommand {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.KeepAliveCommand)
pub struct KeepAliveCommand {
    // special fields
    // @@protoc_insertion_point(special_field:protos.KeepAliveCommand.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KeepAliveCommand {
    fn default() -> &'a KeepAliveCommand {
        <KeepAliveCommand as ::protobuf::Message>::default_instance()
    }
}

impl KeepAliveCommand {
    pub fn new() -> KeepAliveCommand {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KeepAliveCommand>(
            "KeepAliveCommand",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KeepAliveCommand {
    const NAME: &'static str = "KeepAliveCommand";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KeepAliveCommand {
        KeepAliveCommand::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KeepAliveCommand {
        static instance: KeepAliveCommand = KeepAliveCommand {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KeepAliveCommand {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KeepAliveCommand").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KeepAliveCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KeepAliveCommand {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.KVObject)
pub struct KVObject {
    // message fields
    ///  Key regex: /^[a-zA-Z0-9_-:]+$/)
    // @@protoc_insertion_point(field:protos.KVObject.key)
    pub key: ::std::string::String,
    ///  KV value
    // @@protoc_insertion_point(field:protos.KVObject.value)
    pub value: ::std::vec::Vec<u8>,
    ///  When was this object created
    // @@protoc_insertion_point(field:protos.KVObject.created_at_unix_ts_nano_utc)
    pub created_at_unix_ts_nano_utc: i64,
    ///  Last time the object was updated
    // @@protoc_insertion_point(field:protos.KVObject.updated_at_unix_ts_nano_utc)
    pub updated_at_unix_ts_nano_utc: i64,
    // special fields
    // @@protoc_insertion_point(special_field:protos.KVObject.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KVObject {
    fn default() -> &'a KVObject {
        <KVObject as ::protobuf::Message>::default_instance()
    }
}

impl KVObject {
    pub fn new() -> KVObject {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &KVObject| { &m.key },
            |m: &mut KVObject| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &KVObject| { &m.value },
            |m: &mut KVObject| { &mut m.value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "created_at_unix_ts_nano_utc",
            |m: &KVObject| { &m.created_at_unix_ts_nano_utc },
            |m: &mut KVObject| { &mut m.created_at_unix_ts_nano_utc },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "updated_at_unix_ts_nano_utc",
            |m: &KVObject| { &m.updated_at_unix_ts_nano_utc },
            |m: &mut KVObject| { &mut m.updated_at_unix_ts_nano_utc },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KVObject>(
            "KVObject",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KVObject {
    const NAME: &'static str = "KVObject";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = is.read_string()?;
                },
                18 => {
                    self.value = is.read_bytes()?;
                },
                24 => {
                    self.created_at_unix_ts_nano_utc = is.read_int64()?;
                },
                32 => {
                    self.updated_at_unix_ts_nano_utc = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.value);
        }
        if self.created_at_unix_ts_nano_utc != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.created_at_unix_ts_nano_utc);
        }
        if self.updated_at_unix_ts_nano_utc != 0 {
            my_size += ::protobuf::rt::int64_size(4, self.updated_at_unix_ts_nano_utc);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_bytes(2, &self.value)?;
        }
        if self.created_at_unix_ts_nano_utc != 0 {
            os.write_int64(3, self.created_at_unix_ts_nano_utc)?;
        }
        if self.updated_at_unix_ts_nano_utc != 0 {
            os.write_int64(4, self.updated_at_unix_ts_nano_utc)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KVObject {
        KVObject::new()
    }

    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.created_at_unix_ts_nano_utc = 0;
        self.updated_at_unix_ts_nano_utc = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KVObject {
        static instance: KVObject = KVObject {
            key: ::std::string::String::new(),
            value: ::std::vec::Vec::new(),
            created_at_unix_ts_nano_utc: 0,
            updated_at_unix_ts_nano_utc: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KVObject {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KVObject").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KVObject {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KVObject {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Used in KVCommand to indicate a series of KV-related actions - ie. create, update, delete
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.KVInstruction)
pub struct KVInstruction {
    // message fields
    ///  Unique ID for this instruction
    // @@protoc_insertion_point(field:protos.KVInstruction.id)
    pub id: ::std::string::String,
    ///  What kind of an action is this?
    // @@protoc_insertion_point(field:protos.KVInstruction.action)
    pub action: ::protobuf::EnumOrUnknown<KVAction>,
    ///  KV object
    // @@protoc_insertion_point(field:protos.KVInstruction.object)
    pub object: ::protobuf::MessageField<KVObject>,
    ///  When this instruction was requested (usually will be the HTTP API request time)
    // @@protoc_insertion_point(field:protos.KVInstruction.requested_at_unix_ts_nano_utc)
    pub requested_at_unix_ts_nano_utc: i64,
    // special fields
    // @@protoc_insertion_point(special_field:protos.KVInstruction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KVInstruction {
    fn default() -> &'a KVInstruction {
        <KVInstruction as ::protobuf::Message>::default_instance()
    }
}

impl KVInstruction {
    pub fn new() -> KVInstruction {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &KVInstruction| { &m.id },
            |m: &mut KVInstruction| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "action",
            |m: &KVInstruction| { &m.action },
            |m: &mut KVInstruction| { &mut m.action },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, KVObject>(
            "object",
            |m: &KVInstruction| { &m.object },
            |m: &mut KVInstruction| { &mut m.object },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "requested_at_unix_ts_nano_utc",
            |m: &KVInstruction| { &m.requested_at_unix_ts_nano_utc },
            |m: &mut KVInstruction| { &mut m.requested_at_unix_ts_nano_utc },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KVInstruction>(
            "KVInstruction",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KVInstruction {
    const NAME: &'static str = "KVInstruction";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                16 => {
                    self.action = is.read_enum_or_unknown()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.object)?;
                },
                32 => {
                    self.requested_at_unix_ts_nano_utc = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if self.action != ::protobuf::EnumOrUnknown::new(KVAction::KV_ACTION_UNSET) {
            my_size += ::protobuf::rt::int32_size(2, self.action.value());
        }
        if let Some(v) = self.object.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.requested_at_unix_ts_nano_utc != 0 {
            my_size += ::protobuf::rt::int64_size(4, self.requested_at_unix_ts_nano_utc);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if self.action != ::protobuf::EnumOrUnknown::new(KVAction::KV_ACTION_UNSET) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.action))?;
        }
        if let Some(v) = self.object.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if self.requested_at_unix_ts_nano_utc != 0 {
            os.write_int64(4, self.requested_at_unix_ts_nano_utc)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KVInstruction {
        KVInstruction::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.action = ::protobuf::EnumOrUnknown::new(KVAction::KV_ACTION_UNSET);
        self.object.clear();
        self.requested_at_unix_ts_nano_utc = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KVInstruction {
        static instance: KVInstruction = KVInstruction {
            id: ::std::string::String::new(),
            action: ::protobuf::EnumOrUnknown::from_i32(0),
            object: ::protobuf::MessageField::none(),
            requested_at_unix_ts_nano_utc: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KVInstruction {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KVInstruction").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KVInstruction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KVInstruction {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.KVCommand)
pub struct KVCommand {
    // message fields
    // @@protoc_insertion_point(field:protos.KVCommand.instructions)
    pub instructions: ::std::vec::Vec<KVInstruction>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.KVCommand.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KVCommand {
    fn default() -> &'a KVCommand {
        <KVCommand as ::protobuf::Message>::default_instance()
    }
}

impl KVCommand {
    pub fn new() -> KVCommand {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "instructions",
            |m: &KVCommand| { &m.instructions },
            |m: &mut KVCommand| { &mut m.instructions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KVCommand>(
            "KVCommand",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KVCommand {
    const NAME: &'static str = "KVCommand";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.instructions.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.instructions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.instructions {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KVCommand {
        KVCommand::new()
    }

    fn clear(&mut self) {
        self.instructions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KVCommand {
        static instance: KVCommand = KVCommand {
            instructions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KVCommand {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KVCommand").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KVCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KVCommand {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:protos.KVAction)
pub enum KVAction {
    // @@protoc_insertion_point(enum_value:protos.KVAction.KV_ACTION_UNSET)
    KV_ACTION_UNSET = 0,
    // @@protoc_insertion_point(enum_value:protos.KVAction.KV_ACTION_CREATE)
    KV_ACTION_CREATE = 1,
    // @@protoc_insertion_point(enum_value:protos.KVAction.KV_ACTION_UPDATE)
    KV_ACTION_UPDATE = 2,
    // @@protoc_insertion_point(enum_value:protos.KVAction.KV_ACTION_DELETE)
    KV_ACTION_DELETE = 3,
}

impl ::protobuf::Enum for KVAction {
    const NAME: &'static str = "KVAction";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<KVAction> {
        match value {
            0 => ::std::option::Option::Some(KVAction::KV_ACTION_UNSET),
            1 => ::std::option::Option::Some(KVAction::KV_ACTION_CREATE),
            2 => ::std::option::Option::Some(KVAction::KV_ACTION_UPDATE),
            3 => ::std::option::Option::Some(KVAction::KV_ACTION_DELETE),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [KVAction] = &[
        KVAction::KV_ACTION_UNSET,
        KVAction::KV_ACTION_CREATE,
        KVAction::KV_ACTION_UPDATE,
        KVAction::KV_ACTION_DELETE,
    ];
}

impl ::protobuf::EnumFull for KVAction {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("KVAction").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for KVAction {
    fn default() -> Self {
        KVAction::KV_ACTION_UNSET
    }
}

impl KVAction {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<KVAction>("KVAction")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rcommand.proto\x12\x06protos\x1a\x0ccommon.proto\x1a\x0epipeline.prot\
    o\"\xc7\x03\n\x07Command\x12,\n\x08audience\x18\x01\x20\x01(\x0b2\x10.pr\
    otos.AudienceR\x08audience\x12H\n\x0fattach_pipeline\x18d\x20\x01(\x0b2\
    \x1d.protos.AttachPipelineCommandH\0R\x0eattachPipeline\x12H\n\x0fdetach\
    _pipeline\x18e\x20\x01(\x0b2\x1d.protos.DetachPipelineCommandH\0R\x0edet\
    achPipeline\x12E\n\x0epause_pipeline\x18f\x20\x01(\x0b2\x1c.protos.Pause\
    PipelineCommandH\0R\rpausePipeline\x12H\n\x0fresume_pipeline\x18g\x20\
    \x01(\x0b2\x1d.protos.ResumePipelineCommandH\0R\x0eresumePipeline\x129\n\
    \nkeep_alive\x18h\x20\x01(\x0b2\x18.protos.KeepAliveCommandH\0R\tkeepAli\
    ve\x12#\n\x02kv\x18i\x20\x01(\x0b2\x11.protos.KVCommandH\0R\x02kvB\t\n\
    \x07command\"E\n\x15AttachPipelineCommand\x12,\n\x08pipeline\x18\x01\x20\
    \x01(\x0b2\x10.protos.PipelineR\x08pipeline\"8\n\x15DetachPipelineComman\
    d\x12\x1f\n\x0bpipeline_id\x18\x01\x20\x01(\tR\npipelineId\"7\n\x14Pause\
    PipelineCommand\x12\x1f\n\x0bpipeline_id\x18\x01\x20\x01(\tR\npipelineId\
    \"8\n\x15ResumePipelineCommand\x12\x1f\n\x0bpipeline_id\x18\x01\x20\x01(\
    \tR\npipelineId\"\x12\n\x10KeepAliveCommand\"\xac\x01\n\x08KVObject\x12\
    \x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\
    \x01(\x0cR\x05value\x12;\n\x1bcreated_at_unix_ts_nano_utc\x18\x03\x20\
    \x01(\x03R\x16createdAtUnixTsNanoUtc\x12;\n\x1bupdated_at_unix_ts_nano_u\
    tc\x18\x04\x20\x01(\x03R\x16updatedAtUnixTsNanoUtc\"\xb4\x01\n\rKVInstru\
    ction\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12(\n\x06action\x18\x02\
    \x20\x01(\x0e2\x10.protos.KVActionR\x06action\x12(\n\x06object\x18\x03\
    \x20\x01(\x0b2\x10.protos.KVObjectR\x06object\x12?\n\x1drequested_at_uni\
    x_ts_nano_utc\x18\x04\x20\x01(\x03R\x18requestedAtUnixTsNanoUtc\"F\n\tKV\
    Command\x129\n\x0cinstructions\x18\x01\x20\x03(\x0b2\x15.protos.KVInstru\
    ctionR\x0cinstructions*a\n\x08KVAction\x12\x13\n\x0fKV_ACTION_UNSET\x10\
    \0\x12\x14\n\x10KV_ACTION_CREATE\x10\x01\x12\x14\n\x10KV_ACTION_UPDATE\
    \x10\x02\x12\x14\n\x10KV_ACTION_DELETE\x10\x03B4Z2github.com/streamdal/s\
    nitch-protos/build/go/protosJ\xf2\x13\n\x06\x12\x04\0\0Y\x01\n\x08\n\x01\
    \x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x0f\n\t\n\x02\x03\0\
    \x12\x03\x04\0\x16\n\t\n\x02\x03\x01\x12\x03\x05\0\x18\n\x08\n\x01\x08\
    \x12\x03\x07\0I\n\t\n\x02\x08\x0b\x12\x03\x07\0I\nK\n\x02\x04\0\x12\x04\
    \n\0\x1a\x01\x1a?\x20Command\x20is\x20used\x20by\x20snitch-server\x20for\
    \x20sending\x20commands\x20to\x20SDKs\n\n\n\n\x03\x04\0\x01\x12\x03\n\
    \x08\x0f\n\x93\x01\n\x04\x04\0\x02\0\x12\x03\r\x02\x1f\x1a\x85\x01\x20Wh\
    o\x20is\x20this\x20command\x20intended\x20for?\n\x20NOTE:\x20Some\x20com\
    mands\x20(such\x20as\x20KeepAliveCommand,\x20KVCommand)\x20do\x20NOT\x20\
    use\x20audience\x20and\x20will\x20ignore\x20it\n\n\x0c\n\x05\x04\0\x02\0\
    \x06\x12\x03\r\x02\x11\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\r\x12\x1a\n\
    \x0c\n\x05\x04\0\x02\0\x03\x12\x03\r\x1d\x1e\n\x0c\n\x04\x04\0\x08\0\x12\
    \x04\x0f\x02\x19\x03\n\x0c\n\x05\x04\0\x08\0\x01\x12\x03\x0f\x08\x0f\n\
    \x0b\n\x04\x04\0\x02\x01\x12\x03\x10\x040\n\x0c\n\x05\x04\0\x02\x01\x06\
    \x12\x03\x10\x04\x19\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x10\x1a)\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x10,/\n\x0b\n\x04\x04\0\x02\x02\x12\
    \x03\x11\x040\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x11\x04\x19\n\x0c\n\
    \x05\x04\0\x02\x02\x01\x12\x03\x11\x1a)\n\x0c\n\x05\x04\0\x02\x02\x03\
    \x12\x03\x11,/\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x12\x04.\n\x0c\n\x05\
    \x04\0\x02\x03\x06\x12\x03\x12\x04\x18\n\x0c\n\x05\x04\0\x02\x03\x01\x12\
    \x03\x12\x19'\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x12*-\n\x0b\n\x04\
    \x04\0\x02\x04\x12\x03\x13\x040\n\x0c\n\x05\x04\0\x02\x04\x06\x12\x03\
    \x13\x04\x19\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x13\x1a)\n\x0c\n\x05\
    \x04\0\x02\x04\x03\x12\x03\x13,/\n\x0b\n\x04\x04\0\x02\x05\x12\x03\x14\
    \x04&\n\x0c\n\x05\x04\0\x02\x05\x06\x12\x03\x14\x04\x14\n\x0c\n\x05\x04\
    \0\x02\x05\x01\x12\x03\x14\x15\x1f\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\
    \x14\"%\nk\n\x04\x04\0\x02\x06\x12\x03\x18\x04\x17\x1a^\x20snitch-server\
    \x20will\x20emit\x20this\x20when\x20a\x20user\x20makes\x20changes\x20to\
    \x20the\x20KV\x20store\n\x20via\x20the\x20KV\x20HTTP\x20API.\n\n\x0c\n\
    \x05\x04\0\x02\x06\x06\x12\x03\x18\x04\r\n\x0c\n\x05\x04\0\x02\x06\x01\
    \x12\x03\x18\x0e\x10\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03\x18\x13\x16\n\
    \n\n\x02\x04\x01\x12\x04\x1c\0\x1e\x01\n\n\n\x03\x04\x01\x01\x12\x03\x1c\
    \x08\x1d\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x1d\x02\x1f\n\x0c\n\x05\x04\
    \x01\x02\0\x06\x12\x03\x1d\x02\x11\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\
    \x1d\x12\x1a\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x1d\x1d\x1e\n\n\n\x02\
    \x04\x02\x12\x04\x20\0\"\x01\n\n\n\x03\x04\x02\x01\x12\x03\x20\x08\x1d\n\
    \x0b\n\x04\x04\x02\x02\0\x12\x03!\x02\x19\n\x0c\n\x05\x04\x02\x02\0\x05\
    \x12\x03!\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03!\t\x14\n\x0c\n\
    \x05\x04\x02\x02\0\x03\x12\x03!\x17\x18\n\n\n\x02\x04\x03\x12\x04$\0&\
    \x01\n\n\n\x03\x04\x03\x01\x12\x03$\x08\x1c\n\x0b\n\x04\x04\x03\x02\0\
    \x12\x03%\x02\x19\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03%\x02\x08\n\x0c\n\
    \x05\x04\x03\x02\0\x01\x12\x03%\t\x14\n\x0c\n\x05\x04\x03\x02\0\x03\x12\
    \x03%\x17\x18\n\n\n\x02\x04\x04\x12\x04(\0*\x01\n\n\n\x03\x04\x04\x01\
    \x12\x03(\x08\x1d\n\x0b\n\x04\x04\x04\x02\0\x12\x03)\x02\x19\n\x0c\n\x05\
    \x04\x04\x02\0\x05\x12\x03)\x02\x08\n\x0c\n\x05\x04\x04\x02\0\x01\x12\
    \x03)\t\x14\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03)\x17\x18\nD\n\x02\x04\
    \x05\x12\x04,\0.\x01\"8\x20Nothing\x20needed\x20in\x20here,\x20just\x20a\
    \x20ping\x20from\x20server\x20to\x20SDK\n\n\n\n\x03\x04\x05\x01\x12\x03,\
    \x08\x18\n\n\n\x02\x05\0\x12\x040\05\x01\n\n\n\x03\x05\0\x01\x12\x030\
    \x05\r\n=\n\x04\x05\0\x02\0\x12\x031\x02\x16\"0\x20protolint:disable:thi\
    s\x20ENUM_FIELD_NAMES_PREFIX\n\n\x0c\n\x05\x05\0\x02\0\x01\x12\x031\x02\
    \x11\n\x0c\n\x05\x05\0\x02\0\x02\x12\x031\x14\x15\n=\n\x04\x05\0\x02\x01\
    \x12\x032\x02\x17\"0\x20protolint:disable:this\x20ENUM_FIELD_NAMES_PREFI\
    X\n\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x032\x02\x12\n\x0c\n\x05\x05\0\x02\
    \x01\x02\x12\x032\x15\x16\n=\n\x04\x05\0\x02\x02\x12\x033\x02\x17\"0\x20\
    protolint:disable:this\x20ENUM_FIELD_NAMES_PREFIX\n\n\x0c\n\x05\x05\0\
    \x02\x02\x01\x12\x033\x02\x12\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x033\x15\
    \x16\n=\n\x04\x05\0\x02\x03\x12\x034\x02\x17\"0\x20protolint:disable:thi\
    s\x20ENUM_FIELD_NAMES_PREFIX\n\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x034\
    \x02\x12\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x034\x15\x16\n\n\n\x02\x04\
    \x06\x12\x047\0C\x01\n\n\n\x03\x04\x06\x01\x12\x037\x08\x10\n.\n\x04\x04\
    \x06\x02\0\x12\x039\x02\x11\x1a!\x20Key\x20regex:\x20/^[a-zA-Z0-9_-:]+$/\
    )\n\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x039\x02\x08\n\x0c\n\x05\x04\x06\
    \x02\0\x01\x12\x039\t\x0c\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x039\x0f\x10\
    \n\x17\n\x04\x04\x06\x02\x01\x12\x03<\x02\x12\x1a\n\x20KV\x20value\n\n\
    \x0c\n\x05\x04\x06\x02\x01\x05\x12\x03<\x02\x07\n\x0c\n\x05\x04\x06\x02\
    \x01\x01\x12\x03<\x08\r\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x03<\x10\x11\
    \n+\n\x04\x04\x06\x02\x02\x12\x03?\x02(\x1a\x1e\x20When\x20was\x20this\
    \x20object\x20created\n\n\x0c\n\x05\x04\x06\x02\x02\x05\x12\x03?\x02\x07\
    \n\x0c\n\x05\x04\x06\x02\x02\x01\x12\x03?\x08#\n\x0c\n\x05\x04\x06\x02\
    \x02\x03\x12\x03?&'\n/\n\x04\x04\x06\x02\x03\x12\x03B\x02(\x1a\"\x20Last\
    \x20time\x20the\x20object\x20was\x20updated\n\n\x0c\n\x05\x04\x06\x02\
    \x03\x05\x12\x03B\x02\x07\n\x0c\n\x05\x04\x06\x02\x03\x01\x12\x03B\x08#\
    \n\x0c\n\x05\x04\x06\x02\x03\x03\x12\x03B&'\ng\n\x02\x04\x07\x12\x04F\0U\
    \x01\x1a[\x20Used\x20in\x20KVCommand\x20to\x20indicate\x20a\x20series\
    \x20of\x20KV-related\x20actions\x20-\x20ie.\x20create,\x20update,\x20del\
    ete\n\n\n\n\x03\x04\x07\x01\x12\x03F\x08\x15\n-\n\x04\x04\x07\x02\0\x12\
    \x03H\x02\x10\x1a\x20\x20Unique\x20ID\x20for\x20this\x20instruction\n\n\
    \x0c\n\x05\x04\x07\x02\0\x05\x12\x03H\x02\x08\n\x0c\n\x05\x04\x07\x02\0\
    \x01\x12\x03H\t\x0b\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03H\x0e\x0f\n.\n\
    \x04\x04\x07\x02\x01\x12\x03K\x02\x16\x1a!\x20What\x20kind\x20of\x20an\
    \x20action\x20is\x20this?\n\n\x0c\n\x05\x04\x07\x02\x01\x06\x12\x03K\x02\
    \n\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03K\x0b\x11\n\x0c\n\x05\x04\x07\
    \x02\x01\x03\x12\x03K\x14\x15\n\x18\n\x04\x04\x07\x02\x02\x12\x03N\x02\
    \x16\x1a\x0b\x20KV\x20object\n\n\x0c\n\x05\x04\x07\x02\x02\x06\x12\x03N\
    \x02\n\n\x0c\n\x05\x04\x07\x02\x02\x01\x12\x03N\x0b\x11\n\x0c\n\x05\x04\
    \x07\x02\x02\x03\x12\x03N\x14\x15\n^\n\x04\x04\x07\x02\x03\x12\x03Q\x02*\
    \x1aQ\x20When\x20this\x20instruction\x20was\x20requested\x20(usually\x20\
    will\x20be\x20the\x20HTTP\x20API\x20request\x20time)\n\n\x0c\n\x05\x04\
    \x07\x02\x03\x05\x12\x03Q\x02\x07\n\x0c\n\x05\x04\x07\x02\x03\x01\x12\
    \x03Q\x08%\n\x0c\n\x05\x04\x07\x02\x03\x03\x12\x03Q()\n\n\n\x02\x04\x08\
    \x12\x04W\0Y\x01\n\n\n\x03\x04\x08\x01\x12\x03W\x08\x11\n\x0b\n\x04\x04\
    \x08\x02\0\x12\x03X\x02*\n\x0c\n\x05\x04\x08\x02\0\x04\x12\x03X\x02\n\n\
    \x0c\n\x05\x04\x08\x02\0\x06\x12\x03X\x0b\x18\n\x0c\n\x05\x04\x08\x02\0\
    \x01\x12\x03X\x19%\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03X()b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::common::file_descriptor().clone());
            deps.push(super::pipeline::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(9);
            messages.push(Command::generated_message_descriptor_data());
            messages.push(AttachPipelineCommand::generated_message_descriptor_data());
            messages.push(DetachPipelineCommand::generated_message_descriptor_data());
            messages.push(PausePipelineCommand::generated_message_descriptor_data());
            messages.push(ResumePipelineCommand::generated_message_descriptor_data());
            messages.push(KeepAliveCommand::generated_message_descriptor_data());
            messages.push(KVObject::generated_message_descriptor_data());
            messages.push(KVInstruction::generated_message_descriptor_data());
            messages.push(KVCommand::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(KVAction::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
