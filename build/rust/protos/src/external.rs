// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `external.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.GetAllRequest)
pub struct GetAllRequest {
    // special fields
    // @@protoc_insertion_point(special_field:protos.GetAllRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetAllRequest {
    fn default() -> &'a GetAllRequest {
        <GetAllRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetAllRequest {
    pub fn new() -> GetAllRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetAllRequest>(
            "GetAllRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetAllRequest {
    const NAME: &'static str = "GetAllRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetAllRequest {
        GetAllRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetAllRequest {
        static instance: GetAllRequest = GetAllRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetAllRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetAllRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetAllRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetAllRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.GetAllResponse)
pub struct GetAllResponse {
    // message fields
    ///  Clients currently connected to the server
    // @@protoc_insertion_point(field:protos.GetAllResponse.live)
    pub live: ::std::vec::Vec<super::info::LiveInfo>,
    ///  All of the audiences that are known to the server
    // @@protoc_insertion_point(field:protos.GetAllResponse.audiences)
    pub audiences: ::std::vec::Vec<super::common::Audience>,
    ///  All of the pipelines known to the server + pipeline <-> audience mappings
    ///  key == pipeline_id; if "Audience" is not filled out - pipeline is not attached
    ///  to any audience.
    // @@protoc_insertion_point(field:protos.GetAllResponse.pipelines)
    pub pipelines: ::std::collections::HashMap<::std::string::String, super::info::PipelineInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.GetAllResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetAllResponse {
    fn default() -> &'a GetAllResponse {
        <GetAllResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetAllResponse {
    pub fn new() -> GetAllResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "live",
            |m: &GetAllResponse| { &m.live },
            |m: &mut GetAllResponse| { &mut m.live },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "audiences",
            |m: &GetAllResponse| { &m.audiences },
            |m: &mut GetAllResponse| { &mut m.audiences },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "pipelines",
            |m: &GetAllResponse| { &m.pipelines },
            |m: &mut GetAllResponse| { &mut m.pipelines },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetAllResponse>(
            "GetAllResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetAllResponse {
    const NAME: &'static str = "GetAllResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.live.push(is.read_message()?);
                },
                18 => {
                    self.audiences.push(is.read_message()?);
                },
                26 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.pipelines.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.live {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.audiences {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for (k, v) in &self.pipelines {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.live {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.audiences {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for (k, v) in &self.pipelines {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(26)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetAllResponse {
        GetAllResponse::new()
    }

    fn clear(&mut self) {
        self.live.clear();
        self.audiences.clear();
        self.pipelines.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetAllResponse {
        static instance: ::protobuf::rt::Lazy<GetAllResponse> = ::protobuf::rt::Lazy::new();
        instance.get(GetAllResponse::new)
    }
}

impl ::protobuf::MessageFull for GetAllResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetAllResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetAllResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetAllResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.GetPipelinesRequest)
pub struct GetPipelinesRequest {
    // special fields
    // @@protoc_insertion_point(special_field:protos.GetPipelinesRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPipelinesRequest {
    fn default() -> &'a GetPipelinesRequest {
        <GetPipelinesRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetPipelinesRequest {
    pub fn new() -> GetPipelinesRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPipelinesRequest>(
            "GetPipelinesRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPipelinesRequest {
    const NAME: &'static str = "GetPipelinesRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPipelinesRequest {
        GetPipelinesRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPipelinesRequest {
        static instance: GetPipelinesRequest = GetPipelinesRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPipelinesRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPipelinesRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPipelinesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPipelinesRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.GetPipelinesResponse)
pub struct GetPipelinesResponse {
    // message fields
    // @@protoc_insertion_point(field:protos.GetPipelinesResponse.pipelines)
    pub pipelines: ::std::vec::Vec<super::pipeline::Pipeline>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.GetPipelinesResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPipelinesResponse {
    fn default() -> &'a GetPipelinesResponse {
        <GetPipelinesResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetPipelinesResponse {
    pub fn new() -> GetPipelinesResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "pipelines",
            |m: &GetPipelinesResponse| { &m.pipelines },
            |m: &mut GetPipelinesResponse| { &mut m.pipelines },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPipelinesResponse>(
            "GetPipelinesResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPipelinesResponse {
    const NAME: &'static str = "GetPipelinesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.pipelines.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.pipelines {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.pipelines {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPipelinesResponse {
        GetPipelinesResponse::new()
    }

    fn clear(&mut self) {
        self.pipelines.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPipelinesResponse {
        static instance: GetPipelinesResponse = GetPipelinesResponse {
            pipelines: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPipelinesResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPipelinesResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPipelinesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPipelinesResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.GetPipelineRequest)
pub struct GetPipelineRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.GetPipelineRequest.pipeline_id)
    pub pipeline_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.GetPipelineRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPipelineRequest {
    fn default() -> &'a GetPipelineRequest {
        <GetPipelineRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetPipelineRequest {
    pub fn new() -> GetPipelineRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pipeline_id",
            |m: &GetPipelineRequest| { &m.pipeline_id },
            |m: &mut GetPipelineRequest| { &mut m.pipeline_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPipelineRequest>(
            "GetPipelineRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPipelineRequest {
    const NAME: &'static str = "GetPipelineRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.pipeline_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.pipeline_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pipeline_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.pipeline_id.is_empty() {
            os.write_string(1, &self.pipeline_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPipelineRequest {
        GetPipelineRequest::new()
    }

    fn clear(&mut self) {
        self.pipeline_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPipelineRequest {
        static instance: GetPipelineRequest = GetPipelineRequest {
            pipeline_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPipelineRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPipelineRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPipelineRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPipelineRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.GetPipelineResponse)
pub struct GetPipelineResponse {
    // message fields
    // @@protoc_insertion_point(field:protos.GetPipelineResponse.pipeline)
    pub pipeline: ::protobuf::MessageField<super::pipeline::Pipeline>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.GetPipelineResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPipelineResponse {
    fn default() -> &'a GetPipelineResponse {
        <GetPipelineResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetPipelineResponse {
    pub fn new() -> GetPipelineResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pipeline::Pipeline>(
            "pipeline",
            |m: &GetPipelineResponse| { &m.pipeline },
            |m: &mut GetPipelineResponse| { &mut m.pipeline },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPipelineResponse>(
            "GetPipelineResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPipelineResponse {
    const NAME: &'static str = "GetPipelineResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pipeline)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.pipeline.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.pipeline.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPipelineResponse {
        GetPipelineResponse::new()
    }

    fn clear(&mut self) {
        self.pipeline.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPipelineResponse {
        static instance: GetPipelineResponse = GetPipelineResponse {
            pipeline: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPipelineResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPipelineResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPipelineResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPipelineResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.CreatePipelineRequest)
pub struct CreatePipelineRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.CreatePipelineRequest.pipeline)
    pub pipeline: ::protobuf::MessageField<super::pipeline::Pipeline>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.CreatePipelineRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreatePipelineRequest {
    fn default() -> &'a CreatePipelineRequest {
        <CreatePipelineRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreatePipelineRequest {
    pub fn new() -> CreatePipelineRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pipeline::Pipeline>(
            "pipeline",
            |m: &CreatePipelineRequest| { &m.pipeline },
            |m: &mut CreatePipelineRequest| { &mut m.pipeline },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreatePipelineRequest>(
            "CreatePipelineRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreatePipelineRequest {
    const NAME: &'static str = "CreatePipelineRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pipeline)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.pipeline.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.pipeline.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreatePipelineRequest {
        CreatePipelineRequest::new()
    }

    fn clear(&mut self) {
        self.pipeline.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreatePipelineRequest {
        static instance: CreatePipelineRequest = CreatePipelineRequest {
            pipeline: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreatePipelineRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreatePipelineRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreatePipelineRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreatePipelineRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.CreatePipelineResponse)
pub struct CreatePipelineResponse {
    // message fields
    // @@protoc_insertion_point(field:protos.CreatePipelineResponse.message)
    pub message: ::std::string::String,
    // @@protoc_insertion_point(field:protos.CreatePipelineResponse.pipeline_id)
    pub pipeline_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.CreatePipelineResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreatePipelineResponse {
    fn default() -> &'a CreatePipelineResponse {
        <CreatePipelineResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreatePipelineResponse {
    pub fn new() -> CreatePipelineResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &CreatePipelineResponse| { &m.message },
            |m: &mut CreatePipelineResponse| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pipeline_id",
            |m: &CreatePipelineResponse| { &m.pipeline_id },
            |m: &mut CreatePipelineResponse| { &mut m.pipeline_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreatePipelineResponse>(
            "CreatePipelineResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreatePipelineResponse {
    const NAME: &'static str = "CreatePipelineResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.message = is.read_string()?;
                },
                18 => {
                    self.pipeline_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.message);
        }
        if !self.pipeline_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.pipeline_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.message.is_empty() {
            os.write_string(1, &self.message)?;
        }
        if !self.pipeline_id.is_empty() {
            os.write_string(2, &self.pipeline_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreatePipelineResponse {
        CreatePipelineResponse::new()
    }

    fn clear(&mut self) {
        self.message.clear();
        self.pipeline_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreatePipelineResponse {
        static instance: CreatePipelineResponse = CreatePipelineResponse {
            message: ::std::string::String::new(),
            pipeline_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreatePipelineResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreatePipelineResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreatePipelineResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreatePipelineResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.UpdatePipelineRequest)
pub struct UpdatePipelineRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.UpdatePipelineRequest.pipeline)
    pub pipeline: ::protobuf::MessageField<super::pipeline::Pipeline>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.UpdatePipelineRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UpdatePipelineRequest {
    fn default() -> &'a UpdatePipelineRequest {
        <UpdatePipelineRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdatePipelineRequest {
    pub fn new() -> UpdatePipelineRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pipeline::Pipeline>(
            "pipeline",
            |m: &UpdatePipelineRequest| { &m.pipeline },
            |m: &mut UpdatePipelineRequest| { &mut m.pipeline },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UpdatePipelineRequest>(
            "UpdatePipelineRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UpdatePipelineRequest {
    const NAME: &'static str = "UpdatePipelineRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pipeline)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.pipeline.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.pipeline.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UpdatePipelineRequest {
        UpdatePipelineRequest::new()
    }

    fn clear(&mut self) {
        self.pipeline.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UpdatePipelineRequest {
        static instance: UpdatePipelineRequest = UpdatePipelineRequest {
            pipeline: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UpdatePipelineRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UpdatePipelineRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UpdatePipelineRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdatePipelineRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.DeletePipelineRequest)
pub struct DeletePipelineRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.DeletePipelineRequest.pipeline_id)
    pub pipeline_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.DeletePipelineRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeletePipelineRequest {
    fn default() -> &'a DeletePipelineRequest {
        <DeletePipelineRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeletePipelineRequest {
    pub fn new() -> DeletePipelineRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pipeline_id",
            |m: &DeletePipelineRequest| { &m.pipeline_id },
            |m: &mut DeletePipelineRequest| { &mut m.pipeline_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeletePipelineRequest>(
            "DeletePipelineRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeletePipelineRequest {
    const NAME: &'static str = "DeletePipelineRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.pipeline_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.pipeline_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pipeline_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.pipeline_id.is_empty() {
            os.write_string(1, &self.pipeline_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeletePipelineRequest {
        DeletePipelineRequest::new()
    }

    fn clear(&mut self) {
        self.pipeline_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeletePipelineRequest {
        static instance: DeletePipelineRequest = DeletePipelineRequest {
            pipeline_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeletePipelineRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeletePipelineRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeletePipelineRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeletePipelineRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.AttachPipelineRequest)
pub struct AttachPipelineRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.AttachPipelineRequest.pipeline_id)
    pub pipeline_id: ::std::string::String,
    // @@protoc_insertion_point(field:protos.AttachPipelineRequest.audience)
    pub audience: ::protobuf::MessageField<super::common::Audience>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.AttachPipelineRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AttachPipelineRequest {
    fn default() -> &'a AttachPipelineRequest {
        <AttachPipelineRequest as ::protobuf::Message>::default_instance()
    }
}

impl AttachPipelineRequest {
    pub fn new() -> AttachPipelineRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pipeline_id",
            |m: &AttachPipelineRequest| { &m.pipeline_id },
            |m: &mut AttachPipelineRequest| { &mut m.pipeline_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::Audience>(
            "audience",
            |m: &AttachPipelineRequest| { &m.audience },
            |m: &mut AttachPipelineRequest| { &mut m.audience },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AttachPipelineRequest>(
            "AttachPipelineRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AttachPipelineRequest {
    const NAME: &'static str = "AttachPipelineRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.pipeline_id = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.audience)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.pipeline_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pipeline_id);
        }
        if let Some(v) = self.audience.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.pipeline_id.is_empty() {
            os.write_string(1, &self.pipeline_id)?;
        }
        if let Some(v) = self.audience.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AttachPipelineRequest {
        AttachPipelineRequest::new()
    }

    fn clear(&mut self) {
        self.pipeline_id.clear();
        self.audience.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AttachPipelineRequest {
        static instance: AttachPipelineRequest = AttachPipelineRequest {
            pipeline_id: ::std::string::String::new(),
            audience: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AttachPipelineRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AttachPipelineRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AttachPipelineRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AttachPipelineRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.DetachPipelineRequest)
pub struct DetachPipelineRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.DetachPipelineRequest.pipeline_id)
    pub pipeline_id: ::std::string::String,
    // @@protoc_insertion_point(field:protos.DetachPipelineRequest.audience)
    pub audience: ::protobuf::MessageField<super::common::Audience>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.DetachPipelineRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DetachPipelineRequest {
    fn default() -> &'a DetachPipelineRequest {
        <DetachPipelineRequest as ::protobuf::Message>::default_instance()
    }
}

impl DetachPipelineRequest {
    pub fn new() -> DetachPipelineRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pipeline_id",
            |m: &DetachPipelineRequest| { &m.pipeline_id },
            |m: &mut DetachPipelineRequest| { &mut m.pipeline_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::Audience>(
            "audience",
            |m: &DetachPipelineRequest| { &m.audience },
            |m: &mut DetachPipelineRequest| { &mut m.audience },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DetachPipelineRequest>(
            "DetachPipelineRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DetachPipelineRequest {
    const NAME: &'static str = "DetachPipelineRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.pipeline_id = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.audience)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.pipeline_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pipeline_id);
        }
        if let Some(v) = self.audience.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.pipeline_id.is_empty() {
            os.write_string(1, &self.pipeline_id)?;
        }
        if let Some(v) = self.audience.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DetachPipelineRequest {
        DetachPipelineRequest::new()
    }

    fn clear(&mut self) {
        self.pipeline_id.clear();
        self.audience.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DetachPipelineRequest {
        static instance: DetachPipelineRequest = DetachPipelineRequest {
            pipeline_id: ::std::string::String::new(),
            audience: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DetachPipelineRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DetachPipelineRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DetachPipelineRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DetachPipelineRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.PausePipelineRequest)
pub struct PausePipelineRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.PausePipelineRequest.pipeline_id)
    pub pipeline_id: ::std::string::String,
    // @@protoc_insertion_point(field:protos.PausePipelineRequest.audience)
    pub audience: ::protobuf::MessageField<super::common::Audience>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.PausePipelineRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PausePipelineRequest {
    fn default() -> &'a PausePipelineRequest {
        <PausePipelineRequest as ::protobuf::Message>::default_instance()
    }
}

impl PausePipelineRequest {
    pub fn new() -> PausePipelineRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pipeline_id",
            |m: &PausePipelineRequest| { &m.pipeline_id },
            |m: &mut PausePipelineRequest| { &mut m.pipeline_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::Audience>(
            "audience",
            |m: &PausePipelineRequest| { &m.audience },
            |m: &mut PausePipelineRequest| { &mut m.audience },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PausePipelineRequest>(
            "PausePipelineRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PausePipelineRequest {
    const NAME: &'static str = "PausePipelineRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.pipeline_id = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.audience)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.pipeline_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pipeline_id);
        }
        if let Some(v) = self.audience.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.pipeline_id.is_empty() {
            os.write_string(1, &self.pipeline_id)?;
        }
        if let Some(v) = self.audience.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PausePipelineRequest {
        PausePipelineRequest::new()
    }

    fn clear(&mut self) {
        self.pipeline_id.clear();
        self.audience.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PausePipelineRequest {
        static instance: PausePipelineRequest = PausePipelineRequest {
            pipeline_id: ::std::string::String::new(),
            audience: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PausePipelineRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PausePipelineRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PausePipelineRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PausePipelineRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.ResumePipelineRequest)
pub struct ResumePipelineRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.ResumePipelineRequest.pipeline_id)
    pub pipeline_id: ::std::string::String,
    // @@protoc_insertion_point(field:protos.ResumePipelineRequest.audience)
    pub audience: ::protobuf::MessageField<super::common::Audience>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.ResumePipelineRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ResumePipelineRequest {
    fn default() -> &'a ResumePipelineRequest {
        <ResumePipelineRequest as ::protobuf::Message>::default_instance()
    }
}

impl ResumePipelineRequest {
    pub fn new() -> ResumePipelineRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pipeline_id",
            |m: &ResumePipelineRequest| { &m.pipeline_id },
            |m: &mut ResumePipelineRequest| { &mut m.pipeline_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::Audience>(
            "audience",
            |m: &ResumePipelineRequest| { &m.audience },
            |m: &mut ResumePipelineRequest| { &mut m.audience },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ResumePipelineRequest>(
            "ResumePipelineRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ResumePipelineRequest {
    const NAME: &'static str = "ResumePipelineRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.pipeline_id = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.audience)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.pipeline_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pipeline_id);
        }
        if let Some(v) = self.audience.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.pipeline_id.is_empty() {
            os.write_string(1, &self.pipeline_id)?;
        }
        if let Some(v) = self.audience.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ResumePipelineRequest {
        ResumePipelineRequest::new()
    }

    fn clear(&mut self) {
        self.pipeline_id.clear();
        self.audience.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ResumePipelineRequest {
        static instance: ResumePipelineRequest = ResumePipelineRequest {
            pipeline_id: ::std::string::String::new(),
            audience: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ResumePipelineRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ResumePipelineRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ResumePipelineRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResumePipelineRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Notifications
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.CreateNotificationRequest)
pub struct CreateNotificationRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.CreateNotificationRequest.notification)
    pub notification: ::protobuf::MessageField<super::notify::NotificationConfig>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.CreateNotificationRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateNotificationRequest {
    fn default() -> &'a CreateNotificationRequest {
        <CreateNotificationRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateNotificationRequest {
    pub fn new() -> CreateNotificationRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::notify::NotificationConfig>(
            "notification",
            |m: &CreateNotificationRequest| { &m.notification },
            |m: &mut CreateNotificationRequest| { &mut m.notification },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateNotificationRequest>(
            "CreateNotificationRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateNotificationRequest {
    const NAME: &'static str = "CreateNotificationRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.notification)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.notification.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.notification.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateNotificationRequest {
        CreateNotificationRequest::new()
    }

    fn clear(&mut self) {
        self.notification.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateNotificationRequest {
        static instance: CreateNotificationRequest = CreateNotificationRequest {
            notification: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateNotificationRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateNotificationRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateNotificationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateNotificationRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.UpdateNotificationRequest)
pub struct UpdateNotificationRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.UpdateNotificationRequest.notification)
    pub notification: ::protobuf::MessageField<super::notify::NotificationConfig>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.UpdateNotificationRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UpdateNotificationRequest {
    fn default() -> &'a UpdateNotificationRequest {
        <UpdateNotificationRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateNotificationRequest {
    pub fn new() -> UpdateNotificationRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::notify::NotificationConfig>(
            "notification",
            |m: &UpdateNotificationRequest| { &m.notification },
            |m: &mut UpdateNotificationRequest| { &mut m.notification },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UpdateNotificationRequest>(
            "UpdateNotificationRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UpdateNotificationRequest {
    const NAME: &'static str = "UpdateNotificationRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.notification)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.notification.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.notification.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UpdateNotificationRequest {
        UpdateNotificationRequest::new()
    }

    fn clear(&mut self) {
        self.notification.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UpdateNotificationRequest {
        static instance: UpdateNotificationRequest = UpdateNotificationRequest {
            notification: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UpdateNotificationRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UpdateNotificationRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UpdateNotificationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateNotificationRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.DeleteNotificationRequest)
pub struct DeleteNotificationRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.DeleteNotificationRequest.notification_id)
    pub notification_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.DeleteNotificationRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeleteNotificationRequest {
    fn default() -> &'a DeleteNotificationRequest {
        <DeleteNotificationRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteNotificationRequest {
    pub fn new() -> DeleteNotificationRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "notification_id",
            |m: &DeleteNotificationRequest| { &m.notification_id },
            |m: &mut DeleteNotificationRequest| { &mut m.notification_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeleteNotificationRequest>(
            "DeleteNotificationRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeleteNotificationRequest {
    const NAME: &'static str = "DeleteNotificationRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.notification_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.notification_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.notification_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.notification_id.is_empty() {
            os.write_string(1, &self.notification_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeleteNotificationRequest {
        DeleteNotificationRequest::new()
    }

    fn clear(&mut self) {
        self.notification_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeleteNotificationRequest {
        static instance: DeleteNotificationRequest = DeleteNotificationRequest {
            notification_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeleteNotificationRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeleteNotificationRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeleteNotificationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteNotificationRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.GetNotificationsRequest)
pub struct GetNotificationsRequest {
    // special fields
    // @@protoc_insertion_point(special_field:protos.GetNotificationsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetNotificationsRequest {
    fn default() -> &'a GetNotificationsRequest {
        <GetNotificationsRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetNotificationsRequest {
    pub fn new() -> GetNotificationsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetNotificationsRequest>(
            "GetNotificationsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetNotificationsRequest {
    const NAME: &'static str = "GetNotificationsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetNotificationsRequest {
        GetNotificationsRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetNotificationsRequest {
        static instance: GetNotificationsRequest = GetNotificationsRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetNotificationsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetNotificationsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetNotificationsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetNotificationsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.GetNotificationsResponse)
pub struct GetNotificationsResponse {
    // message fields
    // @@protoc_insertion_point(field:protos.GetNotificationsResponse.notifications)
    pub notifications: ::std::collections::HashMap<::std::string::String, super::notify::NotificationConfig>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.GetNotificationsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetNotificationsResponse {
    fn default() -> &'a GetNotificationsResponse {
        <GetNotificationsResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetNotificationsResponse {
    pub fn new() -> GetNotificationsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "notifications",
            |m: &GetNotificationsResponse| { &m.notifications },
            |m: &mut GetNotificationsResponse| { &mut m.notifications },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetNotificationsResponse>(
            "GetNotificationsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetNotificationsResponse {
    const NAME: &'static str = "GetNotificationsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.notifications.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for (k, v) in &self.notifications {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for (k, v) in &self.notifications {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(10)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetNotificationsResponse {
        GetNotificationsResponse::new()
    }

    fn clear(&mut self) {
        self.notifications.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetNotificationsResponse {
        static instance: ::protobuf::rt::Lazy<GetNotificationsResponse> = ::protobuf::rt::Lazy::new();
        instance.get(GetNotificationsResponse::new)
    }
}

impl ::protobuf::MessageFull for GetNotificationsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetNotificationsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetNotificationsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetNotificationsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.GetNotificationRequest)
pub struct GetNotificationRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.GetNotificationRequest.notification_id)
    pub notification_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.GetNotificationRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetNotificationRequest {
    fn default() -> &'a GetNotificationRequest {
        <GetNotificationRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetNotificationRequest {
    pub fn new() -> GetNotificationRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "notification_id",
            |m: &GetNotificationRequest| { &m.notification_id },
            |m: &mut GetNotificationRequest| { &mut m.notification_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetNotificationRequest>(
            "GetNotificationRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetNotificationRequest {
    const NAME: &'static str = "GetNotificationRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.notification_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.notification_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.notification_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.notification_id.is_empty() {
            os.write_string(1, &self.notification_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetNotificationRequest {
        GetNotificationRequest::new()
    }

    fn clear(&mut self) {
        self.notification_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetNotificationRequest {
        static instance: GetNotificationRequest = GetNotificationRequest {
            notification_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetNotificationRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetNotificationRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetNotificationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetNotificationRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.GetNotificationResponse)
pub struct GetNotificationResponse {
    // message fields
    // @@protoc_insertion_point(field:protos.GetNotificationResponse.notification)
    pub notification: ::protobuf::MessageField<super::notify::NotificationConfig>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.GetNotificationResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetNotificationResponse {
    fn default() -> &'a GetNotificationResponse {
        <GetNotificationResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetNotificationResponse {
    pub fn new() -> GetNotificationResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::notify::NotificationConfig>(
            "notification",
            |m: &GetNotificationResponse| { &m.notification },
            |m: &mut GetNotificationResponse| { &mut m.notification },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetNotificationResponse>(
            "GetNotificationResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetNotificationResponse {
    const NAME: &'static str = "GetNotificationResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.notification)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.notification.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.notification.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetNotificationResponse {
        GetNotificationResponse::new()
    }

    fn clear(&mut self) {
        self.notification.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetNotificationResponse {
        static instance: GetNotificationResponse = GetNotificationResponse {
            notification: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetNotificationResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetNotificationResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetNotificationResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetNotificationResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.AttachNotificationRequest)
pub struct AttachNotificationRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.AttachNotificationRequest.notification_id)
    pub notification_id: ::std::string::String,
    // @@protoc_insertion_point(field:protos.AttachNotificationRequest.pipeline_id)
    pub pipeline_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.AttachNotificationRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AttachNotificationRequest {
    fn default() -> &'a AttachNotificationRequest {
        <AttachNotificationRequest as ::protobuf::Message>::default_instance()
    }
}

impl AttachNotificationRequest {
    pub fn new() -> AttachNotificationRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "notification_id",
            |m: &AttachNotificationRequest| { &m.notification_id },
            |m: &mut AttachNotificationRequest| { &mut m.notification_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pipeline_id",
            |m: &AttachNotificationRequest| { &m.pipeline_id },
            |m: &mut AttachNotificationRequest| { &mut m.pipeline_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AttachNotificationRequest>(
            "AttachNotificationRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AttachNotificationRequest {
    const NAME: &'static str = "AttachNotificationRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.notification_id = is.read_string()?;
                },
                18 => {
                    self.pipeline_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.notification_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.notification_id);
        }
        if !self.pipeline_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.pipeline_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.notification_id.is_empty() {
            os.write_string(1, &self.notification_id)?;
        }
        if !self.pipeline_id.is_empty() {
            os.write_string(2, &self.pipeline_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AttachNotificationRequest {
        AttachNotificationRequest::new()
    }

    fn clear(&mut self) {
        self.notification_id.clear();
        self.pipeline_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AttachNotificationRequest {
        static instance: AttachNotificationRequest = AttachNotificationRequest {
            notification_id: ::std::string::String::new(),
            pipeline_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AttachNotificationRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AttachNotificationRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AttachNotificationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AttachNotificationRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.DetachNotificationRequest)
pub struct DetachNotificationRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.DetachNotificationRequest.notification_id)
    pub notification_id: ::std::string::String,
    // @@protoc_insertion_point(field:protos.DetachNotificationRequest.pipeline_id)
    pub pipeline_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.DetachNotificationRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DetachNotificationRequest {
    fn default() -> &'a DetachNotificationRequest {
        <DetachNotificationRequest as ::protobuf::Message>::default_instance()
    }
}

impl DetachNotificationRequest {
    pub fn new() -> DetachNotificationRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "notification_id",
            |m: &DetachNotificationRequest| { &m.notification_id },
            |m: &mut DetachNotificationRequest| { &mut m.notification_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pipeline_id",
            |m: &DetachNotificationRequest| { &m.pipeline_id },
            |m: &mut DetachNotificationRequest| { &mut m.pipeline_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DetachNotificationRequest>(
            "DetachNotificationRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DetachNotificationRequest {
    const NAME: &'static str = "DetachNotificationRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.notification_id = is.read_string()?;
                },
                18 => {
                    self.pipeline_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.notification_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.notification_id);
        }
        if !self.pipeline_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.pipeline_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.notification_id.is_empty() {
            os.write_string(1, &self.notification_id)?;
        }
        if !self.pipeline_id.is_empty() {
            os.write_string(2, &self.pipeline_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DetachNotificationRequest {
        DetachNotificationRequest::new()
    }

    fn clear(&mut self) {
        self.notification_id.clear();
        self.pipeline_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DetachNotificationRequest {
        static instance: DetachNotificationRequest = DetachNotificationRequest {
            notification_id: ::std::string::String::new(),
            pipeline_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DetachNotificationRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DetachNotificationRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DetachNotificationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DetachNotificationRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.TestRequest)
pub struct TestRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.TestRequest.input)
    pub input: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.TestRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TestRequest {
    fn default() -> &'a TestRequest {
        <TestRequest as ::protobuf::Message>::default_instance()
    }
}

impl TestRequest {
    pub fn new() -> TestRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "input",
            |m: &TestRequest| { &m.input },
            |m: &mut TestRequest| { &mut m.input },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TestRequest>(
            "TestRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TestRequest {
    const NAME: &'static str = "TestRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.input = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.input.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.input);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.input.is_empty() {
            os.write_string(1, &self.input)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TestRequest {
        TestRequest::new()
    }

    fn clear(&mut self) {
        self.input.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TestRequest {
        static instance: TestRequest = TestRequest {
            input: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TestRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TestRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TestRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TestRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.TestResponse)
pub struct TestResponse {
    // message fields
    // @@protoc_insertion_point(field:protos.TestResponse.output)
    pub output: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.TestResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TestResponse {
    fn default() -> &'a TestResponse {
        <TestResponse as ::protobuf::Message>::default_instance()
    }
}

impl TestResponse {
    pub fn new() -> TestResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "output",
            |m: &TestResponse| { &m.output },
            |m: &mut TestResponse| { &mut m.output },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TestResponse>(
            "TestResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TestResponse {
    const NAME: &'static str = "TestResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    self.output = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.output.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.output);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.output.is_empty() {
            os.write_string(2, &self.output)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TestResponse {
        TestResponse::new()
    }

    fn clear(&mut self) {
        self.output.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TestResponse {
        static instance: TestResponse = TestResponse {
            output: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TestResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TestResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TestResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TestResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eexternal.proto\x12\x06protos\x1a\x0ccommon.proto\x1a\ninfo.proto\
    \x1a\x0cnotify.proto\x1a\x0epipeline.proto\"\x0f\n\rGetAllRequest\"\xff\
    \x01\n\x0eGetAllResponse\x12$\n\x04live\x18\x01\x20\x03(\x0b2\x10.protos\
    .LiveInfoR\x04live\x12.\n\taudiences\x18\x02\x20\x03(\x0b2\x10.protos.Au\
    dienceR\taudiences\x12C\n\tpipelines\x18\x03\x20\x03(\x0b2%.protos.GetAl\
    lResponse.PipelinesEntryR\tpipelines\x1aR\n\x0ePipelinesEntry\x12\x10\n\
    \x03key\x18\x01\x20\x01(\tR\x03key\x12*\n\x05value\x18\x02\x20\x01(\x0b2\
    \x14.protos.PipelineInfoR\x05value:\x028\x01\"\x15\n\x13GetPipelinesRequ\
    est\"F\n\x14GetPipelinesResponse\x12.\n\tpipelines\x18\x01\x20\x03(\x0b2\
    \x10.protos.PipelineR\tpipelines\"5\n\x12GetPipelineRequest\x12\x1f\n\
    \x0bpipeline_id\x18\x01\x20\x01(\tR\npipelineId\"C\n\x13GetPipelineRespo\
    nse\x12,\n\x08pipeline\x18\x01\x20\x01(\x0b2\x10.protos.PipelineR\x08pip\
    eline\"E\n\x15CreatePipelineRequest\x12,\n\x08pipeline\x18\x01\x20\x01(\
    \x0b2\x10.protos.PipelineR\x08pipeline\"S\n\x16CreatePipelineResponse\
    \x12\x18\n\x07message\x18\x01\x20\x01(\tR\x07message\x12\x1f\n\x0bpipeli\
    ne_id\x18\x02\x20\x01(\tR\npipelineId\"E\n\x15UpdatePipelineRequest\x12,\
    \n\x08pipeline\x18\x01\x20\x01(\x0b2\x10.protos.PipelineR\x08pipeline\"8\
    \n\x15DeletePipelineRequest\x12\x1f\n\x0bpipeline_id\x18\x01\x20\x01(\tR\
    \npipelineId\"f\n\x15AttachPipelineRequest\x12\x1f\n\x0bpipeline_id\x18\
    \x01\x20\x01(\tR\npipelineId\x12,\n\x08audience\x18\x02\x20\x01(\x0b2\
    \x10.protos.AudienceR\x08audience\"f\n\x15DetachPipelineRequest\x12\x1f\
    \n\x0bpipeline_id\x18\x01\x20\x01(\tR\npipelineId\x12,\n\x08audience\x18\
    \x02\x20\x01(\x0b2\x10.protos.AudienceR\x08audience\"e\n\x14PausePipelin\
    eRequest\x12\x1f\n\x0bpipeline_id\x18\x01\x20\x01(\tR\npipelineId\x12,\n\
    \x08audience\x18\x02\x20\x01(\x0b2\x10.protos.AudienceR\x08audience\"f\n\
    \x15ResumePipelineRequest\x12\x1f\n\x0bpipeline_id\x18\x01\x20\x01(\tR\n\
    pipelineId\x12,\n\x08audience\x18\x02\x20\x01(\x0b2\x10.protos.AudienceR\
    \x08audience\"[\n\x19CreateNotificationRequest\x12>\n\x0cnotification\
    \x18\x01\x20\x01(\x0b2\x1a.protos.NotificationConfigR\x0cnotification\"[\
    \n\x19UpdateNotificationRequest\x12>\n\x0cnotification\x18\x01\x20\x01(\
    \x0b2\x1a.protos.NotificationConfigR\x0cnotification\"D\n\x19DeleteNotif\
    icationRequest\x12'\n\x0fnotification_id\x18\x01\x20\x01(\tR\x0enotifica\
    tionId\"\x19\n\x17GetNotificationsRequest\"\xd3\x01\n\x18GetNotification\
    sResponse\x12Y\n\rnotifications\x18\x01\x20\x03(\x0b23.protos.GetNotific\
    ationsResponse.NotificationsEntryR\rnotifications\x1a\\\n\x12Notificatio\
    nsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x120\n\x05value\x18\
    \x02\x20\x01(\x0b2\x1a.protos.NotificationConfigR\x05value:\x028\x01\"A\
    \n\x16GetNotificationRequest\x12'\n\x0fnotification_id\x18\x01\x20\x01(\
    \tR\x0enotificationId\"Y\n\x17GetNotificationResponse\x12>\n\x0cnotifica\
    tion\x18\x01\x20\x01(\x0b2\x1a.protos.NotificationConfigR\x0cnotificatio\
    n\"e\n\x19AttachNotificationRequest\x12'\n\x0fnotification_id\x18\x01\
    \x20\x01(\tR\x0enotificationId\x12\x1f\n\x0bpipeline_id\x18\x02\x20\x01(\
    \tR\npipelineId\"e\n\x19DetachNotificationRequest\x12'\n\x0fnotification\
    _id\x18\x01\x20\x01(\tR\x0enotificationId\x12\x1f\n\x0bpipeline_id\x18\
    \x02\x20\x01(\tR\npipelineId\"#\n\x0bTestRequest\x12\x14\n\x05input\x18\
    \x01\x20\x01(\tR\x05input\"&\n\x0cTestResponse\x12\x16\n\x06output\x18\
    \x02\x20\x01(\tR\x06output2\xe4\n\n\x08External\x127\n\x06GetAll\x12\x15\
    .protos.GetAllRequest\x1a\x16.protos.GetAllResponse\x12I\n\x0cGetPipelin\
    es\x12\x1b.protos.GetPipelinesRequest\x1a\x1c.protos.GetPipelinesRespons\
    e\x12F\n\x0bGetPipeline\x12\x1a.protos.GetPipelineRequest\x1a\x1b.protos\
    .GetPipelineResponse\x12O\n\x0eCreatePipeline\x12\x1d.protos.CreatePipel\
    ineRequest\x1a\x1e.protos.CreatePipelineResponse\x12I\n\x0eUpdatePipelin\
    e\x12\x1d.protos.UpdatePipelineRequest\x1a\x18.protos.StandardResponse\
    \x12I\n\x0eDeletePipeline\x12\x1d.protos.DeletePipelineRequest\x1a\x18.p\
    rotos.StandardResponse\x12I\n\x0eAttachPipeline\x12\x1d.protos.AttachPip\
    elineRequest\x1a\x18.protos.StandardResponse\x12I\n\x0eDetachPipeline\
    \x12\x1d.protos.DetachPipelineRequest\x1a\x18.protos.StandardResponse\
    \x12G\n\rPausePipeline\x12\x1c.protos.PausePipelineRequest\x1a\x18.proto\
    s.StandardResponse\x12I\n\x0eResumePipeline\x12\x1d.protos.ResumePipelin\
    eRequest\x1a\x18.protos.StandardResponse\x12Q\n\x12CreateNotification\
    \x12!.protos.CreateNotificationRequest\x1a\x18.protos.StandardResponse\
    \x12Q\n\x12UpdateNotification\x12!.protos.UpdateNotificationRequest\x1a\
    \x18.protos.StandardResponse\x12Q\n\x12DeleteNotification\x12!.protos.De\
    leteNotificationRequest\x1a\x18.protos.StandardResponse\x12U\n\x10GetNot\
    ifications\x12\x1f.protos.GetNotificationsRequest\x1a\x20.protos.GetNoti\
    ficationsResponse\x12R\n\x0fGetNotification\x12\x1e.protos.GetNotificati\
    onRequest\x1a\x1f.protos.GetNotificationResponse\x12Q\n\x12AttachNotific\
    ation\x12!.protos.AttachNotificationRequest\x1a\x18.protos.StandardRespo\
    nse\x12Q\n\x12DetachNotification\x12!.protos.DetachNotificationRequest\
    \x1a\x18.protos.StandardResponse\x121\n\x04Test\x12\x13.protos.TestReque\
    st\x1a\x14.protos.TestResponseB4Z2github.com/streamdal/snitch-protos/bui\
    ld/go/protosJ\xf4\"\n\x07\x12\x05\0\0\xa9\x01\x01\n\x08\n\x01\x0c\x12\
    \x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x0f\n\t\n\x02\x03\0\x12\x03\
    \x04\0\x16\n\t\n\x02\x03\x01\x12\x03\x05\0\x14\n\t\n\x02\x03\x02\x12\x03\
    \x06\0\x16\n\t\n\x02\x03\x03\x12\x03\x07\0\x18\n\x08\n\x01\x08\x12\x03\t\
    \0I\n\t\n\x02\x08\x0b\x12\x03\t\0I\n\n\n\x02\x06\0\x12\x04\x0b\04\x01\n\
    \n\n\x03\x06\0\x01\x12\x03\x0b\x08\x10\n_\n\x04\x06\0\x02\0\x12\x03\r\
    \x025\x1aR\x20Should\x20return\x20everything\x20that\x20is\x20needed\x20\
    to\x20build\x20the\x20initial\x20view\x20in\x20the\x20console\n\n\x0c\n\
    \x05\x06\0\x02\0\x01\x12\x03\r\x06\x0c\n\x0c\n\x05\x06\0\x02\0\x02\x12\
    \x03\r\r\x1a\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\r%3\n@\n\x04\x06\0\x02\
    \x01\x12\x03\x10\x02G\x1a3\x20Returns\x20pipelines\x20(_wasm_bytes\x20fi\
    eld\x20is\x20stripped)\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x10\x06\
    \x12\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x10\x13&\n\x0c\n\x05\x06\0\
    \x02\x01\x03\x12\x03\x101E\nH\n\x04\x06\0\x02\x02\x12\x03\x13\x02D\x1a;\
    \x20Returns\x20a\x20single\x20pipeline\x20(_wasm_bytes\x20field\x20is\
    \x20stripped)\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\x13\x06\x11\n\x0c\
    \n\x05\x06\0\x02\x02\x02\x12\x03\x13\x12$\n\x0c\n\x05\x06\0\x02\x02\x03\
    \x12\x03\x13/B\nE\n\x04\x06\0\x02\x03\x12\x03\x16\x02M\x1a8\x20Create\
    \x20a\x20new\x20pipeline;\x20id\x20must\x20be\x20left\x20empty\x20on\x20\
    create\n\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03\x16\x06\x14\n\x0c\n\x05\
    \x06\0\x02\x03\x02\x12\x03\x16\x15*\n\x0c\n\x05\x06\0\x02\x03\x03\x12\
    \x03\x165K\n:\n\x04\x06\0\x02\x04\x12\x03\x19\x02N\x1a-\x20Update\x20an\
    \x20existing\x20pipeline;\x20id\x20must\x20be\x20set\n\n\x0c\n\x05\x06\0\
    \x02\x04\x01\x12\x03\x19\x06\x14\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03\
    \x19\x15*\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03\x195L\n\x20\n\x04\x06\0\
    \x02\x05\x12\x03\x1c\x02N\x1a\x13\x20Delete\x20a\x20pipeline\n\n\x0c\n\
    \x05\x06\0\x02\x05\x01\x12\x03\x1c\x06\x14\n\x0c\n\x05\x06\0\x02\x05\x02\
    \x12\x03\x1c\x15*\n\x0c\n\x05\x06\0\x02\x05\x03\x12\x03\x1c5L\n/\n\x04\
    \x06\0\x02\x06\x12\x03\x1f\x02N\x1a\"\x20Attach\x20a\x20pipeline\x20to\
    \x20an\x20audience\n\n\x0c\n\x05\x06\0\x02\x06\x01\x12\x03\x1f\x06\x14\n\
    \x0c\n\x05\x06\0\x02\x06\x02\x12\x03\x1f\x15*\n\x0c\n\x05\x06\0\x02\x06\
    \x03\x12\x03\x1f5L\n1\n\x04\x06\0\x02\x07\x12\x03\"\x02N\x1a$\x20Detach\
    \x20a\x20pipeline\x20from\x20an\x20audience\n\n\x0c\n\x05\x06\0\x02\x07\
    \x01\x12\x03\"\x06\x14\n\x0c\n\x05\x06\0\x02\x07\x02\x12\x03\"\x15*\n\
    \x0c\n\x05\x06\0\x02\x07\x03\x12\x03\"5L\nC\n\x04\x06\0\x02\x08\x12\x03%\
    \x02L\x1a6\x20Pause\x20a\x20pipeline;\x20noop\x20if\x20pipeline\x20is\
    \x20already\x20paused\n\n\x0c\n\x05\x06\0\x02\x08\x01\x12\x03%\x06\x13\n\
    \x0c\n\x05\x06\0\x02\x08\x02\x12\x03%\x14(\n\x0c\n\x05\x06\0\x02\x08\x03\
    \x12\x03%3J\n@\n\x04\x06\0\x02\t\x12\x03(\x02N\x1a3\x20Resume\x20a\x20pi\
    peline;\x20noop\x20if\x20pipeline\x20is\x20not\x20paused\n\n\x0c\n\x05\
    \x06\0\x02\t\x01\x12\x03(\x06\x14\n\x0c\n\x05\x06\0\x02\t\x02\x12\x03(\
    \x15*\n\x0c\n\x05\x06\0\x02\t\x03\x12\x03(5L\n\x0b\n\x04\x06\0\x02\n\x12\
    \x03*\x02V\n\x0c\n\x05\x06\0\x02\n\x01\x12\x03*\x06\x18\n\x0c\n\x05\x06\
    \0\x02\n\x02\x12\x03*\x192\n\x0c\n\x05\x06\0\x02\n\x03\x12\x03*=T\n\x0b\
    \n\x04\x06\0\x02\x0b\x12\x03+\x02V\n\x0c\n\x05\x06\0\x02\x0b\x01\x12\x03\
    +\x06\x18\n\x0c\n\x05\x06\0\x02\x0b\x02\x12\x03+\x192\n\x0c\n\x05\x06\0\
    \x02\x0b\x03\x12\x03+=T\n\x0b\n\x04\x06\0\x02\x0c\x12\x03,\x02V\n\x0c\n\
    \x05\x06\0\x02\x0c\x01\x12\x03,\x06\x18\n\x0c\n\x05\x06\0\x02\x0c\x02\
    \x12\x03,\x192\n\x0c\n\x05\x06\0\x02\x0c\x03\x12\x03,=T\n\x0b\n\x04\x06\
    \0\x02\r\x12\x03-\x02S\n\x0c\n\x05\x06\0\x02\r\x01\x12\x03-\x06\x16\n\
    \x0c\n\x05\x06\0\x02\r\x02\x12\x03-\x17.\n\x0c\n\x05\x06\0\x02\r\x03\x12\
    \x03-9Q\n\x0b\n\x04\x06\0\x02\x0e\x12\x03.\x02P\n\x0c\n\x05\x06\0\x02\
    \x0e\x01\x12\x03.\x06\x15\n\x0c\n\x05\x06\0\x02\x0e\x02\x12\x03.\x16,\n\
    \x0c\n\x05\x06\0\x02\x0e\x03\x12\x03.7N\n\x0b\n\x04\x06\0\x02\x0f\x12\
    \x03/\x02V\n\x0c\n\x05\x06\0\x02\x0f\x01\x12\x03/\x06\x18\n\x0c\n\x05\
    \x06\0\x02\x0f\x02\x12\x03/\x192\n\x0c\n\x05\x06\0\x02\x0f\x03\x12\x03/=\
    T\n\x0b\n\x04\x06\0\x02\x10\x12\x030\x02V\n\x0c\n\x05\x06\0\x02\x10\x01\
    \x12\x030\x06\x18\n\x0c\n\x05\x06\0\x02\x10\x02\x12\x030\x192\n\x0c\n\
    \x05\x06\0\x02\x10\x03\x12\x030=T\n\x1a\n\x04\x06\0\x02\x11\x12\x033\x02\
    /\x1a\r\x20Test\x20method\n\n\x0c\n\x05\x06\0\x02\x11\x01\x12\x033\x06\n\
    \n\x0c\n\x05\x06\0\x02\x11\x02\x12\x033\x0b\x16\n\x0c\n\x05\x06\0\x02\
    \x11\x03\x12\x033!-\n=\n\x02\x04\0\x12\x046\08\x01\"1\x20Don't\x20think\
    \x20there\x20is\x20anything\x20to\x20pass\x20in\x20(yet)?\n\n\n\n\x03\
    \x04\0\x01\x12\x036\x08\x15\n\n\n\x02\x04\x01\x12\x04:\0E\x01\n\n\n\x03\
    \x04\x01\x01\x12\x03:\x08\x16\n8\n\x04\x04\x01\x02\0\x12\x03<\x02$\x1a+\
    \x20Clients\x20currently\x20connected\x20to\x20the\x20server\n\n\x0c\n\
    \x05\x04\x01\x02\0\x04\x12\x03<\x02\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\
    \x03<\x0b\x1a\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03<\x1b\x1f\n\x0c\n\x05\
    \x04\x01\x02\0\x03\x12\x03<\"#\n@\n\x04\x04\x01\x02\x01\x12\x03?\x02)\
    \x1a3\x20All\x20of\x20the\x20audiences\x20that\x20are\x20known\x20to\x20\
    the\x20server\n\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03?\x02\n\n\x0c\n\
    \x05\x04\x01\x02\x01\x06\x12\x03?\x0b\x1a\n\x0c\n\x05\x04\x01\x02\x01\
    \x01\x12\x03?\x1b$\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03?'(\n\xbb\x01\
    \n\x04\x04\x01\x02\x02\x12\x03D\x022\x1a\xad\x01\x20All\x20of\x20the\x20\
    pipelines\x20known\x20to\x20the\x20server\x20+\x20pipeline\x20<->\x20aud\
    ience\x20mappings\n\x20key\x20==\x20pipeline_id;\x20if\x20\"Audience\"\
    \x20is\x20not\x20filled\x20out\x20-\x20pipeline\x20is\x20not\x20attached\
    \n\x20to\x20any\x20audience.\n\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03D\
    \x02#\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03D$-\n\x0c\n\x05\x04\x01\x02\
    \x02\x03\x12\x03D01\n/\n\x02\x04\x02\x12\x04G\0I\x01\"#\x20Don't\x20thin\
    k\x20we\x20need\x20anything\x20here\n\n\n\n\x03\x04\x02\x01\x12\x03G\x08\
    \x1b\n\n\n\x02\x04\x03\x12\x04K\0M\x01\n\n\n\x03\x04\x03\x01\x12\x03K\
    \x08\x1c\n\x0b\n\x04\x04\x03\x02\0\x12\x03L\x02)\n\x0c\n\x05\x04\x03\x02\
    \0\x04\x12\x03L\x02\n\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03L\x0b\x1a\n\
    \x0c\n\x05\x04\x03\x02\0\x01\x12\x03L\x1b$\n\x0c\n\x05\x04\x03\x02\0\x03\
    \x12\x03L'(\n\n\n\x02\x04\x04\x12\x04O\0Q\x01\n\n\n\x03\x04\x04\x01\x12\
    \x03O\x08\x1a\n\x0b\n\x04\x04\x04\x02\0\x12\x03P\x02\x19\n\x0c\n\x05\x04\
    \x04\x02\0\x05\x12\x03P\x02\x08\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03P\t\
    \x14\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03P\x17\x18\n\n\n\x02\x04\x05\
    \x12\x04S\0U\x01\n\n\n\x03\x04\x05\x01\x12\x03S\x08\x1b\n\x0b\n\x04\x04\
    \x05\x02\0\x12\x03T\x02\x1f\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x03T\x02\
    \x11\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03T\x12\x1a\n\x0c\n\x05\x04\x05\
    \x02\0\x03\x12\x03T\x1d\x1e\n\n\n\x02\x04\x06\x12\x04W\0Y\x01\n\n\n\x03\
    \x04\x06\x01\x12\x03W\x08\x1d\n\x0b\n\x04\x04\x06\x02\0\x12\x03X\x02\x1f\
    \n\x0c\n\x05\x04\x06\x02\0\x06\x12\x03X\x02\x11\n\x0c\n\x05\x04\x06\x02\
    \0\x01\x12\x03X\x12\x1a\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03X\x1d\x1e\n\
    \n\n\x02\x04\x07\x12\x04[\0^\x01\n\n\n\x03\x04\x07\x01\x12\x03[\x08\x1e\
    \n\x0b\n\x04\x04\x07\x02\0\x12\x03\\\x02\x15\n\x0c\n\x05\x04\x07\x02\0\
    \x05\x12\x03\\\x02\x08\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03\\\t\x10\n\
    \x0c\n\x05\x04\x07\x02\0\x03\x12\x03\\\x13\x14\n\x0b\n\x04\x04\x07\x02\
    \x01\x12\x03]\x02\x19\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\x03]\x02\x08\n\
    \x0c\n\x05\x04\x07\x02\x01\x01\x12\x03]\t\x14\n\x0c\n\x05\x04\x07\x02\
    \x01\x03\x12\x03]\x17\x18\n\n\n\x02\x04\x08\x12\x04`\0b\x01\n\n\n\x03\
    \x04\x08\x01\x12\x03`\x08\x1d\n\x0b\n\x04\x04\x08\x02\0\x12\x03a\x02\x1f\
    \n\x0c\n\x05\x04\x08\x02\0\x06\x12\x03a\x02\x11\n\x0c\n\x05\x04\x08\x02\
    \0\x01\x12\x03a\x12\x1a\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03a\x1d\x1e\n\
    \n\n\x02\x04\t\x12\x04d\0f\x01\n\n\n\x03\x04\t\x01\x12\x03d\x08\x1d\n\
    \x0b\n\x04\x04\t\x02\0\x12\x03e\x02\x19\n\x0c\n\x05\x04\t\x02\0\x05\x12\
    \x03e\x02\x08\n\x0c\n\x05\x04\t\x02\0\x01\x12\x03e\t\x14\n\x0c\n\x05\x04\
    \t\x02\0\x03\x12\x03e\x17\x18\n\n\n\x02\x04\n\x12\x04h\0k\x01\n\n\n\x03\
    \x04\n\x01\x12\x03h\x08\x1d\n\x0b\n\x04\x04\n\x02\0\x12\x03i\x02\x19\n\
    \x0c\n\x05\x04\n\x02\0\x05\x12\x03i\x02\x08\n\x0c\n\x05\x04\n\x02\0\x01\
    \x12\x03i\t\x14\n\x0c\n\x05\x04\n\x02\0\x03\x12\x03i\x17\x18\n\x0b\n\x04\
    \x04\n\x02\x01\x12\x03j\x02\x1f\n\x0c\n\x05\x04\n\x02\x01\x06\x12\x03j\
    \x02\x11\n\x0c\n\x05\x04\n\x02\x01\x01\x12\x03j\x12\x1a\n\x0c\n\x05\x04\
    \n\x02\x01\x03\x12\x03j\x1d\x1e\n\n\n\x02\x04\x0b\x12\x04m\0p\x01\n\n\n\
    \x03\x04\x0b\x01\x12\x03m\x08\x1d\n\x0b\n\x04\x04\x0b\x02\0\x12\x03n\x02\
    \x19\n\x0c\n\x05\x04\x0b\x02\0\x05\x12\x03n\x02\x08\n\x0c\n\x05\x04\x0b\
    \x02\0\x01\x12\x03n\t\x14\n\x0c\n\x05\x04\x0b\x02\0\x03\x12\x03n\x17\x18\
    \n\x0b\n\x04\x04\x0b\x02\x01\x12\x03o\x02\x1f\n\x0c\n\x05\x04\x0b\x02\
    \x01\x06\x12\x03o\x02\x11\n\x0c\n\x05\x04\x0b\x02\x01\x01\x12\x03o\x12\
    \x1a\n\x0c\n\x05\x04\x0b\x02\x01\x03\x12\x03o\x1d\x1e\n\n\n\x02\x04\x0c\
    \x12\x04r\0u\x01\n\n\n\x03\x04\x0c\x01\x12\x03r\x08\x1c\n\x0b\n\x04\x04\
    \x0c\x02\0\x12\x03s\x02\x19\n\x0c\n\x05\x04\x0c\x02\0\x05\x12\x03s\x02\
    \x08\n\x0c\n\x05\x04\x0c\x02\0\x01\x12\x03s\t\x14\n\x0c\n\x05\x04\x0c\
    \x02\0\x03\x12\x03s\x17\x18\n\x0b\n\x04\x04\x0c\x02\x01\x12\x03t\x02\x1f\
    \n\x0c\n\x05\x04\x0c\x02\x01\x06\x12\x03t\x02\x11\n\x0c\n\x05\x04\x0c\
    \x02\x01\x01\x12\x03t\x12\x1a\n\x0c\n\x05\x04\x0c\x02\x01\x03\x12\x03t\
    \x1d\x1e\n\n\n\x02\x04\r\x12\x04w\0z\x01\n\n\n\x03\x04\r\x01\x12\x03w\
    \x08\x1d\n\x0b\n\x04\x04\r\x02\0\x12\x03x\x02\x19\n\x0c\n\x05\x04\r\x02\
    \0\x05\x12\x03x\x02\x08\n\x0c\n\x05\x04\r\x02\0\x01\x12\x03x\t\x14\n\x0c\
    \n\x05\x04\r\x02\0\x03\x12\x03x\x17\x18\n\x0b\n\x04\x04\r\x02\x01\x12\
    \x03y\x02\x1f\n\x0c\n\x05\x04\r\x02\x01\x06\x12\x03y\x02\x11\n\x0c\n\x05\
    \x04\r\x02\x01\x01\x12\x03y\x12\x1a\n\x0c\n\x05\x04\r\x02\x01\x03\x12\
    \x03y\x1d\x1e\n\x1b\n\x02\x04\x0e\x12\x04}\0\x7f\x01\x1a\x0f\x20Notifica\
    tions\n\n\n\n\x03\x04\x0e\x01\x12\x03}\x08!\n\x0b\n\x04\x04\x0e\x02\0\
    \x12\x03~\x02-\n\x0c\n\x05\x04\x0e\x02\0\x06\x12\x03~\x02\x1b\n\x0c\n\
    \x05\x04\x0e\x02\0\x01\x12\x03~\x1c(\n\x0c\n\x05\x04\x0e\x02\0\x03\x12\
    \x03~+,\n\x0c\n\x02\x04\x0f\x12\x06\x81\x01\0\x83\x01\x01\n\x0b\n\x03\
    \x04\x0f\x01\x12\x04\x81\x01\x08!\n\x0c\n\x04\x04\x0f\x02\0\x12\x04\x82\
    \x01\x02-\n\r\n\x05\x04\x0f\x02\0\x06\x12\x04\x82\x01\x02\x1b\n\r\n\x05\
    \x04\x0f\x02\0\x01\x12\x04\x82\x01\x1c(\n\r\n\x05\x04\x0f\x02\0\x03\x12\
    \x04\x82\x01+,\n\x0c\n\x02\x04\x10\x12\x06\x85\x01\0\x87\x01\x01\n\x0b\n\
    \x03\x04\x10\x01\x12\x04\x85\x01\x08!\n\x0c\n\x04\x04\x10\x02\0\x12\x04\
    \x86\x01\x02\x1d\n\r\n\x05\x04\x10\x02\0\x05\x12\x04\x86\x01\x02\x08\n\r\
    \n\x05\x04\x10\x02\0\x01\x12\x04\x86\x01\t\x18\n\r\n\x05\x04\x10\x02\0\
    \x03\x12\x04\x86\x01\x1b\x1c\n1\n\x02\x04\x11\x12\x06\x89\x01\0\x8b\x01\
    \x01\"#\x20Don't\x20think\x20we\x20need\x20anything\x20here\n\n\x0b\n\
    \x03\x04\x11\x01\x12\x04\x89\x01\x08\x1f\n\x0c\n\x02\x04\x12\x12\x06\x8d\
    \x01\0\x8f\x01\x01\n\x0b\n\x03\x04\x12\x01\x12\x04\x8d\x01\x08\x20\n\x0c\
    \n\x04\x04\x12\x02\0\x12\x04\x8e\x01\x02:\n\r\n\x05\x04\x12\x02\0\x06\
    \x12\x04\x8e\x01\x02'\n\r\n\x05\x04\x12\x02\0\x01\x12\x04\x8e\x01(5\n\r\
    \n\x05\x04\x12\x02\0\x03\x12\x04\x8e\x0189\n\x0c\n\x02\x04\x13\x12\x06\
    \x91\x01\0\x93\x01\x01\n\x0b\n\x03\x04\x13\x01\x12\x04\x91\x01\x08\x1e\n\
    \x0c\n\x04\x04\x13\x02\0\x12\x04\x92\x01\x02\x1d\n\r\n\x05\x04\x13\x02\0\
    \x05\x12\x04\x92\x01\x02\x08\n\r\n\x05\x04\x13\x02\0\x01\x12\x04\x92\x01\
    \t\x18\n\r\n\x05\x04\x13\x02\0\x03\x12\x04\x92\x01\x1b\x1c\n\x0c\n\x02\
    \x04\x14\x12\x06\x95\x01\0\x97\x01\x01\n\x0b\n\x03\x04\x14\x01\x12\x04\
    \x95\x01\x08\x1f\n\x0c\n\x04\x04\x14\x02\0\x12\x04\x96\x01\x02-\n\r\n\
    \x05\x04\x14\x02\0\x06\x12\x04\x96\x01\x02\x1b\n\r\n\x05\x04\x14\x02\0\
    \x01\x12\x04\x96\x01\x1c(\n\r\n\x05\x04\x14\x02\0\x03\x12\x04\x96\x01+,\
    \n\x0c\n\x02\x04\x15\x12\x06\x99\x01\0\x9c\x01\x01\n\x0b\n\x03\x04\x15\
    \x01\x12\x04\x99\x01\x08!\n\x0c\n\x04\x04\x15\x02\0\x12\x04\x9a\x01\x02\
    \x1d\n\r\n\x05\x04\x15\x02\0\x05\x12\x04\x9a\x01\x02\x08\n\r\n\x05\x04\
    \x15\x02\0\x01\x12\x04\x9a\x01\t\x18\n\r\n\x05\x04\x15\x02\0\x03\x12\x04\
    \x9a\x01\x1b\x1c\n\x0c\n\x04\x04\x15\x02\x01\x12\x04\x9b\x01\x02\x19\n\r\
    \n\x05\x04\x15\x02\x01\x05\x12\x04\x9b\x01\x02\x08\n\r\n\x05\x04\x15\x02\
    \x01\x01\x12\x04\x9b\x01\t\x14\n\r\n\x05\x04\x15\x02\x01\x03\x12\x04\x9b\
    \x01\x17\x18\n\x0c\n\x02\x04\x16\x12\x06\x9e\x01\0\xa1\x01\x01\n\x0b\n\
    \x03\x04\x16\x01\x12\x04\x9e\x01\x08!\n\x0c\n\x04\x04\x16\x02\0\x12\x04\
    \x9f\x01\x02\x1d\n\r\n\x05\x04\x16\x02\0\x05\x12\x04\x9f\x01\x02\x08\n\r\
    \n\x05\x04\x16\x02\0\x01\x12\x04\x9f\x01\t\x18\n\r\n\x05\x04\x16\x02\0\
    \x03\x12\x04\x9f\x01\x1b\x1c\n\x0c\n\x04\x04\x16\x02\x01\x12\x04\xa0\x01\
    \x02\x19\n\r\n\x05\x04\x16\x02\x01\x05\x12\x04\xa0\x01\x02\x08\n\r\n\x05\
    \x04\x16\x02\x01\x01\x12\x04\xa0\x01\t\x14\n\r\n\x05\x04\x16\x02\x01\x03\
    \x12\x04\xa0\x01\x17\x18\n\x0c\n\x02\x04\x17\x12\x06\xa3\x01\0\xa5\x01\
    \x01\n\x0b\n\x03\x04\x17\x01\x12\x04\xa3\x01\x08\x13\n\x0c\n\x04\x04\x17\
    \x02\0\x12\x04\xa4\x01\x02\x13\n\r\n\x05\x04\x17\x02\0\x05\x12\x04\xa4\
    \x01\x02\x08\n\r\n\x05\x04\x17\x02\0\x01\x12\x04\xa4\x01\t\x0e\n\r\n\x05\
    \x04\x17\x02\0\x03\x12\x04\xa4\x01\x11\x12\n\x0c\n\x02\x04\x18\x12\x06\
    \xa7\x01\0\xa9\x01\x01\n\x0b\n\x03\x04\x18\x01\x12\x04\xa7\x01\x08\x14\n\
    \x0c\n\x04\x04\x18\x02\0\x12\x04\xa8\x01\x02\x14\n\r\n\x05\x04\x18\x02\0\
    \x05\x12\x04\xa8\x01\x02\x08\n\r\n\x05\x04\x18\x02\0\x01\x12\x04\xa8\x01\
    \t\x0f\n\r\n\x05\x04\x18\x02\0\x03\x12\x04\xa8\x01\x12\x13b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::common::file_descriptor().clone());
            deps.push(super::info::file_descriptor().clone());
            deps.push(super::notify::file_descriptor().clone());
            deps.push(super::pipeline::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(25);
            messages.push(GetAllRequest::generated_message_descriptor_data());
            messages.push(GetAllResponse::generated_message_descriptor_data());
            messages.push(GetPipelinesRequest::generated_message_descriptor_data());
            messages.push(GetPipelinesResponse::generated_message_descriptor_data());
            messages.push(GetPipelineRequest::generated_message_descriptor_data());
            messages.push(GetPipelineResponse::generated_message_descriptor_data());
            messages.push(CreatePipelineRequest::generated_message_descriptor_data());
            messages.push(CreatePipelineResponse::generated_message_descriptor_data());
            messages.push(UpdatePipelineRequest::generated_message_descriptor_data());
            messages.push(DeletePipelineRequest::generated_message_descriptor_data());
            messages.push(AttachPipelineRequest::generated_message_descriptor_data());
            messages.push(DetachPipelineRequest::generated_message_descriptor_data());
            messages.push(PausePipelineRequest::generated_message_descriptor_data());
            messages.push(ResumePipelineRequest::generated_message_descriptor_data());
            messages.push(CreateNotificationRequest::generated_message_descriptor_data());
            messages.push(UpdateNotificationRequest::generated_message_descriptor_data());
            messages.push(DeleteNotificationRequest::generated_message_descriptor_data());
            messages.push(GetNotificationsRequest::generated_message_descriptor_data());
            messages.push(GetNotificationsResponse::generated_message_descriptor_data());
            messages.push(GetNotificationRequest::generated_message_descriptor_data());
            messages.push(GetNotificationResponse::generated_message_descriptor_data());
            messages.push(AttachNotificationRequest::generated_message_descriptor_data());
            messages.push(DetachNotificationRequest::generated_message_descriptor_data());
            messages.push(TestRequest::generated_message_descriptor_data());
            messages.push(TestResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
