// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `grpc_internal.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

///  Each consumer and producer should send periodic heartbeats to the server
///  to let the server know that they are still active.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.HeartbeatRequest)
pub struct HeartbeatRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.HeartbeatRequest.auth)
    pub auth: ::protobuf::MessageField<super::common::Auth>,
    // @@protoc_insertion_point(field:protos.HeartbeatRequest.audience)
    pub audience: ::protobuf::MessageField<Audience>,
    // @@protoc_insertion_point(field:protos.HeartbeatRequest.last_activity_unix_timestamp_utc)
    pub last_activity_unix_timestamp_utc: i64,
    ///  Correlation ID between requests and responses. If not set, server will set
    ///  a unique ID and use it in response.
    // @@protoc_insertion_point(field:protos.HeartbeatRequest._id)
    pub _id: ::std::string::String,
    // @@protoc_insertion_point(field:protos.HeartbeatRequest._sdk_metadata)
    pub _sdk_metadata: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.HeartbeatRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HeartbeatRequest {
    fn default() -> &'a HeartbeatRequest {
        <HeartbeatRequest as ::protobuf::Message>::default_instance()
    }
}

impl HeartbeatRequest {
    pub fn new() -> HeartbeatRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::Auth>(
            "auth",
            |m: &HeartbeatRequest| { &m.auth },
            |m: &mut HeartbeatRequest| { &mut m.auth },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Audience>(
            "audience",
            |m: &HeartbeatRequest| { &m.audience },
            |m: &mut HeartbeatRequest| { &mut m.audience },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "last_activity_unix_timestamp_utc",
            |m: &HeartbeatRequest| { &m.last_activity_unix_timestamp_utc },
            |m: &mut HeartbeatRequest| { &mut m.last_activity_unix_timestamp_utc },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "_id",
            |m: &HeartbeatRequest| { &m._id },
            |m: &mut HeartbeatRequest| { &mut m._id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "_sdk_metadata",
            |m: &HeartbeatRequest| { &m._sdk_metadata },
            |m: &mut HeartbeatRequest| { &mut m._sdk_metadata },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HeartbeatRequest>(
            "HeartbeatRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HeartbeatRequest {
    const NAME: &'static str = "HeartbeatRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.auth)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.audience)?;
                },
                24 => {
                    self.last_activity_unix_timestamp_utc = is.read_int64()?;
                },
                802 => {
                    self._id = is.read_string()?;
                },
                810 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self._sdk_metadata.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.auth.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.audience.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.last_activity_unix_timestamp_utc != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.last_activity_unix_timestamp_utc);
        }
        if !self._id.is_empty() {
            my_size += ::protobuf::rt::string_size(100, &self._id);
        }
        for (k, v) in &self._sdk_metadata {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.auth.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.audience.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if self.last_activity_unix_timestamp_utc != 0 {
            os.write_int64(3, self.last_activity_unix_timestamp_utc)?;
        }
        if !self._id.is_empty() {
            os.write_string(100, &self._id)?;
        }
        for (k, v) in &self._sdk_metadata {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(810)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HeartbeatRequest {
        HeartbeatRequest::new()
    }

    fn clear(&mut self) {
        self.auth.clear();
        self.audience.clear();
        self.last_activity_unix_timestamp_utc = 0;
        self._id.clear();
        self._sdk_metadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HeartbeatRequest {
        static instance: ::protobuf::rt::Lazy<HeartbeatRequest> = ::protobuf::rt::Lazy::new();
        instance.get(HeartbeatRequest::new)
    }
}

impl ::protobuf::MessageFull for HeartbeatRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HeartbeatRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HeartbeatRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HeartbeatRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.NotifyRequest)
pub struct NotifyRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.NotifyRequest.auth)
    pub auth: ::protobuf::MessageField<super::common::Auth>,
    // @@protoc_insertion_point(field:protos.NotifyRequest.rule_id)
    pub rule_id: ::std::string::String,
    // @@protoc_insertion_point(field:protos.NotifyRequest.rule_name)
    pub rule_name: ::std::string::String,
    // @@protoc_insertion_point(field:protos.NotifyRequest.audience)
    pub audience: ::protobuf::MessageField<Audience>,
    // @@protoc_insertion_point(field:protos.NotifyRequest.occurred_at_unix_ts_utc)
    pub occurred_at_unix_ts_utc: i64,
    // @@protoc_insertion_point(field:protos.NotifyRequest._id)
    pub _id: ::std::string::String,
    // @@protoc_insertion_point(field:protos.NotifyRequest._sdk_metadata)
    pub _sdk_metadata: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.NotifyRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NotifyRequest {
    fn default() -> &'a NotifyRequest {
        <NotifyRequest as ::protobuf::Message>::default_instance()
    }
}

impl NotifyRequest {
    pub fn new() -> NotifyRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::Auth>(
            "auth",
            |m: &NotifyRequest| { &m.auth },
            |m: &mut NotifyRequest| { &mut m.auth },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rule_id",
            |m: &NotifyRequest| { &m.rule_id },
            |m: &mut NotifyRequest| { &mut m.rule_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rule_name",
            |m: &NotifyRequest| { &m.rule_name },
            |m: &mut NotifyRequest| { &mut m.rule_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Audience>(
            "audience",
            |m: &NotifyRequest| { &m.audience },
            |m: &mut NotifyRequest| { &mut m.audience },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "occurred_at_unix_ts_utc",
            |m: &NotifyRequest| { &m.occurred_at_unix_ts_utc },
            |m: &mut NotifyRequest| { &mut m.occurred_at_unix_ts_utc },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "_id",
            |m: &NotifyRequest| { &m._id },
            |m: &mut NotifyRequest| { &mut m._id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "_sdk_metadata",
            |m: &NotifyRequest| { &m._sdk_metadata },
            |m: &mut NotifyRequest| { &mut m._sdk_metadata },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NotifyRequest>(
            "NotifyRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NotifyRequest {
    const NAME: &'static str = "NotifyRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.auth)?;
                },
                18 => {
                    self.rule_id = is.read_string()?;
                },
                26 => {
                    self.rule_name = is.read_string()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.audience)?;
                },
                40 => {
                    self.occurred_at_unix_ts_utc = is.read_int64()?;
                },
                802 => {
                    self._id = is.read_string()?;
                },
                810 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self._sdk_metadata.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.auth.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.rule_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.rule_id);
        }
        if !self.rule_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.rule_name);
        }
        if let Some(v) = self.audience.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.occurred_at_unix_ts_utc != 0 {
            my_size += ::protobuf::rt::int64_size(5, self.occurred_at_unix_ts_utc);
        }
        if !self._id.is_empty() {
            my_size += ::protobuf::rt::string_size(100, &self._id);
        }
        for (k, v) in &self._sdk_metadata {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.auth.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.rule_id.is_empty() {
            os.write_string(2, &self.rule_id)?;
        }
        if !self.rule_name.is_empty() {
            os.write_string(3, &self.rule_name)?;
        }
        if let Some(v) = self.audience.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if self.occurred_at_unix_ts_utc != 0 {
            os.write_int64(5, self.occurred_at_unix_ts_utc)?;
        }
        if !self._id.is_empty() {
            os.write_string(100, &self._id)?;
        }
        for (k, v) in &self._sdk_metadata {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(810)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NotifyRequest {
        NotifyRequest::new()
    }

    fn clear(&mut self) {
        self.auth.clear();
        self.rule_id.clear();
        self.rule_name.clear();
        self.audience.clear();
        self.occurred_at_unix_ts_utc = 0;
        self._id.clear();
        self._sdk_metadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NotifyRequest {
        static instance: ::protobuf::rt::Lazy<NotifyRequest> = ::protobuf::rt::Lazy::new();
        instance.get(NotifyRequest::new)
    }
}

impl ::protobuf::MessageFull for NotifyRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NotifyRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NotifyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NotifyRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.MetricsRequest)
pub struct MetricsRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.MetricsRequest.auth)
    pub auth: ::protobuf::MessageField<super::common::Auth>,
    // @@protoc_insertion_point(field:protos.MetricsRequest.rule_id)
    pub rule_id: ::std::string::String,
    // @@protoc_insertion_point(field:protos.MetricsRequest.rule_name)
    pub rule_name: ::std::string::String,
    // @@protoc_insertion_point(field:protos.MetricsRequest.audience)
    pub audience: ::protobuf::MessageField<Audience>,
    // @@protoc_insertion_point(field:protos.MetricsRequest._id)
    pub _id: ::std::string::String,
    // @@protoc_insertion_point(field:protos.MetricsRequest._sdk_metadata)
    pub _sdk_metadata: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.MetricsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MetricsRequest {
    fn default() -> &'a MetricsRequest {
        <MetricsRequest as ::protobuf::Message>::default_instance()
    }
}

impl MetricsRequest {
    pub fn new() -> MetricsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::Auth>(
            "auth",
            |m: &MetricsRequest| { &m.auth },
            |m: &mut MetricsRequest| { &mut m.auth },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rule_id",
            |m: &MetricsRequest| { &m.rule_id },
            |m: &mut MetricsRequest| { &mut m.rule_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rule_name",
            |m: &MetricsRequest| { &m.rule_name },
            |m: &mut MetricsRequest| { &mut m.rule_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Audience>(
            "audience",
            |m: &MetricsRequest| { &m.audience },
            |m: &mut MetricsRequest| { &mut m.audience },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "_id",
            |m: &MetricsRequest| { &m._id },
            |m: &mut MetricsRequest| { &mut m._id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "_sdk_metadata",
            |m: &MetricsRequest| { &m._sdk_metadata },
            |m: &mut MetricsRequest| { &mut m._sdk_metadata },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MetricsRequest>(
            "MetricsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MetricsRequest {
    const NAME: &'static str = "MetricsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.auth)?;
                },
                18 => {
                    self.rule_id = is.read_string()?;
                },
                26 => {
                    self.rule_name = is.read_string()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.audience)?;
                },
                802 => {
                    self._id = is.read_string()?;
                },
                810 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self._sdk_metadata.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.auth.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.rule_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.rule_id);
        }
        if !self.rule_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.rule_name);
        }
        if let Some(v) = self.audience.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self._id.is_empty() {
            my_size += ::protobuf::rt::string_size(100, &self._id);
        }
        for (k, v) in &self._sdk_metadata {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.auth.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.rule_id.is_empty() {
            os.write_string(2, &self.rule_id)?;
        }
        if !self.rule_name.is_empty() {
            os.write_string(3, &self.rule_name)?;
        }
        if let Some(v) = self.audience.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if !self._id.is_empty() {
            os.write_string(100, &self._id)?;
        }
        for (k, v) in &self._sdk_metadata {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(810)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MetricsRequest {
        MetricsRequest::new()
    }

    fn clear(&mut self) {
        self.auth.clear();
        self.rule_id.clear();
        self.rule_name.clear();
        self.audience.clear();
        self._id.clear();
        self._sdk_metadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MetricsRequest {
        static instance: ::protobuf::rt::Lazy<MetricsRequest> = ::protobuf::rt::Lazy::new();
        instance.get(MetricsRequest::new)
    }
}

impl ::protobuf::MessageFull for MetricsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MetricsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MetricsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.RegisterRequest)
pub struct RegisterRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.RegisterRequest.auth)
    pub auth: ::protobuf::MessageField<super::common::Auth>,
    // @@protoc_insertion_point(field:protos.RegisterRequest.service_name)
    pub service_name: ::std::string::String,
    ///  If set, we know that any pipelines or steps executed in this SDK will NOT
    ///  modify the input/output data. As in, the SDK will log what it _would_ do
    ///  and always return the original data set.
    // @@protoc_insertion_point(field:protos.RegisterRequest.dry_run)
    pub dry_run: bool,
    // @@protoc_insertion_point(field:protos.RegisterRequest._id)
    pub _id: ::std::string::String,
    // @@protoc_insertion_point(field:protos.RegisterRequest._sdk_metadata)
    pub _sdk_metadata: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.RegisterRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RegisterRequest {
    fn default() -> &'a RegisterRequest {
        <RegisterRequest as ::protobuf::Message>::default_instance()
    }
}

impl RegisterRequest {
    pub fn new() -> RegisterRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::Auth>(
            "auth",
            |m: &RegisterRequest| { &m.auth },
            |m: &mut RegisterRequest| { &mut m.auth },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "service_name",
            |m: &RegisterRequest| { &m.service_name },
            |m: &mut RegisterRequest| { &mut m.service_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "dry_run",
            |m: &RegisterRequest| { &m.dry_run },
            |m: &mut RegisterRequest| { &mut m.dry_run },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "_id",
            |m: &RegisterRequest| { &m._id },
            |m: &mut RegisterRequest| { &mut m._id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "_sdk_metadata",
            |m: &RegisterRequest| { &m._sdk_metadata },
            |m: &mut RegisterRequest| { &mut m._sdk_metadata },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RegisterRequest>(
            "RegisterRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RegisterRequest {
    const NAME: &'static str = "RegisterRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.auth)?;
                },
                18 => {
                    self.service_name = is.read_string()?;
                },
                24 => {
                    self.dry_run = is.read_bool()?;
                },
                802 => {
                    self._id = is.read_string()?;
                },
                810 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self._sdk_metadata.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.auth.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.service_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.service_name);
        }
        if self.dry_run != false {
            my_size += 1 + 1;
        }
        if !self._id.is_empty() {
            my_size += ::protobuf::rt::string_size(100, &self._id);
        }
        for (k, v) in &self._sdk_metadata {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.auth.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.service_name.is_empty() {
            os.write_string(2, &self.service_name)?;
        }
        if self.dry_run != false {
            os.write_bool(3, self.dry_run)?;
        }
        if !self._id.is_empty() {
            os.write_string(100, &self._id)?;
        }
        for (k, v) in &self._sdk_metadata {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(810)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RegisterRequest {
        RegisterRequest::new()
    }

    fn clear(&mut self) {
        self.auth.clear();
        self.service_name.clear();
        self.dry_run = false;
        self._id.clear();
        self._sdk_metadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RegisterRequest {
        static instance: ::protobuf::rt::Lazy<RegisterRequest> = ::protobuf::rt::Lazy::new();
        instance.get(RegisterRequest::new)
    }
}

impl ::protobuf::MessageFull for RegisterRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RegisterRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RegisterRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisterRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  The primary method to send commands to the SDK; server will send zero or more
///  RegisterResponse's with SetPipelineRequest on SDK instantiation.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.RegisterResponse)
pub struct RegisterResponse {
    // message fields
    ///  Use this to determine what to expect in one_of
    // @@protoc_insertion_point(field:protos.RegisterResponse.type)
    pub type_: ::protobuf::EnumOrUnknown<CommandType>,
    ///  Who is this command intended for?
    // @@protoc_insertion_point(field:protos.RegisterResponse.audience)
    pub audience: ::protobuf::MessageField<Audience>,
    // message oneof groups
    pub command: ::std::option::Option<register_response::Command>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.RegisterResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RegisterResponse {
    fn default() -> &'a RegisterResponse {
        <RegisterResponse as ::protobuf::Message>::default_instance()
    }
}

impl RegisterResponse {
    pub fn new() -> RegisterResponse {
        ::std::default::Default::default()
    }

    // .protos.SetPipelineCommand set_pipeline = 100;

    pub fn set_pipeline(&self) -> &super::pipeline::SetPipelineCommand {
        match self.command {
            ::std::option::Option::Some(register_response::Command::SetPipeline(ref v)) => v,
            _ => <super::pipeline::SetPipelineCommand as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_set_pipeline(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_set_pipeline(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(register_response::Command::SetPipeline(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_set_pipeline(&mut self, v: super::pipeline::SetPipelineCommand) {
        self.command = ::std::option::Option::Some(register_response::Command::SetPipeline(v))
    }

    // Mutable pointer to the field.
    pub fn mut_set_pipeline(&mut self) -> &mut super::pipeline::SetPipelineCommand {
        if let ::std::option::Option::Some(register_response::Command::SetPipeline(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(register_response::Command::SetPipeline(super::pipeline::SetPipelineCommand::new()));
        }
        match self.command {
            ::std::option::Option::Some(register_response::Command::SetPipeline(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_set_pipeline(&mut self) -> super::pipeline::SetPipelineCommand {
        if self.has_set_pipeline() {
            match self.command.take() {
                ::std::option::Option::Some(register_response::Command::SetPipeline(v)) => v,
                _ => panic!(),
            }
        } else {
            super::pipeline::SetPipelineCommand::new()
        }
    }

    // .protos.DeletePipelineCommand delete_pipeline = 101;

    pub fn delete_pipeline(&self) -> &super::pipeline::DeletePipelineCommand {
        match self.command {
            ::std::option::Option::Some(register_response::Command::DeletePipeline(ref v)) => v,
            _ => <super::pipeline::DeletePipelineCommand as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_delete_pipeline(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_delete_pipeline(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(register_response::Command::DeletePipeline(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_delete_pipeline(&mut self, v: super::pipeline::DeletePipelineCommand) {
        self.command = ::std::option::Option::Some(register_response::Command::DeletePipeline(v))
    }

    // Mutable pointer to the field.
    pub fn mut_delete_pipeline(&mut self) -> &mut super::pipeline::DeletePipelineCommand {
        if let ::std::option::Option::Some(register_response::Command::DeletePipeline(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(register_response::Command::DeletePipeline(super::pipeline::DeletePipelineCommand::new()));
        }
        match self.command {
            ::std::option::Option::Some(register_response::Command::DeletePipeline(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_delete_pipeline(&mut self) -> super::pipeline::DeletePipelineCommand {
        if self.has_delete_pipeline() {
            match self.command.take() {
                ::std::option::Option::Some(register_response::Command::DeletePipeline(v)) => v,
                _ => panic!(),
            }
        } else {
            super::pipeline::DeletePipelineCommand::new()
        }
    }

    // .protos.PausePipelineCommand pause_pipeline = 102;

    pub fn pause_pipeline(&self) -> &super::pipeline::PausePipelineCommand {
        match self.command {
            ::std::option::Option::Some(register_response::Command::PausePipeline(ref v)) => v,
            _ => <super::pipeline::PausePipelineCommand as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_pause_pipeline(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_pause_pipeline(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(register_response::Command::PausePipeline(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_pause_pipeline(&mut self, v: super::pipeline::PausePipelineCommand) {
        self.command = ::std::option::Option::Some(register_response::Command::PausePipeline(v))
    }

    // Mutable pointer to the field.
    pub fn mut_pause_pipeline(&mut self) -> &mut super::pipeline::PausePipelineCommand {
        if let ::std::option::Option::Some(register_response::Command::PausePipeline(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(register_response::Command::PausePipeline(super::pipeline::PausePipelineCommand::new()));
        }
        match self.command {
            ::std::option::Option::Some(register_response::Command::PausePipeline(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_pause_pipeline(&mut self) -> super::pipeline::PausePipelineCommand {
        if self.has_pause_pipeline() {
            match self.command.take() {
                ::std::option::Option::Some(register_response::Command::PausePipeline(v)) => v,
                _ => panic!(),
            }
        } else {
            super::pipeline::PausePipelineCommand::new()
        }
    }

    // .protos.UnpausePipelineCommand unpause_pipeline = 103;

    pub fn unpause_pipeline(&self) -> &super::pipeline::UnpausePipelineCommand {
        match self.command {
            ::std::option::Option::Some(register_response::Command::UnpausePipeline(ref v)) => v,
            _ => <super::pipeline::UnpausePipelineCommand as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_unpause_pipeline(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_unpause_pipeline(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(register_response::Command::UnpausePipeline(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_unpause_pipeline(&mut self, v: super::pipeline::UnpausePipelineCommand) {
        self.command = ::std::option::Option::Some(register_response::Command::UnpausePipeline(v))
    }

    // Mutable pointer to the field.
    pub fn mut_unpause_pipeline(&mut self) -> &mut super::pipeline::UnpausePipelineCommand {
        if let ::std::option::Option::Some(register_response::Command::UnpausePipeline(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(register_response::Command::UnpausePipeline(super::pipeline::UnpausePipelineCommand::new()));
        }
        match self.command {
            ::std::option::Option::Some(register_response::Command::UnpausePipeline(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_unpause_pipeline(&mut self) -> super::pipeline::UnpausePipelineCommand {
        if self.has_unpause_pipeline() {
            match self.command.take() {
                ::std::option::Option::Some(register_response::Command::UnpausePipeline(v)) => v,
                _ => panic!(),
            }
        } else {
            super::pipeline::UnpausePipelineCommand::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &RegisterResponse| { &m.type_ },
            |m: &mut RegisterResponse| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Audience>(
            "audience",
            |m: &RegisterResponse| { &m.audience },
            |m: &mut RegisterResponse| { &mut m.audience },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::pipeline::SetPipelineCommand>(
            "set_pipeline",
            RegisterResponse::has_set_pipeline,
            RegisterResponse::set_pipeline,
            RegisterResponse::mut_set_pipeline,
            RegisterResponse::set_set_pipeline,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::pipeline::DeletePipelineCommand>(
            "delete_pipeline",
            RegisterResponse::has_delete_pipeline,
            RegisterResponse::delete_pipeline,
            RegisterResponse::mut_delete_pipeline,
            RegisterResponse::set_delete_pipeline,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::pipeline::PausePipelineCommand>(
            "pause_pipeline",
            RegisterResponse::has_pause_pipeline,
            RegisterResponse::pause_pipeline,
            RegisterResponse::mut_pause_pipeline,
            RegisterResponse::set_pause_pipeline,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::pipeline::UnpausePipelineCommand>(
            "unpause_pipeline",
            RegisterResponse::has_unpause_pipeline,
            RegisterResponse::unpause_pipeline,
            RegisterResponse::mut_unpause_pipeline,
            RegisterResponse::set_unpause_pipeline,
        ));
        oneofs.push(register_response::Command::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RegisterResponse>(
            "RegisterResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RegisterResponse {
    const NAME: &'static str = "RegisterResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.audience)?;
                },
                802 => {
                    self.command = ::std::option::Option::Some(register_response::Command::SetPipeline(is.read_message()?));
                },
                810 => {
                    self.command = ::std::option::Option::Some(register_response::Command::DeletePipeline(is.read_message()?));
                },
                818 => {
                    self.command = ::std::option::Option::Some(register_response::Command::PausePipeline(is.read_message()?));
                },
                826 => {
                    self.command = ::std::option::Option::Some(register_response::Command::UnpausePipeline(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(CommandType::SNITCH_COMMAND_TYPE_UNSET) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if let Some(v) = self.audience.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.command {
            match v {
                &register_response::Command::SetPipeline(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &register_response::Command::DeletePipeline(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &register_response::Command::PausePipeline(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &register_response::Command::UnpausePipeline(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(CommandType::SNITCH_COMMAND_TYPE_UNSET) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if let Some(v) = self.audience.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.command {
            match v {
                &register_response::Command::SetPipeline(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(100, v, os)?;
                },
                &register_response::Command::DeletePipeline(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(101, v, os)?;
                },
                &register_response::Command::PausePipeline(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(102, v, os)?;
                },
                &register_response::Command::UnpausePipeline(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(103, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RegisterResponse {
        RegisterResponse::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(CommandType::SNITCH_COMMAND_TYPE_UNSET);
        self.audience.clear();
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RegisterResponse {
        static instance: RegisterResponse = RegisterResponse {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            audience: ::protobuf::MessageField::none(),
            command: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RegisterResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RegisterResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RegisterResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisterResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `RegisterResponse`
pub mod register_response {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:protos.RegisterResponse.command)
    pub enum Command {
        // @@protoc_insertion_point(oneof_field:protos.RegisterResponse.set_pipeline)
        SetPipeline(super::super::pipeline::SetPipelineCommand),
        // @@protoc_insertion_point(oneof_field:protos.RegisterResponse.delete_pipeline)
        DeletePipeline(super::super::pipeline::DeletePipelineCommand),
        // @@protoc_insertion_point(oneof_field:protos.RegisterResponse.pause_pipeline)
        PausePipeline(super::super::pipeline::PausePipelineCommand),
        // @@protoc_insertion_point(oneof_field:protos.RegisterResponse.unpause_pipeline)
        UnpausePipeline(super::super::pipeline::UnpausePipelineCommand),
    }

    impl ::protobuf::Oneof for Command {
    }

    impl ::protobuf::OneofFull for Command {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::RegisterResponse as ::protobuf::MessageFull>::descriptor().oneof_by_name("command").unwrap()).clone()
        }
    }

    impl Command {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Command>("command")
        }
    }
}

///  Used to indicate who a request/command is intended for
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.Audience)
pub struct Audience {
    // message fields
    ///  Name of the service
    // @@protoc_insertion_point(field:protos.Audience.service_name)
    pub service_name: ::std::string::String,
    ///  Name of the component the SDK is interacting with (ie. kafka-$topic-name)
    // @@protoc_insertion_point(field:protos.Audience.component_name)
    pub component_name: ::std::string::String,
    ///  Consumer or Producer
    // @@protoc_insertion_point(field:protos.Audience.operation_type)
    pub operation_type: ::protobuf::EnumOrUnknown<OperationType>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.Audience.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Audience {
    fn default() -> &'a Audience {
        <Audience as ::protobuf::Message>::default_instance()
    }
}

impl Audience {
    pub fn new() -> Audience {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "service_name",
            |m: &Audience| { &m.service_name },
            |m: &mut Audience| { &mut m.service_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "component_name",
            |m: &Audience| { &m.component_name },
            |m: &mut Audience| { &mut m.component_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "operation_type",
            |m: &Audience| { &m.operation_type },
            |m: &mut Audience| { &mut m.operation_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Audience>(
            "Audience",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Audience {
    const NAME: &'static str = "Audience";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.service_name = is.read_string()?;
                },
                18 => {
                    self.component_name = is.read_string()?;
                },
                24 => {
                    self.operation_type = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.service_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.service_name);
        }
        if !self.component_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.component_name);
        }
        if self.operation_type != ::protobuf::EnumOrUnknown::new(OperationType::OPERATION_TYPE_UNSET) {
            my_size += ::protobuf::rt::int32_size(3, self.operation_type.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.service_name.is_empty() {
            os.write_string(1, &self.service_name)?;
        }
        if !self.component_name.is_empty() {
            os.write_string(2, &self.component_name)?;
        }
        if self.operation_type != ::protobuf::EnumOrUnknown::new(OperationType::OPERATION_TYPE_UNSET) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.operation_type))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Audience {
        Audience::new()
    }

    fn clear(&mut self) {
        self.service_name.clear();
        self.component_name.clear();
        self.operation_type = ::protobuf::EnumOrUnknown::new(OperationType::OPERATION_TYPE_UNSET);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Audience {
        static instance: Audience = Audience {
            service_name: ::std::string::String::new(),
            component_name: ::std::string::String::new(),
            operation_type: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Audience {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Audience").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Audience {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Audience {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Types of commands that can be sent to the SDK
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:protos.CommandType)
pub enum CommandType {
    // @@protoc_insertion_point(enum_value:protos.CommandType.SNITCH_COMMAND_TYPE_UNSET)
    SNITCH_COMMAND_TYPE_UNSET = 0,
    // @@protoc_insertion_point(enum_value:protos.CommandType.SNITCH_COMMAND_TYPE_KEEPALIVE)
    SNITCH_COMMAND_TYPE_KEEPALIVE = 1,
    // @@protoc_insertion_point(enum_value:protos.CommandType.SNITCH_COMMAND_TYPE_SET_PIPELINE)
    SNITCH_COMMAND_TYPE_SET_PIPELINE = 2,
    // @@protoc_insertion_point(enum_value:protos.CommandType.SNITCH_COMMAND_TYPE_DELETE_PIPELINE)
    SNITCH_COMMAND_TYPE_DELETE_PIPELINE = 3,
    // @@protoc_insertion_point(enum_value:protos.CommandType.SNITCH_COMMAND_TYPE_PAUSE_PIPELINE)
    SNITCH_COMMAND_TYPE_PAUSE_PIPELINE = 4,
    // @@protoc_insertion_point(enum_value:protos.CommandType.SNITCH_COMMAND_TYPE_UNPAUSE_PIPELINE)
    SNITCH_COMMAND_TYPE_UNPAUSE_PIPELINE = 5,
}

impl ::protobuf::Enum for CommandType {
    const NAME: &'static str = "CommandType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CommandType> {
        match value {
            0 => ::std::option::Option::Some(CommandType::SNITCH_COMMAND_TYPE_UNSET),
            1 => ::std::option::Option::Some(CommandType::SNITCH_COMMAND_TYPE_KEEPALIVE),
            2 => ::std::option::Option::Some(CommandType::SNITCH_COMMAND_TYPE_SET_PIPELINE),
            3 => ::std::option::Option::Some(CommandType::SNITCH_COMMAND_TYPE_DELETE_PIPELINE),
            4 => ::std::option::Option::Some(CommandType::SNITCH_COMMAND_TYPE_PAUSE_PIPELINE),
            5 => ::std::option::Option::Some(CommandType::SNITCH_COMMAND_TYPE_UNPAUSE_PIPELINE),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CommandType] = &[
        CommandType::SNITCH_COMMAND_TYPE_UNSET,
        CommandType::SNITCH_COMMAND_TYPE_KEEPALIVE,
        CommandType::SNITCH_COMMAND_TYPE_SET_PIPELINE,
        CommandType::SNITCH_COMMAND_TYPE_DELETE_PIPELINE,
        CommandType::SNITCH_COMMAND_TYPE_PAUSE_PIPELINE,
        CommandType::SNITCH_COMMAND_TYPE_UNPAUSE_PIPELINE,
    ];
}

impl ::protobuf::EnumFull for CommandType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CommandType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CommandType {
    fn default() -> Self {
        CommandType::SNITCH_COMMAND_TYPE_UNSET
    }
}

impl CommandType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CommandType>("CommandType")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:protos.OperationType)
pub enum OperationType {
    // @@protoc_insertion_point(enum_value:protos.OperationType.OPERATION_TYPE_UNSET)
    OPERATION_TYPE_UNSET = 0,
    // @@protoc_insertion_point(enum_value:protos.OperationType.OPERATION_TYPE_CONSUMER)
    OPERATION_TYPE_CONSUMER = 1,
    // @@protoc_insertion_point(enum_value:protos.OperationType.OPERATION_TYPE_PRODUCER)
    OPERATION_TYPE_PRODUCER = 2,
}

impl ::protobuf::Enum for OperationType {
    const NAME: &'static str = "OperationType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<OperationType> {
        match value {
            0 => ::std::option::Option::Some(OperationType::OPERATION_TYPE_UNSET),
            1 => ::std::option::Option::Some(OperationType::OPERATION_TYPE_CONSUMER),
            2 => ::std::option::Option::Some(OperationType::OPERATION_TYPE_PRODUCER),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [OperationType] = &[
        OperationType::OPERATION_TYPE_UNSET,
        OperationType::OPERATION_TYPE_CONSUMER,
        OperationType::OPERATION_TYPE_PRODUCER,
    ];
}

impl ::protobuf::EnumFull for OperationType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("OperationType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for OperationType {
    fn default() -> Self {
        OperationType::OPERATION_TYPE_UNSET
    }
}

impl OperationType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<OperationType>("OperationType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13grpc_internal.proto\x12\x06protos\x1a\x0ccommon.proto\x1a\x0epipel\
    ine.proto\"\xca\x02\n\x10HeartbeatRequest\x12\x20\n\x04auth\x18\x01\x20\
    \x01(\x0b2\x0c.protos.AuthR\x04auth\x12,\n\x08audience\x18\x02\x20\x01(\
    \x0b2\x10.protos.AudienceR\x08audience\x12F\n\x20last_activity_unix_time\
    stamp_utc\x18\x03\x20\x01(\x03R\x1clastActivityUnixTimestampUtc\x12\x0f\
    \n\x03_id\x18d\x20\x01(\tR\x02Id\x12M\n\r_sdk_metadata\x18e\x20\x03(\x0b\
    2).protos.HeartbeatRequest.SdkMetadataEntryR\x0bSdkMetadata\x1a>\n\x10Sd\
    kMetadataEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05\
    value\x18\x02\x20\x01(\tR\x05value:\x028\x01\"\xe8\x02\n\rNotifyRequest\
    \x12\x20\n\x04auth\x18\x01\x20\x01(\x0b2\x0c.protos.AuthR\x04auth\x12\
    \x17\n\x07rule_id\x18\x02\x20\x01(\tR\x06ruleId\x12\x1b\n\trule_name\x18\
    \x03\x20\x01(\tR\x08ruleName\x12,\n\x08audience\x18\x04\x20\x01(\x0b2\
    \x10.protos.AudienceR\x08audience\x124\n\x17occurred_at_unix_ts_utc\x18\
    \x05\x20\x01(\x03R\x13occurredAtUnixTsUtc\x12\x0f\n\x03_id\x18d\x20\x01(\
    \tR\x02Id\x12J\n\r_sdk_metadata\x18e\x20\x03(\x0b2&.protos.NotifyRequest\
    .SdkMetadataEntryR\x0bSdkMetadata\x1a>\n\x10SdkMetadataEntry\x12\x10\n\
    \x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\t\
    R\x05value:\x028\x01\"\xb4\x02\n\x0eMetricsRequest\x12\x20\n\x04auth\x18\
    \x01\x20\x01(\x0b2\x0c.protos.AuthR\x04auth\x12\x17\n\x07rule_id\x18\x02\
    \x20\x01(\tR\x06ruleId\x12\x1b\n\trule_name\x18\x03\x20\x01(\tR\x08ruleN\
    ame\x12,\n\x08audience\x18\x04\x20\x01(\x0b2\x10.protos.AudienceR\x08aud\
    ience\x12\x0f\n\x03_id\x18d\x20\x01(\tR\x02Id\x12K\n\r_sdk_metadata\x18e\
    \x20\x03(\x0b2'.protos.MetricsRequest.SdkMetadataEntryR\x0bSdkMetadata\
    \x1a>\n\x10SdkMetadataEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\
    \x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\"\x8e\x02\n\
    \x0fRegisterRequest\x12\x20\n\x04auth\x18\x01\x20\x01(\x0b2\x0c.protos.A\
    uthR\x04auth\x12!\n\x0cservice_name\x18\x02\x20\x01(\tR\x0bserviceName\
    \x12\x17\n\x07dry_run\x18\x03\x20\x01(\x08R\x06dryRun\x12\x0f\n\x03_id\
    \x18d\x20\x01(\tR\x02Id\x12L\n\r_sdk_metadata\x18e\x20\x03(\x0b2(.protos\
    .RegisterRequest.SdkMetadataEntryR\x0bSdkMetadata\x1a>\n\x10SdkMetadataE\
    ntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\
    \x02\x20\x01(\tR\x05value:\x028\x01\"\x93\x03\n\x10RegisterResponse\x12'\
    \n\x04type\x18\x01\x20\x01(\x0e2\x13.protos.CommandTypeR\x04type\x12,\n\
    \x08audience\x18\x02\x20\x01(\x0b2\x10.protos.AudienceR\x08audience\x12?\
    \n\x0cset_pipeline\x18d\x20\x01(\x0b2\x1a.protos.SetPipelineCommandH\0R\
    \x0bsetPipeline\x12H\n\x0fdelete_pipeline\x18e\x20\x01(\x0b2\x1d.protos.\
    DeletePipelineCommandH\0R\x0edeletePipeline\x12E\n\x0epause_pipeline\x18\
    f\x20\x01(\x0b2\x1c.protos.PausePipelineCommandH\0R\rpausePipeline\x12K\
    \n\x10unpause_pipeline\x18g\x20\x01(\x0b2\x1e.protos.UnpausePipelineComm\
    andH\0R\x0funpausePipelineB\t\n\x07command\"\x92\x01\n\x08Audience\x12!\
    \n\x0cservice_name\x18\x01\x20\x01(\tR\x0bserviceName\x12%\n\x0ecomponen\
    t_name\x18\x02\x20\x01(\tR\rcomponentName\x12<\n\x0eoperation_type\x18\
    \x03\x20\x01(\x0e2\x15.protos.OperationTypeR\roperationType*\xf0\x01\n\
    \x0bCommandType\x12\x1d\n\x19SNITCH_COMMAND_TYPE_UNSET\x10\0\x12!\n\x1dS\
    NITCH_COMMAND_TYPE_KEEPALIVE\x10\x01\x12$\n\x20SNITCH_COMMAND_TYPE_SET_P\
    IPELINE\x10\x02\x12'\n#SNITCH_COMMAND_TYPE_DELETE_PIPELINE\x10\x03\x12&\
    \n\"SNITCH_COMMAND_TYPE_PAUSE_PIPELINE\x10\x04\x12(\n$SNITCH_COMMAND_TYP\
    E_UNPAUSE_PIPELINE\x10\x05*c\n\rOperationType\x12\x18\n\x14OPERATION_TYP\
    E_UNSET\x10\0\x12\x1b\n\x17OPERATION_TYPE_CONSUMER\x10\x01\x12\x1b\n\x17\
    OPERATION_TYPE_PRODUCER\x10\x022\x84\x02\n\x08Internal\x12?\n\x08Registe\
    r\x12\x17.protos.RegisterRequest\x1a\x18.protos.RegisterResponse0\x01\
    \x12?\n\tHeartbeat\x12\x18.protos.HeartbeatRequest\x1a\x18.protos.Standa\
    rdResponse\x129\n\x06Notify\x12\x15.protos.NotifyRequest\x1a\x18.protos.\
    StandardResponse\x12;\n\x07Metrics\x12\x16.protos.MetricsRequest\x1a\x18\
    .protos.StandardResponseB4Z2github.com/streamdal/snitch-protos/build/go/\
    protosJ\xa4!\n\x06\x12\x04\0\0}\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\
    \x08\n\x01\x02\x12\x03\x02\0\x0f\n\t\n\x02\x03\0\x12\x03\x04\0\x16\n\t\n\
    \x02\x03\x01\x12\x03\x05\0\x18\n\x08\n\x01\x08\x12\x03\x07\0I\n\t\n\x02\
    \x08\x0b\x12\x03\x07\0I\n\n\n\x02\x06\0\x12\x04\t\0\x1a\x01\n\n\n\x03\
    \x06\0\x01\x12\x03\t\x08\x10\n\xfc\x01\n\x04\x06\0\x02\0\x12\x03\x0e\x02\
    B\x1a\xee\x01\x20Initial\x20method\x20that\x20an\x20SDK\x20should\x20cal\
    l\x20to\x20register\x20itself\x20with\x20the\x20server.\n\x20The\x20serv\
    er\x20will\x20use\x20this\x20stream\x20to\x20send\x20commands\x20to\x20t\
    he\x20SDK\x20via\x20the\n\x20`RegisterResponse`\x20message.\x20SDKs\x20s\
    hould\x20continuously\x20listen\x20for\n\x20RegisterResponse\x20messages\
    .\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x0e\x06\x0e\n\x0c\n\x05\x06\0\
    \x02\0\x02\x12\x03\x0e\x0f\x1e\n\x0c\n\x05\x06\0\x02\0\x06\x12\x03\x0e)/\
    \n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x0e0@\n\x84\x01\n\x04\x06\0\x02\x01\
    \x12\x03\x12\x02=\x1aw\x20SDK\x20is\x20responsible\x20for\x20sending\x20\
    heartbeats\x20to\x20the\x20server\x20to\x20let\x20the\x20server\n\x20kno\
    w\x20about\x20active\x20consumers\x20and\x20producers.\n\n\x0c\n\x05\x06\
    \0\x02\x01\x01\x12\x03\x12\x06\x0f\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\
    \x12\x10\x20\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x12+;\n\x86\x01\n\x04\
    \x06\0\x02\x02\x12\x03\x16\x027\x1ay\x20Use\x20this\x20method\x20when\
    \x20Notify\x20condition\x20has\x20been\x20triggered;\x20the\x20server\
    \x20will\n\x20decide\x20on\x20what\x20to\x20do\x20about\x20the\x20notifi\
    cation.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\x16\x06\x0c\n\x0c\n\x05\
    \x06\0\x02\x02\x02\x12\x03\x16\r\x1a\n\x0c\n\x05\x06\0\x02\x02\x03\x12\
    \x03\x16%5\n2\n\x04\x06\0\x02\x03\x12\x03\x19\x029\x1a%\x20Send\x20perio\
    dic\x20metrics\x20to\x20the\x20server\n\n\x0c\n\x05\x06\0\x02\x03\x01\
    \x12\x03\x19\x06\r\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03\x19\x0e\x1c\n\
    \x0c\n\x05\x06\0\x02\x03\x03\x12\x03\x19'7\n\x8a\x01\n\x02\x04\0\x12\x04\
    \x1e\0(\x01\x1a~\x20Each\x20consumer\x20and\x20producer\x20should\x20sen\
    d\x20periodic\x20heartbeats\x20to\x20the\x20server\n\x20to\x20let\x20the\
    \x20server\x20know\x20that\x20they\x20are\x20still\x20active.\n\n\n\n\
    \x03\x04\0\x01\x12\x03\x1e\x08\x18\n\x0b\n\x04\x04\0\x02\0\x12\x03\x1f\
    \x02\x10\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x1f\x02\x06\n\x0c\n\x05\x04\
    \0\x02\0\x01\x12\x03\x1f\x07\x0b\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x1f\
    \x0e\x0f\n\x0b\n\x04\x04\0\x02\x01\x12\x03!\x02\x18\n\x0c\n\x05\x04\0\
    \x02\x01\x06\x12\x03!\x02\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03!\x0b\
    \x13\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03!\x16\x17\n\x0b\n\x04\x04\0\
    \x02\x02\x12\x03\"\x02-\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\"\x02\x07\
    \n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\"\x08(\n\x0c\n\x05\x04\0\x02\x02\
    \x03\x12\x03\"+,\n~\n\x04\x04\0\x02\x03\x12\x03&\x02\x13\x1aq\x20Correla\
    tion\x20ID\x20between\x20requests\x20and\x20responses.\x20If\x20not\x20s\
    et,\x20server\x20will\x20set\n\x20a\x20unique\x20ID\x20and\x20use\x20it\
    \x20in\x20response.\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03&\x02\x08\n\
    \x0c\n\x05\x04\0\x02\x03\x01\x12\x03&\t\x0c\n\x0c\n\x05\x04\0\x02\x03\
    \x03\x12\x03&\x0f\x12\n\x0b\n\x04\x04\0\x02\x04\x12\x03'\x02+\n\x0c\n\
    \x05\x04\0\x02\x04\x06\x12\x03'\x02\x16\n\x0c\n\x05\x04\0\x02\x04\x01\
    \x12\x03'\x17$\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03''*\n\n\n\x02\x04\
    \x01\x12\x04*\04\x01\n\n\n\x03\x04\x01\x01\x12\x03*\x08\x15\n\x0b\n\x04\
    \x04\x01\x02\0\x12\x03+\x02\x10\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03+\
    \x02\x06\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03+\x07\x0b\n\x0c\n\x05\x04\
    \x01\x02\0\x03\x12\x03+\x0e\x0f\n\x0b\n\x04\x04\x01\x02\x01\x12\x03-\x02\
    \x15\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03-\x02\x08\n\x0c\n\x05\x04\
    \x01\x02\x01\x01\x12\x03-\t\x10\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03-\
    \x13\x14\n\x0b\n\x04\x04\x01\x02\x02\x12\x03.\x02\x17\n\x0c\n\x05\x04\
    \x01\x02\x02\x05\x12\x03.\x02\x08\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\
    \x03.\t\x12\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03.\x15\x16\n\x0b\n\x04\
    \x04\x01\x02\x03\x12\x03/\x02\x18\n\x0c\n\x05\x04\x01\x02\x03\x06\x12\
    \x03/\x02\n\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03/\x0b\x13\n\x0c\n\x05\
    \x04\x01\x02\x03\x03\x12\x03/\x16\x17\n\x0b\n\x04\x04\x01\x02\x04\x12\
    \x030\x02$\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x030\x02\x07\n\x0c\n\x05\
    \x04\x01\x02\x04\x01\x12\x030\x08\x1f\n\x0c\n\x05\x04\x01\x02\x04\x03\
    \x12\x030\"#\n\x0b\n\x04\x04\x01\x02\x05\x12\x032\x02\x13\n\x0c\n\x05\
    \x04\x01\x02\x05\x05\x12\x032\x02\x08\n\x0c\n\x05\x04\x01\x02\x05\x01\
    \x12\x032\t\x0c\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x032\x0f\x12\n\x0b\n\
    \x04\x04\x01\x02\x06\x12\x033\x02+\n\x0c\n\x05\x04\x01\x02\x06\x06\x12\
    \x033\x02\x16\n\x0c\n\x05\x04\x01\x02\x06\x01\x12\x033\x17$\n\x0c\n\x05\
    \x04\x01\x02\x06\x03\x12\x033'*\n\n\n\x02\x04\x02\x12\x046\0?\x01\n\n\n\
    \x03\x04\x02\x01\x12\x036\x08\x16\n\x0b\n\x04\x04\x02\x02\0\x12\x037\x02\
    \x10\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x037\x02\x06\n\x0c\n\x05\x04\x02\
    \x02\0\x01\x12\x037\x07\x0b\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x037\x0e\
    \x0f\n\x0b\n\x04\x04\x02\x02\x01\x12\x039\x02\x15\n\x0c\n\x05\x04\x02\
    \x02\x01\x05\x12\x039\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x039\t\
    \x10\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x039\x13\x14\n\x0b\n\x04\x04\
    \x02\x02\x02\x12\x03:\x02\x17\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03:\
    \x02\x08\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03:\t\x12\n\x0c\n\x05\x04\
    \x02\x02\x02\x03\x12\x03:\x15\x16\n\x0b\n\x04\x04\x02\x02\x03\x12\x03;\
    \x02\x18\n\x0c\n\x05\x04\x02\x02\x03\x06\x12\x03;\x02\n\n\x0c\n\x05\x04\
    \x02\x02\x03\x01\x12\x03;\x0b\x13\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\
    \x03;\x16\x17\n\x0b\n\x04\x04\x02\x02\x04\x12\x03=\x02\x13\n\x0c\n\x05\
    \x04\x02\x02\x04\x05\x12\x03=\x02\x08\n\x0c\n\x05\x04\x02\x02\x04\x01\
    \x12\x03=\t\x0c\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03=\x0f\x12\n\x0b\n\
    \x04\x04\x02\x02\x05\x12\x03>\x02+\n\x0c\n\x05\x04\x02\x02\x05\x06\x12\
    \x03>\x02\x16\n\x0c\n\x05\x04\x02\x02\x05\x01\x12\x03>\x17$\n\x0c\n\x05\
    \x04\x02\x02\x05\x03\x12\x03>'*\n\n\n\x02\x04\x03\x12\x04A\0M\x01\n\n\n\
    \x03\x04\x03\x01\x12\x03A\x08\x17\n\x0b\n\x04\x04\x03\x02\0\x12\x03B\x02\
    \x10\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03B\x02\x06\n\x0c\n\x05\x04\x03\
    \x02\0\x01\x12\x03B\x07\x0b\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03B\x0e\
    \x0f\n\x0b\n\x04\x04\x03\x02\x01\x12\x03D\x02\x1a\n\x0c\n\x05\x04\x03\
    \x02\x01\x05\x12\x03D\x02\x08\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03D\t\
    \x15\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03D\x18\x19\n\xcd\x01\n\x04\
    \x04\x03\x02\x02\x12\x03I\x02\x13\x1a\xbf\x01\x20If\x20set,\x20we\x20kno\
    w\x20that\x20any\x20pipelines\x20or\x20steps\x20executed\x20in\x20this\
    \x20SDK\x20will\x20NOT\n\x20modify\x20the\x20input/output\x20data.\x20As\
    \x20in,\x20the\x20SDK\x20will\x20log\x20what\x20it\x20_would_\x20do\n\
    \x20and\x20always\x20return\x20the\x20original\x20data\x20set.\n\n\x0c\n\
    \x05\x04\x03\x02\x02\x05\x12\x03I\x02\x06\n\x0c\n\x05\x04\x03\x02\x02\
    \x01\x12\x03I\x07\x0e\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03I\x11\x12\n\
    \x0b\n\x04\x04\x03\x02\x03\x12\x03K\x02\x13\n\x0c\n\x05\x04\x03\x02\x03\
    \x05\x12\x03K\x02\x08\n\x0c\n\x05\x04\x03\x02\x03\x01\x12\x03K\t\x0c\n\
    \x0c\n\x05\x04\x03\x02\x03\x03\x12\x03K\x0f\x12\n\x0b\n\x04\x04\x03\x02\
    \x04\x12\x03L\x02+\n\x0c\n\x05\x04\x03\x02\x04\x06\x12\x03L\x02\x16\n\
    \x0c\n\x05\x04\x03\x02\x04\x01\x12\x03L\x17$\n\x0c\n\x05\x04\x03\x02\x04\
    \x03\x12\x03L'*\n\x9e\x01\n\x02\x04\x04\x12\x04Q\0^\x01\x1a\x91\x01\x20T\
    he\x20primary\x20method\x20to\x20send\x20commands\x20to\x20the\x20SDK;\
    \x20server\x20will\x20send\x20zero\x20or\x20more\n\x20RegisterResponse's\
    \x20with\x20SetPipelineRequest\x20on\x20SDK\x20instantiation.\n\n\n\n\
    \x03\x04\x04\x01\x12\x03Q\x08\x18\n=\n\x04\x04\x04\x02\0\x12\x03S\x02\
    \x17\x1a0\x20Use\x20this\x20to\x20determine\x20what\x20to\x20expect\x20i\
    n\x20one_of\n\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03S\x02\r\n\x0c\n\x05\
    \x04\x04\x02\0\x01\x12\x03S\x0e\x12\n\x0c\n\x05\x04\x04\x02\0\x03\x12\
    \x03S\x15\x16\n0\n\x04\x04\x04\x02\x01\x12\x03V\x02\x18\x1a#\x20Who\x20i\
    s\x20this\x20command\x20intended\x20for?\n\n\x0c\n\x05\x04\x04\x02\x01\
    \x06\x12\x03V\x02\n\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03V\x0b\x13\n\
    \x0c\n\x05\x04\x04\x02\x01\x03\x12\x03V\x16\x17\n\x0c\n\x04\x04\x04\x08\
    \0\x12\x04X\x02]\x03\n\x0c\n\x05\x04\x04\x08\0\x01\x12\x03X\x08\x0f\n\
    \x0b\n\x04\x04\x04\x02\x02\x12\x03Y\x041\n\x0c\n\x05\x04\x04\x02\x02\x06\
    \x12\x03Y\x04\x1d\n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x03Y\x1e*\n\x0c\n\
    \x05\x04\x04\x02\x02\x03\x12\x03Y-0\n(\n\x04\x04\x04\x02\x03\x12\x03Z\
    \x047\"\x1b\x20Hmm,\x20should\x20this\x20be\x20here?\n\n\x0c\n\x05\x04\
    \x04\x02\x03\x06\x12\x03Z\x04\x20\n\x0c\n\x05\x04\x04\x02\x03\x01\x12\
    \x03Z!0\n\x0c\n\x05\x04\x04\x02\x03\x03\x12\x03Z36\n\x0b\n\x04\x04\x04\
    \x02\x04\x12\x03[\x045\n\x0c\n\x05\x04\x04\x02\x04\x06\x12\x03[\x04\x1f\
    \n\x0c\n\x05\x04\x04\x02\x04\x01\x12\x03[\x20.\n\x0c\n\x05\x04\x04\x02\
    \x04\x03\x12\x03[14\n\x0b\n\x04\x04\x04\x02\x05\x12\x03\\\x049\n\x0c\n\
    \x05\x04\x04\x02\x05\x06\x12\x03\\\x04!\n\x0c\n\x05\x04\x04\x02\x05\x01\
    \x12\x03\\\"2\n\x0c\n\x05\x04\x04\x02\x05\x03\x12\x03\\58\n;\n\x02\x05\0\
    \x12\x04a\0k\x01\x1a/\x20Types\x20of\x20commands\x20that\x20can\x20be\
    \x20sent\x20to\x20the\x20SDK\n\n\n\n\x03\x05\0\x01\x12\x03a\x05\x10\n\
    \x0b\n\x04\x05\0\x02\0\x12\x03b\x02\x20\n\x0c\n\x05\x05\0\x02\0\x01\x12\
    \x03b\x02\x1b\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03b\x1e\x1f\n\x82\x01\n\
    \x04\x05\0\x02\x01\x12\x03c\x02$\"u\x20Use\x20this\x20to\x20keep\x20conn\
    ection\x20alive;\x20SDK\x20doesn't\x20need\x20to\x20do\x20anything\x20wi\
    th\x20this\x20-\x20it's\x20there\x20just\x20to\x20keep\x20things\x20aliv\
    e\n\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03c\x02\x1f\n\x0c\n\x05\x05\0\x02\
    \x01\x02\x12\x03c\"#\n\x0b\n\x04\x05\0\x02\x02\x12\x03d\x02'\n\x0c\n\x05\
    \x05\0\x02\x02\x01\x12\x03d\x02\"\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03d\
    %&\n\x0b\n\x04\x05\0\x02\x03\x12\x03e\x02*\n\x0c\n\x05\x05\0\x02\x03\x01\
    \x12\x03e\x02%\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03e()\n\x0b\n\x04\x05\
    \0\x02\x04\x12\x03f\x02)\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03f\x02$\n\
    \x0c\n\x05\x05\0\x02\x04\x02\x12\x03f'(\n\x0b\n\x04\x05\0\x02\x05\x12\
    \x03g\x02+\n\x0c\n\x05\x05\0\x02\x05\x01\x12\x03g\x02&\n\x0c\n\x05\x05\0\
    \x02\x05\x02\x12\x03g)*\n\n\n\x02\x05\x01\x12\x04m\0q\x01\n\n\n\x03\x05\
    \x01\x01\x12\x03m\x05\x12\n\x0b\n\x04\x05\x01\x02\0\x12\x03n\x02\x1b\n\
    \x0c\n\x05\x05\x01\x02\0\x01\x12\x03n\x02\x16\n\x0c\n\x05\x05\x01\x02\0\
    \x02\x12\x03n\x19\x1a\n\x0b\n\x04\x05\x01\x02\x01\x12\x03o\x02\x1e\n\x0c\
    \n\x05\x05\x01\x02\x01\x01\x12\x03o\x02\x19\n\x0c\n\x05\x05\x01\x02\x01\
    \x02\x12\x03o\x1c\x1d\n\x0b\n\x04\x05\x01\x02\x02\x12\x03p\x02\x1e\n\x0c\
    \n\x05\x05\x01\x02\x02\x01\x12\x03p\x02\x19\n\x0c\n\x05\x05\x01\x02\x02\
    \x02\x12\x03p\x1c\x1d\nD\n\x02\x04\x05\x12\x04t\0}\x01\x1a8\x20Used\x20t\
    o\x20indicate\x20who\x20a\x20request/command\x20is\x20intended\x20for\n\
    \n\n\n\x03\x04\x05\x01\x12\x03t\x08\x10\n\"\n\x04\x04\x05\x02\0\x12\x03v\
    \x02\x1a\x1a\x15\x20Name\x20of\x20the\x20service\n\n\x0c\n\x05\x04\x05\
    \x02\0\x05\x12\x03v\x02\x08\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03v\t\x15\
    \n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03v\x18\x19\nX\n\x04\x04\x05\x02\x01\
    \x12\x03y\x02\x1c\x1aK\x20Name\x20of\x20the\x20component\x20the\x20SDK\
    \x20is\x20interacting\x20with\x20(ie.\x20kafka-$topic-name)\n\n\x0c\n\
    \x05\x04\x05\x02\x01\x05\x12\x03y\x02\x08\n\x0c\n\x05\x04\x05\x02\x01\
    \x01\x12\x03y\t\x17\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03y\x1a\x1b\n#\
    \n\x04\x04\x05\x02\x02\x12\x03|\x02#\x1a\x16\x20Consumer\x20or\x20Produc\
    er\n\n\x0c\n\x05\x04\x05\x02\x02\x06\x12\x03|\x02\x0f\n\x0c\n\x05\x04\
    \x05\x02\x02\x01\x12\x03|\x10\x1e\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\
    \x03|!\"b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::common::file_descriptor().clone());
            deps.push(super::pipeline::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(HeartbeatRequest::generated_message_descriptor_data());
            messages.push(NotifyRequest::generated_message_descriptor_data());
            messages.push(MetricsRequest::generated_message_descriptor_data());
            messages.push(RegisterRequest::generated_message_descriptor_data());
            messages.push(RegisterResponse::generated_message_descriptor_data());
            messages.push(Audience::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(CommandType::generated_enum_descriptor_data());
            enums.push(OperationType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
