// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `sp_common.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

///  Common response message for many gRPC methods
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.StandardResponse)
pub struct StandardResponse {
    // message fields
    ///  Co-relation ID for the request / response
    // @@protoc_insertion_point(field:protos.StandardResponse.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:protos.StandardResponse.code)
    pub code: ::protobuf::EnumOrUnknown<ResponseCode>,
    // @@protoc_insertion_point(field:protos.StandardResponse.message)
    pub message: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.StandardResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StandardResponse {
    fn default() -> &'a StandardResponse {
        <StandardResponse as ::protobuf::Message>::default_instance()
    }
}

impl StandardResponse {
    pub fn new() -> StandardResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &StandardResponse| { &m.id },
            |m: &mut StandardResponse| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &StandardResponse| { &m.code },
            |m: &mut StandardResponse| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &StandardResponse| { &m.message },
            |m: &mut StandardResponse| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StandardResponse>(
            "StandardResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StandardResponse {
    const NAME: &'static str = "StandardResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                16 => {
                    self.code = is.read_enum_or_unknown()?;
                },
                26 => {
                    self.message = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if self.code != ::protobuf::EnumOrUnknown::new(ResponseCode::RESPONSE_CODE_UNSET) {
            my_size += ::protobuf::rt::int32_size(2, self.code.value());
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if self.code != ::protobuf::EnumOrUnknown::new(ResponseCode::RESPONSE_CODE_UNSET) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.code))?;
        }
        if !self.message.is_empty() {
            os.write_string(3, &self.message)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StandardResponse {
        StandardResponse::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.code = ::protobuf::EnumOrUnknown::new(ResponseCode::RESPONSE_CODE_UNSET);
        self.message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StandardResponse {
        static instance: StandardResponse = StandardResponse {
            id: ::std::string::String::new(),
            code: ::protobuf::EnumOrUnknown::from_i32(0),
            message: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StandardResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StandardResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StandardResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StandardResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Used to indicate who a command is intended for
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.Audience)
pub struct Audience {
    // message fields
    ///  Name of the service -- let's include the service name on all calls, we can
    ///  optimize later ~DS
    // @@protoc_insertion_point(field:protos.Audience.service_name)
    pub service_name: ::std::string::String,
    ///  Name of the component the SDK is interacting with (ie. kafka-$topic-name)
    // @@protoc_insertion_point(field:protos.Audience.component_name)
    pub component_name: ::std::string::String,
    ///  Consumer or Producer
    // @@protoc_insertion_point(field:protos.Audience.operation_type)
    pub operation_type: ::protobuf::EnumOrUnknown<OperationType>,
    ///  Name for the consumer or producer
    // @@protoc_insertion_point(field:protos.Audience.operation_name)
    pub operation_name: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.Audience.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Audience {
    fn default() -> &'a Audience {
        <Audience as ::protobuf::Message>::default_instance()
    }
}

impl Audience {
    pub fn new() -> Audience {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "service_name",
            |m: &Audience| { &m.service_name },
            |m: &mut Audience| { &mut m.service_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "component_name",
            |m: &Audience| { &m.component_name },
            |m: &mut Audience| { &mut m.component_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "operation_type",
            |m: &Audience| { &m.operation_type },
            |m: &mut Audience| { &mut m.operation_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "operation_name",
            |m: &Audience| { &m.operation_name },
            |m: &mut Audience| { &mut m.operation_name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Audience>(
            "Audience",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Audience {
    const NAME: &'static str = "Audience";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.service_name = is.read_string()?;
                },
                18 => {
                    self.component_name = is.read_string()?;
                },
                24 => {
                    self.operation_type = is.read_enum_or_unknown()?;
                },
                34 => {
                    self.operation_name = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.service_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.service_name);
        }
        if !self.component_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.component_name);
        }
        if self.operation_type != ::protobuf::EnumOrUnknown::new(OperationType::OPERATION_TYPE_UNSET) {
            my_size += ::protobuf::rt::int32_size(3, self.operation_type.value());
        }
        if !self.operation_name.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.operation_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.service_name.is_empty() {
            os.write_string(1, &self.service_name)?;
        }
        if !self.component_name.is_empty() {
            os.write_string(2, &self.component_name)?;
        }
        if self.operation_type != ::protobuf::EnumOrUnknown::new(OperationType::OPERATION_TYPE_UNSET) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.operation_type))?;
        }
        if !self.operation_name.is_empty() {
            os.write_string(4, &self.operation_name)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Audience {
        Audience::new()
    }

    fn clear(&mut self) {
        self.service_name.clear();
        self.component_name.clear();
        self.operation_type = ::protobuf::EnumOrUnknown::new(OperationType::OPERATION_TYPE_UNSET);
        self.operation_name.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Audience {
        static instance: Audience = Audience {
            service_name: ::std::string::String::new(),
            component_name: ::std::string::String::new(),
            operation_type: ::protobuf::EnumOrUnknown::from_i32(0),
            operation_name: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Audience {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Audience").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Audience {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Audience {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.Metric)
pub struct Metric {
    // message fields
    // @@protoc_insertion_point(field:protos.Metric.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:protos.Metric.labels)
    pub labels: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // @@protoc_insertion_point(field:protos.Metric.value)
    pub value: f64,
    // special fields
    // @@protoc_insertion_point(special_field:protos.Metric.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Metric {
    fn default() -> &'a Metric {
        <Metric as ::protobuf::Message>::default_instance()
    }
}

impl Metric {
    pub fn new() -> Metric {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Metric| { &m.name },
            |m: &mut Metric| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "labels",
            |m: &Metric| { &m.labels },
            |m: &mut Metric| { &mut m.labels },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &Metric| { &m.value },
            |m: &mut Metric| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Metric>(
            "Metric",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Metric {
    const NAME: &'static str = "Metric";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.labels.insert(key, value);
                },
                25 => {
                    self.value = is.read_double()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        for (k, v) in &self.labels {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.value != 0. {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        for (k, v) in &self.labels {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(18)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        if self.value != 0. {
            os.write_double(3, self.value)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Metric {
        Metric::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.labels.clear();
        self.value = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Metric {
        static instance: ::protobuf::rt::Lazy<Metric> = ::protobuf::rt::Lazy::new();
        instance.get(Metric::new)
    }
}

impl ::protobuf::MessageFull for Metric {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Metric").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Metric {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Metric {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.TailRequest)
pub struct TailRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.TailRequest.audience)
    pub audience: ::protobuf::MessageField<Audience>,
    // @@protoc_insertion_point(field:protos.TailRequest.pipeline_id)
    pub pipeline_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.TailRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TailRequest {
    fn default() -> &'a TailRequest {
        <TailRequest as ::protobuf::Message>::default_instance()
    }
}

impl TailRequest {
    pub fn new() -> TailRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Audience>(
            "audience",
            |m: &TailRequest| { &m.audience },
            |m: &mut TailRequest| { &mut m.audience },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pipeline_id",
            |m: &TailRequest| { &m.pipeline_id },
            |m: &mut TailRequest| { &mut m.pipeline_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TailRequest>(
            "TailRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TailRequest {
    const NAME: &'static str = "TailRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.audience)?;
                },
                18 => {
                    self.pipeline_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.audience.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.pipeline_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.pipeline_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.audience.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.pipeline_id.is_empty() {
            os.write_string(2, &self.pipeline_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TailRequest {
        TailRequest::new()
    }

    fn clear(&mut self) {
        self.audience.clear();
        self.pipeline_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TailRequest {
        static instance: TailRequest = TailRequest {
            audience: ::protobuf::MessageField::none(),
            pipeline_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TailRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TailRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TailRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TailRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  TailResponse originates in the SDK and then is sent to snitch servers where
///  it is forwarded to the correct frontend streaming gRPC connection
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.TailResponse)
pub struct TailResponse {
    // message fields
    // @@protoc_insertion_point(field:protos.TailResponse.type)
    pub type_: ::protobuf::EnumOrUnknown<TailResponseType>,
    // @@protoc_insertion_point(field:protos.TailResponse.audience)
    pub audience: ::protobuf::MessageField<Audience>,
    // @@protoc_insertion_point(field:protos.TailResponse.pipeline_id)
    pub pipeline_id: ::std::string::String,
    // @@protoc_insertion_point(field:protos.TailResponse.session_id)
    pub session_id: ::std::string::String,
    ///  Timestamp in nanoseconds
    // @@protoc_insertion_point(field:protos.TailResponse.timestamp_ns)
    pub timestamp_ns: i64,
    ///  Payload data. For errors, this will be the error message
    ///  For payloads, this will be JSON of the payload data, post processing
    // @@protoc_insertion_point(field:protos.TailResponse.data)
    pub data: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.TailResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TailResponse {
    fn default() -> &'a TailResponse {
        <TailResponse as ::protobuf::Message>::default_instance()
    }
}

impl TailResponse {
    pub fn new() -> TailResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &TailResponse| { &m.type_ },
            |m: &mut TailResponse| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Audience>(
            "audience",
            |m: &TailResponse| { &m.audience },
            |m: &mut TailResponse| { &mut m.audience },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pipeline_id",
            |m: &TailResponse| { &m.pipeline_id },
            |m: &mut TailResponse| { &mut m.pipeline_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "session_id",
            |m: &TailResponse| { &m.session_id },
            |m: &mut TailResponse| { &mut m.session_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timestamp_ns",
            |m: &TailResponse| { &m.timestamp_ns },
            |m: &mut TailResponse| { &mut m.timestamp_ns },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &TailResponse| { &m.data },
            |m: &mut TailResponse| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TailResponse>(
            "TailResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TailResponse {
    const NAME: &'static str = "TailResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.audience)?;
                },
                26 => {
                    self.pipeline_id = is.read_string()?;
                },
                34 => {
                    self.session_id = is.read_string()?;
                },
                40 => {
                    self.timestamp_ns = is.read_int64()?;
                },
                50 => {
                    self.data = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(TailResponseType::TAIL_RESPONSE_TYPE_UNSET) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if let Some(v) = self.audience.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.pipeline_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.pipeline_id);
        }
        if !self.session_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.session_id);
        }
        if self.timestamp_ns != 0 {
            my_size += ::protobuf::rt::int64_size(5, self.timestamp_ns);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(TailResponseType::TAIL_RESPONSE_TYPE_UNSET) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if let Some(v) = self.audience.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if !self.pipeline_id.is_empty() {
            os.write_string(3, &self.pipeline_id)?;
        }
        if !self.session_id.is_empty() {
            os.write_string(4, &self.session_id)?;
        }
        if self.timestamp_ns != 0 {
            os.write_int64(5, self.timestamp_ns)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(6, &self.data)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TailResponse {
        TailResponse::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(TailResponseType::TAIL_RESPONSE_TYPE_UNSET);
        self.audience.clear();
        self.pipeline_id.clear();
        self.session_id.clear();
        self.timestamp_ns = 0;
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TailResponse {
        static instance: TailResponse = TailResponse {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            audience: ::protobuf::MessageField::none(),
            pipeline_id: ::std::string::String::new(),
            session_id: ::std::string::String::new(),
            timestamp_ns: 0,
            data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TailResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TailResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TailResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TailResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.TailCommand)
pub struct TailCommand {
    // message fields
    // @@protoc_insertion_point(field:protos.TailCommand.request)
    pub request: ::protobuf::MessageField<TailRequest>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.TailCommand.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TailCommand {
    fn default() -> &'a TailCommand {
        <TailCommand as ::protobuf::Message>::default_instance()
    }
}

impl TailCommand {
    pub fn new() -> TailCommand {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, TailRequest>(
            "request",
            |m: &TailCommand| { &m.request },
            |m: &mut TailCommand| { &mut m.request },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TailCommand>(
            "TailCommand",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TailCommand {
    const NAME: &'static str = "TailCommand";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.request)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.request.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.request.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TailCommand {
        TailCommand::new()
    }

    fn clear(&mut self) {
        self.request.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TailCommand {
        static instance: TailCommand = TailCommand {
            request: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TailCommand {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TailCommand").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TailCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TailCommand {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Common status codes used in gRPC method responses
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:protos.ResponseCode)
pub enum ResponseCode {
    // @@protoc_insertion_point(enum_value:protos.ResponseCode.RESPONSE_CODE_UNSET)
    RESPONSE_CODE_UNSET = 0,
    // @@protoc_insertion_point(enum_value:protos.ResponseCode.RESPONSE_CODE_OK)
    RESPONSE_CODE_OK = 1,
    // @@protoc_insertion_point(enum_value:protos.ResponseCode.RESPONSE_CODE_BAD_REQUEST)
    RESPONSE_CODE_BAD_REQUEST = 2,
    // @@protoc_insertion_point(enum_value:protos.ResponseCode.RESPONSE_CODE_NOT_FOUND)
    RESPONSE_CODE_NOT_FOUND = 3,
    // @@protoc_insertion_point(enum_value:protos.ResponseCode.RESPONSE_CODE_INTERNAL_SERVER_ERROR)
    RESPONSE_CODE_INTERNAL_SERVER_ERROR = 4,
    // @@protoc_insertion_point(enum_value:protos.ResponseCode.RESPONSE_CODE_GENERIC_ERROR)
    RESPONSE_CODE_GENERIC_ERROR = 5,
}

impl ::protobuf::Enum for ResponseCode {
    const NAME: &'static str = "ResponseCode";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ResponseCode> {
        match value {
            0 => ::std::option::Option::Some(ResponseCode::RESPONSE_CODE_UNSET),
            1 => ::std::option::Option::Some(ResponseCode::RESPONSE_CODE_OK),
            2 => ::std::option::Option::Some(ResponseCode::RESPONSE_CODE_BAD_REQUEST),
            3 => ::std::option::Option::Some(ResponseCode::RESPONSE_CODE_NOT_FOUND),
            4 => ::std::option::Option::Some(ResponseCode::RESPONSE_CODE_INTERNAL_SERVER_ERROR),
            5 => ::std::option::Option::Some(ResponseCode::RESPONSE_CODE_GENERIC_ERROR),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ResponseCode] = &[
        ResponseCode::RESPONSE_CODE_UNSET,
        ResponseCode::RESPONSE_CODE_OK,
        ResponseCode::RESPONSE_CODE_BAD_REQUEST,
        ResponseCode::RESPONSE_CODE_NOT_FOUND,
        ResponseCode::RESPONSE_CODE_INTERNAL_SERVER_ERROR,
        ResponseCode::RESPONSE_CODE_GENERIC_ERROR,
    ];
}

impl ::protobuf::EnumFull for ResponseCode {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ResponseCode").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ResponseCode {
    fn default() -> Self {
        ResponseCode::RESPONSE_CODE_UNSET
    }
}

impl ResponseCode {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ResponseCode>("ResponseCode")
    }
}

///  Each SDK client is a $service + $component + $operation_type
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:protos.OperationType)
pub enum OperationType {
    // @@protoc_insertion_point(enum_value:protos.OperationType.OPERATION_TYPE_UNSET)
    OPERATION_TYPE_UNSET = 0,
    // @@protoc_insertion_point(enum_value:protos.OperationType.OPERATION_TYPE_CONSUMER)
    OPERATION_TYPE_CONSUMER = 1,
    // @@protoc_insertion_point(enum_value:protos.OperationType.OPERATION_TYPE_PRODUCER)
    OPERATION_TYPE_PRODUCER = 2,
}

impl ::protobuf::Enum for OperationType {
    const NAME: &'static str = "OperationType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<OperationType> {
        match value {
            0 => ::std::option::Option::Some(OperationType::OPERATION_TYPE_UNSET),
            1 => ::std::option::Option::Some(OperationType::OPERATION_TYPE_CONSUMER),
            2 => ::std::option::Option::Some(OperationType::OPERATION_TYPE_PRODUCER),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [OperationType] = &[
        OperationType::OPERATION_TYPE_UNSET,
        OperationType::OPERATION_TYPE_CONSUMER,
        OperationType::OPERATION_TYPE_PRODUCER,
    ];
}

impl ::protobuf::EnumFull for OperationType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("OperationType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for OperationType {
    fn default() -> Self {
        OperationType::OPERATION_TYPE_UNSET
    }
}

impl OperationType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<OperationType>("OperationType")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:protos.TailResponseType)
pub enum TailResponseType {
    // @@protoc_insertion_point(enum_value:protos.TailResponseType.TAIL_RESPONSE_TYPE_UNSET)
    TAIL_RESPONSE_TYPE_UNSET = 0,
    // @@protoc_insertion_point(enum_value:protos.TailResponseType.TAIL_RESPONSE_TYPE_PAYLOAD)
    TAIL_RESPONSE_TYPE_PAYLOAD = 1,
    // @@protoc_insertion_point(enum_value:protos.TailResponseType.TAIL_RESPONSE_TYPE_ERROR)
    TAIL_RESPONSE_TYPE_ERROR = 2,
}

impl ::protobuf::Enum for TailResponseType {
    const NAME: &'static str = "TailResponseType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TailResponseType> {
        match value {
            0 => ::std::option::Option::Some(TailResponseType::TAIL_RESPONSE_TYPE_UNSET),
            1 => ::std::option::Option::Some(TailResponseType::TAIL_RESPONSE_TYPE_PAYLOAD),
            2 => ::std::option::Option::Some(TailResponseType::TAIL_RESPONSE_TYPE_ERROR),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [TailResponseType] = &[
        TailResponseType::TAIL_RESPONSE_TYPE_UNSET,
        TailResponseType::TAIL_RESPONSE_TYPE_PAYLOAD,
        TailResponseType::TAIL_RESPONSE_TYPE_ERROR,
    ];
}

impl ::protobuf::EnumFull for TailResponseType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("TailResponseType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for TailResponseType {
    fn default() -> Self {
        TailResponseType::TAIL_RESPONSE_TYPE_UNSET
    }
}

impl TailResponseType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<TailResponseType>("TailResponseType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fsp_common.proto\x12\x06protos\"f\n\x10StandardResponse\x12\x0e\n\
    \x02id\x18\x01\x20\x01(\tR\x02id\x12(\n\x04code\x18\x02\x20\x01(\x0e2\
    \x14.protos.ResponseCodeR\x04code\x12\x18\n\x07message\x18\x03\x20\x01(\
    \tR\x07message\"\xb9\x01\n\x08Audience\x12!\n\x0cservice_name\x18\x01\
    \x20\x01(\tR\x0bserviceName\x12%\n\x0ecomponent_name\x18\x02\x20\x01(\tR\
    \rcomponentName\x12<\n\x0eoperation_type\x18\x03\x20\x01(\x0e2\x15.proto\
    s.OperationTypeR\roperationType\x12%\n\x0eoperation_name\x18\x04\x20\x01\
    (\tR\roperationName\"\xa1\x01\n\x06Metric\x12\x12\n\x04name\x18\x01\x20\
    \x01(\tR\x04name\x122\n\x06labels\x18\x02\x20\x03(\x0b2\x1a.protos.Metri\
    c.LabelsEntryR\x06labels\x12\x14\n\x05value\x18\x03\x20\x01(\x01R\x05val\
    ue\x1a9\n\x0bLabelsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\
    \x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\"\\\n\x0bTailRequ\
    est\x12,\n\x08audience\x18\x01\x20\x01(\x0b2\x10.protos.AudienceR\x08aud\
    ience\x12\x1f\n\x0bpipeline_id\x18\x02\x20\x01(\tR\npipelineId\"\xe1\x01\
    \n\x0cTailResponse\x12,\n\x04type\x18\x01\x20\x01(\x0e2\x18.protos.TailR\
    esponseTypeR\x04type\x12,\n\x08audience\x18\x02\x20\x01(\x0b2\x10.protos\
    .AudienceR\x08audience\x12\x1f\n\x0bpipeline_id\x18\x03\x20\x01(\tR\npip\
    elineId\x12\x1d\n\nsession_id\x18\x04\x20\x01(\tR\tsessionId\x12!\n\x0ct\
    imestamp_ns\x18\x05\x20\x01(\x03R\x0btimestampNs\x12\x12\n\x04data\x18\
    \x06\x20\x01(\x0cR\x04data\"<\n\x0bTailCommand\x12-\n\x07request\x18\x01\
    \x20\x01(\x0b2\x13.protos.TailRequestR\x07request*\xc3\x01\n\x0cResponse\
    Code\x12\x17\n\x13RESPONSE_CODE_UNSET\x10\0\x12\x14\n\x10RESPONSE_CODE_O\
    K\x10\x01\x12\x1d\n\x19RESPONSE_CODE_BAD_REQUEST\x10\x02\x12\x1b\n\x17RE\
    SPONSE_CODE_NOT_FOUND\x10\x03\x12'\n#RESPONSE_CODE_INTERNAL_SERVER_ERROR\
    \x10\x04\x12\x1f\n\x1bRESPONSE_CODE_GENERIC_ERROR\x10\x05*c\n\rOperation\
    Type\x12\x18\n\x14OPERATION_TYPE_UNSET\x10\0\x12\x1b\n\x17OPERATION_TYPE\
    _CONSUMER\x10\x01\x12\x1b\n\x17OPERATION_TYPE_PRODUCER\x10\x02*n\n\x10Ta\
    ilResponseType\x12\x1c\n\x18TAIL_RESPONSE_TYPE_UNSET\x10\0\x12\x1e\n\x1a\
    TAIL_RESPONSE_TYPE_PAYLOAD\x10\x01\x12\x1c\n\x18TAIL_RESPONSE_TYPE_ERROR\
    \x10\x02B4Z2github.com/streamdal/snitch-protos/build/go/protosJ\xaf\x14\
    \n\x06\x12\x04\0\0U\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\
    \x12\x03\x02\0\x0f\n\x08\n\x01\x08\x12\x03\x04\0I\n\t\n\x02\x08\x0b\x12\
    \x03\x04\0I\n;\n\x02\x04\0\x12\x04\x07\0\x0c\x01\x1a/\x20Common\x20respo\
    nse\x20message\x20for\x20many\x20gRPC\x20methods\n\n\n\n\x03\x04\0\x01\
    \x12\x03\x07\x08\x18\n8\n\x04\x04\0\x02\0\x12\x03\t\x02\x10\x1a+\x20Co-r\
    elation\x20ID\x20for\x20the\x20request\x20/\x20response\n\n\x0c\n\x05\
    \x04\0\x02\0\x05\x12\x03\t\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\t\
    \t\x0b\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\t\x0e\x0f\n\x0b\n\x04\x04\0\
    \x02\x01\x12\x03\n\x02\x18\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\n\x02\
    \x0e\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\n\x0f\x13\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03\n\x16\x17\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x0b\x02\
    \x15\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x0b\x02\x08\n\x0c\n\x05\x04\0\
    \x02\x02\x01\x12\x03\x0b\t\x10\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x0b\
    \x13\x14\n?\n\x02\x05\0\x12\x04\x0f\0\x16\x01\x1a3\x20Common\x20status\
    \x20codes\x20used\x20in\x20gRPC\x20method\x20responses\n\n\n\n\x03\x05\0\
    \x01\x12\x03\x0f\x05\x11\n\x0b\n\x04\x05\0\x02\0\x12\x03\x10\x02\x19\n\
    \x0c\n\x05\x05\0\x02\0\x01\x12\x03\x10\x02\x15\n\x0c\n\x05\x05\0\x02\0\
    \x02\x12\x03\x10\x17\x18\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x11\x02\x17\n\
    \x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x11\x02\x12\n\x0c\n\x05\x05\0\x02\
    \x01\x02\x12\x03\x11\x15\x16\n\x0b\n\x04\x05\0\x02\x02\x12\x03\x12\x02\
    \x20\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\x12\x02\x1b\n\x0c\n\x05\x05\0\
    \x02\x02\x02\x12\x03\x12\x1e\x1f\n\x0b\n\x04\x05\0\x02\x03\x12\x03\x13\
    \x02\x1e\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03\x13\x02\x19\n\x0c\n\x05\
    \x05\0\x02\x03\x02\x12\x03\x13\x1c\x1d\n\x0b\n\x04\x05\0\x02\x04\x12\x03\
    \x14\x02*\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03\x14\x02%\n\x0c\n\x05\x05\
    \0\x02\x04\x02\x12\x03\x14()\n\x0b\n\x04\x05\0\x02\x05\x12\x03\x15\x02\"\
    \n\x0c\n\x05\x05\0\x02\x05\x01\x12\x03\x15\x02\x1d\n\x0c\n\x05\x05\0\x02\
    \x05\x02\x12\x03\x15\x20!\nJ\n\x02\x05\x01\x12\x04\x19\0\x1d\x01\x1a>\
    \x20Each\x20SDK\x20client\x20is\x20a\x20$service\x20+\x20$component\x20+\
    \x20$operation_type\n\n\n\n\x03\x05\x01\x01\x12\x03\x19\x05\x12\n\x0b\n\
    \x04\x05\x01\x02\0\x12\x03\x1a\x02\x1b\n\x0c\n\x05\x05\x01\x02\0\x01\x12\
    \x03\x1a\x02\x16\n\x0c\n\x05\x05\x01\x02\0\x02\x12\x03\x1a\x19\x1a\n\x0b\
    \n\x04\x05\x01\x02\x01\x12\x03\x1b\x02\x1e\n\x0c\n\x05\x05\x01\x02\x01\
    \x01\x12\x03\x1b\x02\x19\n\x0c\n\x05\x05\x01\x02\x01\x02\x12\x03\x1b\x1c\
    \x1d\n\x0b\n\x04\x05\x01\x02\x02\x12\x03\x1c\x02\x1e\n\x0c\n\x05\x05\x01\
    \x02\x02\x01\x12\x03\x1c\x02\x19\n\x0c\n\x05\x05\x01\x02\x02\x02\x12\x03\
    \x1c\x1c\x1d\n<\n\x02\x04\x01\x12\x04\x20\0-\x01\x1a0\x20Used\x20to\x20i\
    ndicate\x20who\x20a\x20command\x20is\x20intended\x20for\n\n\n\n\x03\x04\
    \x01\x01\x12\x03\x20\x08\x10\nm\n\x04\x04\x01\x02\0\x12\x03#\x02\x1a\x1a\
    `\x20Name\x20of\x20the\x20service\x20--\x20let's\x20include\x20the\x20se\
    rvice\x20name\x20on\x20all\x20calls,\x20we\x20can\n\x20optimize\x20later\
    \x20~DS\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03#\x02\x08\n\x0c\n\x05\x04\
    \x01\x02\0\x01\x12\x03#\t\x15\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03#\x18\
    \x19\nX\n\x04\x04\x01\x02\x01\x12\x03&\x02\x1c\x1aK\x20Name\x20of\x20the\
    \x20component\x20the\x20SDK\x20is\x20interacting\x20with\x20(ie.\x20kafk\
    a-$topic-name)\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03&\x02\x08\n\x0c\
    \n\x05\x04\x01\x02\x01\x01\x12\x03&\t\x17\n\x0c\n\x05\x04\x01\x02\x01\
    \x03\x12\x03&\x1a\x1b\n#\n\x04\x04\x01\x02\x02\x12\x03)\x02#\x1a\x16\x20\
    Consumer\x20or\x20Producer\n\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03)\
    \x02\x0f\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03)\x10\x1e\n\x0c\n\x05\
    \x04\x01\x02\x02\x03\x12\x03)!\"\n0\n\x04\x04\x01\x02\x03\x12\x03,\x02\
    \x1c\x1a#\x20Name\x20for\x20the\x20consumer\x20or\x20producer\n\n\x0c\n\
    \x05\x04\x01\x02\x03\x05\x12\x03,\x02\x08\n\x0c\n\x05\x04\x01\x02\x03\
    \x01\x12\x03,\t\x17\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03,\x1a\x1b\n\n\
    \n\x02\x04\x02\x12\x04/\03\x01\n\n\n\x03\x04\x02\x01\x12\x03/\x08\x0e\n\
    \x0b\n\x04\x04\x02\x02\0\x12\x030\x02\x12\n\x0c\n\x05\x04\x02\x02\0\x05\
    \x12\x030\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x030\t\r\n\x0c\n\x05\
    \x04\x02\x02\0\x03\x12\x030\x10\x11\n\x0b\n\x04\x04\x02\x02\x01\x12\x031\
    \x02!\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x031\x02\x15\n\x0c\n\x05\x04\
    \x02\x02\x01\x01\x12\x031\x16\x1c\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\
    \x031\x1f\x20\n\x0b\n\x04\x04\x02\x02\x02\x12\x032\x02\x13\n\x0c\n\x05\
    \x04\x02\x02\x02\x05\x12\x032\x02\x08\n\x0c\n\x05\x04\x02\x02\x02\x01\
    \x12\x032\t\x0e\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x032\x11\x12\n\n\n\
    \x02\x04\x03\x12\x045\08\x01\n\n\n\x03\x04\x03\x01\x12\x035\x08\x13\n\
    \x0b\n\x04\x04\x03\x02\0\x12\x036\x02\x18\n\x0c\n\x05\x04\x03\x02\0\x06\
    \x12\x036\x02\n\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x036\x0b\x13\n\x0c\n\
    \x05\x04\x03\x02\0\x03\x12\x036\x16\x17\n\x0b\n\x04\x04\x03\x02\x01\x12\
    \x037\x02\x19\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x037\x02\x08\n\x0c\n\
    \x05\x04\x03\x02\x01\x01\x12\x037\t\x14\n\x0c\n\x05\x04\x03\x02\x01\x03\
    \x12\x037\x17\x18\n\n\n\x02\x05\x02\x12\x04:\0>\x01\n\n\n\x03\x05\x02\
    \x01\x12\x03:\x05\x15\n\x0b\n\x04\x05\x02\x02\0\x12\x03;\x02\x1f\n\x0c\n\
    \x05\x05\x02\x02\0\x01\x12\x03;\x02\x1a\n\x0c\n\x05\x05\x02\x02\0\x02\
    \x12\x03;\x1d\x1e\n\x0b\n\x04\x05\x02\x02\x01\x12\x03<\x02!\n\x0c\n\x05\
    \x05\x02\x02\x01\x01\x12\x03<\x02\x1c\n\x0c\n\x05\x05\x02\x02\x01\x02\
    \x12\x03<\x1f\x20\n\x0b\n\x04\x05\x02\x02\x02\x12\x03=\x02\x1f\n\x0c\n\
    \x05\x05\x02\x02\x02\x01\x12\x03=\x02\x1a\n\x0c\n\x05\x05\x02\x02\x02\
    \x02\x12\x03=\x1d\x1e\n\x9d\x01\n\x02\x04\x04\x12\x04B\0Q\x01\x1a\x90\
    \x01\x20TailResponse\x20originates\x20in\x20the\x20SDK\x20and\x20then\
    \x20is\x20sent\x20to\x20snitch\x20servers\x20where\n\x20it\x20is\x20forw\
    arded\x20to\x20the\x20correct\x20frontend\x20streaming\x20gRPC\x20connec\
    tion\n\n\n\n\x03\x04\x04\x01\x12\x03B\x08\x14\n\x0b\n\x04\x04\x04\x02\0\
    \x12\x03C\x02\x1c\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03C\x02\x12\n\x0c\n\
    \x05\x04\x04\x02\0\x01\x12\x03C\x13\x17\n\x0c\n\x05\x04\x04\x02\0\x03\
    \x12\x03C\x1a\x1b\n\x0b\n\x04\x04\x04\x02\x01\x12\x03E\x02\x18\n\x0c\n\
    \x05\x04\x04\x02\x01\x06\x12\x03E\x02\n\n\x0c\n\x05\x04\x04\x02\x01\x01\
    \x12\x03E\x0b\x13\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03E\x16\x17\n\x0b\
    \n\x04\x04\x04\x02\x02\x12\x03G\x02\x19\n\x0c\n\x05\x04\x04\x02\x02\x05\
    \x12\x03G\x02\x08\n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x03G\t\x14\n\x0c\n\
    \x05\x04\x04\x02\x02\x03\x12\x03G\x17\x18\n\x0b\n\x04\x04\x04\x02\x03\
    \x12\x03I\x02\x18\n\x0c\n\x05\x04\x04\x02\x03\x05\x12\x03I\x02\x08\n\x0c\
    \n\x05\x04\x04\x02\x03\x01\x12\x03I\t\x13\n\x0c\n\x05\x04\x04\x02\x03\
    \x03\x12\x03I\x16\x17\n'\n\x04\x04\x04\x02\x04\x12\x03L\x02\x19\x1a\x1a\
    \x20Timestamp\x20in\x20nanoseconds\n\n\x0c\n\x05\x04\x04\x02\x04\x05\x12\
    \x03L\x02\x07\n\x0c\n\x05\x04\x04\x02\x04\x01\x12\x03L\x08\x14\n\x0c\n\
    \x05\x04\x04\x02\x04\x03\x12\x03L\x17\x18\n\x8e\x01\n\x04\x04\x04\x02\
    \x05\x12\x03P\x02\x11\x1a\x80\x01\x20Payload\x20data.\x20For\x20errors,\
    \x20this\x20will\x20be\x20the\x20error\x20message\n\x20For\x20payloads,\
    \x20this\x20will\x20be\x20JSON\x20of\x20the\x20payload\x20data,\x20post\
    \x20processing\n\n\x0c\n\x05\x04\x04\x02\x05\x05\x12\x03P\x02\x07\n\x0c\
    \n\x05\x04\x04\x02\x05\x01\x12\x03P\x08\x0c\n\x0c\n\x05\x04\x04\x02\x05\
    \x03\x12\x03P\x0f\x10\n\n\n\x02\x04\x05\x12\x04S\0U\x01\n\n\n\x03\x04\
    \x05\x01\x12\x03S\x08\x13\n\x0b\n\x04\x04\x05\x02\0\x12\x03T\x02\x1a\n\
    \x0c\n\x05\x04\x05\x02\0\x06\x12\x03T\x02\r\n\x0c\n\x05\x04\x05\x02\0\
    \x01\x12\x03T\x0e\x15\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03T\x18\x19b\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(StandardResponse::generated_message_descriptor_data());
            messages.push(Audience::generated_message_descriptor_data());
            messages.push(Metric::generated_message_descriptor_data());
            messages.push(TailRequest::generated_message_descriptor_data());
            messages.push(TailResponse::generated_message_descriptor_data());
            messages.push(TailCommand::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(3);
            enums.push(ResponseCode::generated_enum_descriptor_data());
            enums.push(OperationType::generated_enum_descriptor_data());
            enums.push(TailResponseType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
