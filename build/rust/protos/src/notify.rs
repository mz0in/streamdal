// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `notify.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.NotifyConfig)
pub struct NotifyConfig {
    // message fields
    // @@protoc_insertion_point(field:protos.NotifyConfig.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:protos.NotifyConfig.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:protos.NotifyConfig.type)
    pub type_: ::protobuf::EnumOrUnknown<NotifyType>,
    // @@protoc_insertion_point(field:protos.NotifyConfig.pipelines)
    pub pipelines: ::std::vec::Vec<::std::string::String>,
    // message oneof groups
    pub config: ::std::option::Option<notify_config::Config>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.NotifyConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NotifyConfig {
    fn default() -> &'a NotifyConfig {
        <NotifyConfig as ::protobuf::Message>::default_instance()
    }
}

impl NotifyConfig {
    pub fn new() -> NotifyConfig {
        ::std::default::Default::default()
    }

    // .protos.NotifySlack slack = 1000;

    pub fn slack(&self) -> &NotifySlack {
        match self.config {
            ::std::option::Option::Some(notify_config::Config::Slack(ref v)) => v,
            _ => <NotifySlack as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_slack(&mut self) {
        self.config = ::std::option::Option::None;
    }

    pub fn has_slack(&self) -> bool {
        match self.config {
            ::std::option::Option::Some(notify_config::Config::Slack(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_slack(&mut self, v: NotifySlack) {
        self.config = ::std::option::Option::Some(notify_config::Config::Slack(v))
    }

    // Mutable pointer to the field.
    pub fn mut_slack(&mut self) -> &mut NotifySlack {
        if let ::std::option::Option::Some(notify_config::Config::Slack(_)) = self.config {
        } else {
            self.config = ::std::option::Option::Some(notify_config::Config::Slack(NotifySlack::new()));
        }
        match self.config {
            ::std::option::Option::Some(notify_config::Config::Slack(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_slack(&mut self) -> NotifySlack {
        if self.has_slack() {
            match self.config.take() {
                ::std::option::Option::Some(notify_config::Config::Slack(v)) => v,
                _ => panic!(),
            }
        } else {
            NotifySlack::new()
        }
    }

    // .protos.NotifyEmail email = 1001;

    pub fn email(&self) -> &NotifyEmail {
        match self.config {
            ::std::option::Option::Some(notify_config::Config::Email(ref v)) => v,
            _ => <NotifyEmail as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_email(&mut self) {
        self.config = ::std::option::Option::None;
    }

    pub fn has_email(&self) -> bool {
        match self.config {
            ::std::option::Option::Some(notify_config::Config::Email(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_email(&mut self, v: NotifyEmail) {
        self.config = ::std::option::Option::Some(notify_config::Config::Email(v))
    }

    // Mutable pointer to the field.
    pub fn mut_email(&mut self) -> &mut NotifyEmail {
        if let ::std::option::Option::Some(notify_config::Config::Email(_)) = self.config {
        } else {
            self.config = ::std::option::Option::Some(notify_config::Config::Email(NotifyEmail::new()));
        }
        match self.config {
            ::std::option::Option::Some(notify_config::Config::Email(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_email(&mut self) -> NotifyEmail {
        if self.has_email() {
            match self.config.take() {
                ::std::option::Option::Some(notify_config::Config::Email(v)) => v,
                _ => panic!(),
            }
        } else {
            NotifyEmail::new()
        }
    }

    // .protos.NotifyPagerDuty pagerduty = 1002;

    pub fn pagerduty(&self) -> &NotifyPagerDuty {
        match self.config {
            ::std::option::Option::Some(notify_config::Config::Pagerduty(ref v)) => v,
            _ => <NotifyPagerDuty as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_pagerduty(&mut self) {
        self.config = ::std::option::Option::None;
    }

    pub fn has_pagerduty(&self) -> bool {
        match self.config {
            ::std::option::Option::Some(notify_config::Config::Pagerduty(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_pagerduty(&mut self, v: NotifyPagerDuty) {
        self.config = ::std::option::Option::Some(notify_config::Config::Pagerduty(v))
    }

    // Mutable pointer to the field.
    pub fn mut_pagerduty(&mut self) -> &mut NotifyPagerDuty {
        if let ::std::option::Option::Some(notify_config::Config::Pagerduty(_)) = self.config {
        } else {
            self.config = ::std::option::Option::Some(notify_config::Config::Pagerduty(NotifyPagerDuty::new()));
        }
        match self.config {
            ::std::option::Option::Some(notify_config::Config::Pagerduty(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_pagerduty(&mut self) -> NotifyPagerDuty {
        if self.has_pagerduty() {
            match self.config.take() {
                ::std::option::Option::Some(notify_config::Config::Pagerduty(v)) => v,
                _ => panic!(),
            }
        } else {
            NotifyPagerDuty::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &NotifyConfig| { &m.id },
            |m: &mut NotifyConfig| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &NotifyConfig| { &m.name },
            |m: &mut NotifyConfig| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &NotifyConfig| { &m.type_ },
            |m: &mut NotifyConfig| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "pipelines",
            |m: &NotifyConfig| { &m.pipelines },
            |m: &mut NotifyConfig| { &mut m.pipelines },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, NotifySlack>(
            "slack",
            NotifyConfig::has_slack,
            NotifyConfig::slack,
            NotifyConfig::mut_slack,
            NotifyConfig::set_slack,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, NotifyEmail>(
            "email",
            NotifyConfig::has_email,
            NotifyConfig::email,
            NotifyConfig::mut_email,
            NotifyConfig::set_email,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, NotifyPagerDuty>(
            "pagerduty",
            NotifyConfig::has_pagerduty,
            NotifyConfig::pagerduty,
            NotifyConfig::mut_pagerduty,
            NotifyConfig::set_pagerduty,
        ));
        oneofs.push(notify_config::Config::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NotifyConfig>(
            "NotifyConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NotifyConfig {
    const NAME: &'static str = "NotifyConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.name = is.read_string()?;
                },
                24 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                34 => {
                    self.pipelines.push(is.read_string()?);
                },
                8002 => {
                    self.config = ::std::option::Option::Some(notify_config::Config::Slack(is.read_message()?));
                },
                8010 => {
                    self.config = ::std::option::Option::Some(notify_config::Config::Email(is.read_message()?));
                },
                8018 => {
                    self.config = ::std::option::Option::Some(notify_config::Config::Pagerduty(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(NotifyType::NOTIFY_TYPE_UNSET) {
            my_size += ::protobuf::rt::int32_size(3, self.type_.value());
        }
        for value in &self.pipelines {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if let ::std::option::Option::Some(ref v) = self.config {
            match v {
                &notify_config::Config::Slack(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &notify_config::Config::Email(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &notify_config::Config::Pagerduty(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(NotifyType::NOTIFY_TYPE_UNSET) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        for v in &self.pipelines {
            os.write_string(4, &v)?;
        };
        if let ::std::option::Option::Some(ref v) = self.config {
            match v {
                &notify_config::Config::Slack(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1000, v, os)?;
                },
                &notify_config::Config::Email(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1001, v, os)?;
                },
                &notify_config::Config::Pagerduty(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1002, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NotifyConfig {
        NotifyConfig::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.type_ = ::protobuf::EnumOrUnknown::new(NotifyType::NOTIFY_TYPE_UNSET);
        self.pipelines.clear();
        self.config = ::std::option::Option::None;
        self.config = ::std::option::Option::None;
        self.config = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NotifyConfig {
        static instance: NotifyConfig = NotifyConfig {
            id: ::std::string::String::new(),
            name: ::std::string::String::new(),
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            pipelines: ::std::vec::Vec::new(),
            config: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NotifyConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NotifyConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NotifyConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NotifyConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `NotifyConfig`
pub mod notify_config {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:protos.NotifyConfig.config)
    pub enum Config {
        // @@protoc_insertion_point(oneof_field:protos.NotifyConfig.slack)
        Slack(super::NotifySlack),
        // @@protoc_insertion_point(oneof_field:protos.NotifyConfig.email)
        Email(super::NotifyEmail),
        // @@protoc_insertion_point(oneof_field:protos.NotifyConfig.pagerduty)
        Pagerduty(super::NotifyPagerDuty),
    }

    impl ::protobuf::Oneof for Config {
    }

    impl ::protobuf::OneofFull for Config {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::NotifyConfig as ::protobuf::MessageFull>::descriptor().oneof_by_name("config").unwrap()).clone()
        }
    }

    impl Config {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Config>("config")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.NotifySlack)
pub struct NotifySlack {
    // message fields
    // @@protoc_insertion_point(field:protos.NotifySlack.bot_token)
    pub bot_token: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:protos.NotifySlack.channel)
    pub channel: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.NotifySlack.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NotifySlack {
    fn default() -> &'a NotifySlack {
        <NotifySlack as ::protobuf::Message>::default_instance()
    }
}

impl NotifySlack {
    pub fn new() -> NotifySlack {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "bot_token",
            |m: &NotifySlack| { &m.bot_token },
            |m: &mut NotifySlack| { &mut m.bot_token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "channel",
            |m: &NotifySlack| { &m.channel },
            |m: &mut NotifySlack| { &mut m.channel },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NotifySlack>(
            "NotifySlack",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NotifySlack {
    const NAME: &'static str = "NotifySlack";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.bot_token = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.channel = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.bot_token.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.channel.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.bot_token.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.channel.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NotifySlack {
        NotifySlack::new()
    }

    fn clear(&mut self) {
        self.bot_token = ::std::option::Option::None;
        self.channel = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NotifySlack {
        static instance: NotifySlack = NotifySlack {
            bot_token: ::std::option::Option::None,
            channel: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NotifySlack {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NotifySlack").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NotifySlack {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NotifySlack {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.NotifyEmail)
pub struct NotifyEmail {
    // message fields
    // @@protoc_insertion_point(field:protos.NotifyEmail.recipients)
    pub recipients: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.NotifyEmail.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NotifyEmail {
    fn default() -> &'a NotifyEmail {
        <NotifyEmail as ::protobuf::Message>::default_instance()
    }
}

impl NotifyEmail {
    pub fn new() -> NotifyEmail {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "recipients",
            |m: &NotifyEmail| { &m.recipients },
            |m: &mut NotifyEmail| { &mut m.recipients },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NotifyEmail>(
            "NotifyEmail",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NotifyEmail {
    const NAME: &'static str = "NotifyEmail";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.recipients.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.recipients {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.recipients {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NotifyEmail {
        NotifyEmail::new()
    }

    fn clear(&mut self) {
        self.recipients.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NotifyEmail {
        static instance: NotifyEmail = NotifyEmail {
            recipients: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NotifyEmail {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NotifyEmail").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NotifyEmail {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NotifyEmail {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.NotifyPagerDuty)
pub struct NotifyPagerDuty {
    // message fields
    ///  Auth token
    // @@protoc_insertion_point(field:protos.NotifyPagerDuty.token)
    pub token: ::std::string::String,
    ///  Must be a valid email for a PagerDuty user
    // @@protoc_insertion_point(field:protos.NotifyPagerDuty.email)
    pub email: ::std::string::String,
    ///  Must be a valid PagerDuty service
    // @@protoc_insertion_point(field:protos.NotifyPagerDuty.service_id)
    pub service_id: ::std::string::String,
    // @@protoc_insertion_point(field:protos.NotifyPagerDuty.urgency)
    pub urgency: ::protobuf::EnumOrUnknown<notify_pager_duty::Urgency>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.NotifyPagerDuty.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NotifyPagerDuty {
    fn default() -> &'a NotifyPagerDuty {
        <NotifyPagerDuty as ::protobuf::Message>::default_instance()
    }
}

impl NotifyPagerDuty {
    pub fn new() -> NotifyPagerDuty {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "token",
            |m: &NotifyPagerDuty| { &m.token },
            |m: &mut NotifyPagerDuty| { &mut m.token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "email",
            |m: &NotifyPagerDuty| { &m.email },
            |m: &mut NotifyPagerDuty| { &mut m.email },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "service_id",
            |m: &NotifyPagerDuty| { &m.service_id },
            |m: &mut NotifyPagerDuty| { &mut m.service_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "urgency",
            |m: &NotifyPagerDuty| { &m.urgency },
            |m: &mut NotifyPagerDuty| { &mut m.urgency },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NotifyPagerDuty>(
            "NotifyPagerDuty",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NotifyPagerDuty {
    const NAME: &'static str = "NotifyPagerDuty";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.token = is.read_string()?;
                },
                18 => {
                    self.email = is.read_string()?;
                },
                26 => {
                    self.service_id = is.read_string()?;
                },
                32 => {
                    self.urgency = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.token);
        }
        if !self.email.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.email);
        }
        if !self.service_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.service_id);
        }
        if self.urgency != ::protobuf::EnumOrUnknown::new(notify_pager_duty::Urgency::URGENCY_UNSET) {
            my_size += ::protobuf::rt::int32_size(4, self.urgency.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.token.is_empty() {
            os.write_string(1, &self.token)?;
        }
        if !self.email.is_empty() {
            os.write_string(2, &self.email)?;
        }
        if !self.service_id.is_empty() {
            os.write_string(3, &self.service_id)?;
        }
        if self.urgency != ::protobuf::EnumOrUnknown::new(notify_pager_duty::Urgency::URGENCY_UNSET) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.urgency))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NotifyPagerDuty {
        NotifyPagerDuty::new()
    }

    fn clear(&mut self) {
        self.token.clear();
        self.email.clear();
        self.service_id.clear();
        self.urgency = ::protobuf::EnumOrUnknown::new(notify_pager_duty::Urgency::URGENCY_UNSET);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NotifyPagerDuty {
        static instance: NotifyPagerDuty = NotifyPagerDuty {
            token: ::std::string::String::new(),
            email: ::std::string::String::new(),
            service_id: ::std::string::String::new(),
            urgency: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NotifyPagerDuty {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NotifyPagerDuty").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NotifyPagerDuty {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NotifyPagerDuty {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `NotifyPagerDuty`
pub mod notify_pager_duty {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:protos.NotifyPagerDuty.Urgency)
    pub enum Urgency {
        // @@protoc_insertion_point(enum_value:protos.NotifyPagerDuty.Urgency.URGENCY_UNSET)
        URGENCY_UNSET = 0,
        // @@protoc_insertion_point(enum_value:protos.NotifyPagerDuty.Urgency.URGENCY_LOW)
        URGENCY_LOW = 1,
        // @@protoc_insertion_point(enum_value:protos.NotifyPagerDuty.Urgency.URGENCY_HIGH)
        URGENCY_HIGH = 2,
    }

    impl ::protobuf::Enum for Urgency {
        const NAME: &'static str = "Urgency";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Urgency> {
            match value {
                0 => ::std::option::Option::Some(Urgency::URGENCY_UNSET),
                1 => ::std::option::Option::Some(Urgency::URGENCY_LOW),
                2 => ::std::option::Option::Some(Urgency::URGENCY_HIGH),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Urgency] = &[
            Urgency::URGENCY_UNSET,
            Urgency::URGENCY_LOW,
            Urgency::URGENCY_HIGH,
        ];
    }

    impl ::protobuf::EnumFull for Urgency {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("NotifyPagerDuty.Urgency").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Urgency {
        fn default() -> Self {
            Urgency::URGENCY_UNSET
        }
    }

    impl Urgency {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Urgency>("NotifyPagerDuty.Urgency")
        }
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:protos.NotifyType)
pub enum NotifyType {
    // @@protoc_insertion_point(enum_value:protos.NotifyType.NOTIFY_TYPE_UNSET)
    NOTIFY_TYPE_UNSET = 0,
    // @@protoc_insertion_point(enum_value:protos.NotifyType.NOTIFY_TYPE_SLACK)
    NOTIFY_TYPE_SLACK = 1,
    // @@protoc_insertion_point(enum_value:protos.NotifyType.NOTIFY_TYPE_EMAIL)
    NOTIFY_TYPE_EMAIL = 2,
    // @@protoc_insertion_point(enum_value:protos.NotifyType.NOTIFY_TYPE_PAGERDUTY)
    NOTIFY_TYPE_PAGERDUTY = 3,
}

impl ::protobuf::Enum for NotifyType {
    const NAME: &'static str = "NotifyType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<NotifyType> {
        match value {
            0 => ::std::option::Option::Some(NotifyType::NOTIFY_TYPE_UNSET),
            1 => ::std::option::Option::Some(NotifyType::NOTIFY_TYPE_SLACK),
            2 => ::std::option::Option::Some(NotifyType::NOTIFY_TYPE_EMAIL),
            3 => ::std::option::Option::Some(NotifyType::NOTIFY_TYPE_PAGERDUTY),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [NotifyType] = &[
        NotifyType::NOTIFY_TYPE_UNSET,
        NotifyType::NOTIFY_TYPE_SLACK,
        NotifyType::NOTIFY_TYPE_EMAIL,
        NotifyType::NOTIFY_TYPE_PAGERDUTY,
    ];
}

impl ::protobuf::EnumFull for NotifyType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("NotifyType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for NotifyType {
    fn default() -> Self {
        NotifyType::NOTIFY_TYPE_UNSET
    }
}

impl NotifyType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<NotifyType>("NotifyType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cnotify.proto\x12\x06protos\"\x98\x02\n\x0cNotifyConfig\x12\x0e\n\
    \x02id\x18\x01\x20\x01(\tR\x02id\x12\x12\n\x04name\x18\x02\x20\x01(\tR\
    \x04name\x12&\n\x04type\x18\x03\x20\x01(\x0e2\x12.protos.NotifyTypeR\x04\
    type\x12\x1c\n\tpipelines\x18\x04\x20\x03(\tR\tpipelines\x12,\n\x05slack\
    \x18\xe8\x07\x20\x01(\x0b2\x13.protos.NotifySlackH\0R\x05slack\x12,\n\
    \x05email\x18\xe9\x07\x20\x01(\x0b2\x13.protos.NotifyEmailH\0R\x05email\
    \x128\n\tpagerduty\x18\xea\x07\x20\x01(\x0b2\x17.protos.NotifyPagerDutyH\
    \0R\tpagerdutyB\x08\n\x06config\"h\n\x0bNotifySlack\x12\x20\n\tbot_token\
    \x18\x01\x20\x01(\tH\0R\x08botToken\x88\x01\x01\x12\x1d\n\x07channel\x18\
    \x02\x20\x01(\tH\x01R\x07channel\x88\x01\x01B\x0c\n\n_bot_tokenB\n\n\x08\
    _channel\"-\n\x0bNotifyEmail\x12\x1e\n\nrecipients\x18\x01\x20\x03(\tR\n\
    recipients\"\xd8\x01\n\x0fNotifyPagerDuty\x12\x14\n\x05token\x18\x01\x20\
    \x01(\tR\x05token\x12\x14\n\x05email\x18\x02\x20\x01(\tR\x05email\x12\
    \x1d\n\nservice_id\x18\x03\x20\x01(\tR\tserviceId\x129\n\x07urgency\x18\
    \x04\x20\x01(\x0e2\x1f.protos.NotifyPagerDuty.UrgencyR\x07urgency\"?\n\
    \x07Urgency\x12\x11\n\rURGENCY_UNSET\x10\0\x12\x0f\n\x0bURGENCY_LOW\x10\
    \x01\x12\x10\n\x0cURGENCY_HIGH\x10\x02*l\n\nNotifyType\x12\x15\n\x11NOTI\
    FY_TYPE_UNSET\x10\0\x12\x15\n\x11NOTIFY_TYPE_SLACK\x10\x01\x12\x15\n\x11\
    NOTIFY_TYPE_EMAIL\x10\x02\x12\x19\n\x15NOTIFY_TYPE_PAGERDUTY\x10\x03B4Z2\
    github.com/streamdal/snitch-protos/build/go/protosJ\xad\x0b\n\x06\x12\
    \x04\0\07\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\
    \x02\0\x0f\n\x08\n\x01\x08\x12\x03\x04\0I\n\t\n\x02\x08\x0b\x12\x03\x04\
    \0I\n\n\n\x02\x05\0\x12\x04\x06\0\x0b\x01\n\n\n\x03\x05\0\x01\x12\x03\
    \x06\x05\x0f\n\x0b\n\x04\x05\0\x02\0\x12\x03\x07\x02\x18\n\x0c\n\x05\x05\
    \0\x02\0\x01\x12\x03\x07\x02\x13\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x07\
    \x16\x17\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x08\x02\x18\n\x0c\n\x05\x05\0\
    \x02\x01\x01\x12\x03\x08\x02\x13\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\
    \x08\x16\x17\n\x0b\n\x04\x05\0\x02\x02\x12\x03\t\x02\x18\n\x0c\n\x05\x05\
    \0\x02\x02\x01\x12\x03\t\x02\x13\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\t\
    \x16\x17\n\x0b\n\x04\x05\0\x02\x03\x12\x03\n\x02\x1c\n\x0c\n\x05\x05\0\
    \x02\x03\x01\x12\x03\n\x02\x17\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03\n\
    \x1a\x1b\n\n\n\x02\x04\0\x12\x04\r\0\x1b\x01\n\n\n\x03\x04\0\x01\x12\x03\
    \r\x08\x14\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0e\x02\x10\n\x0c\n\x05\x04\0\
    \x02\0\x05\x12\x03\x0e\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0e\t\
    \x0b\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0e\x0e\x0f\n\x0b\n\x04\x04\0\
    \x02\x01\x12\x03\x10\x02\x12\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x10\
    \x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x10\t\r\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03\x10\x10\x11\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x12\
    \x02\x16\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x12\x02\x0c\n\x0c\n\x05\
    \x04\0\x02\x02\x01\x12\x03\x12\r\x11\n\x0c\n\x05\x04\0\x02\x02\x03\x12\
    \x03\x12\x14\x15\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x14\x02\x20\n\x0c\n\
    \x05\x04\0\x02\x03\x04\x12\x03\x14\x02\n\n\x0c\n\x05\x04\0\x02\x03\x05\
    \x12\x03\x14\x0b\x11\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x14\x12\x1b\n\
    \x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x14\x1e\x1f\n\x0c\n\x04\x04\0\x08\0\
    \x12\x04\x16\x02\x1a\x03\n\x0c\n\x05\x04\0\x08\0\x01\x12\x03\x16\x08\x0e\
    \n\x0b\n\x04\x04\0\x02\x04\x12\x03\x17\x04\x1d\n\x0c\n\x05\x04\0\x02\x04\
    \x06\x12\x03\x17\x04\x0f\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x17\x10\
    \x15\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x17\x18\x1c\n\x0b\n\x04\x04\0\
    \x02\x05\x12\x03\x18\x04\x1d\n\x0c\n\x05\x04\0\x02\x05\x06\x12\x03\x18\
    \x04\x0f\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x18\x10\x15\n\x0c\n\x05\
    \x04\0\x02\x05\x03\x12\x03\x18\x18\x1c\n\x0b\n\x04\x04\0\x02\x06\x12\x03\
    \x19\x04%\n\x0c\n\x05\x04\0\x02\x06\x06\x12\x03\x19\x04\x13\n\x0c\n\x05\
    \x04\0\x02\x06\x01\x12\x03\x19\x14\x1d\n\x0c\n\x05\x04\0\x02\x06\x03\x12\
    \x03\x19\x20$\n\n\n\x02\x04\x01\x12\x04\x1d\0\x20\x01\n\n\n\x03\x04\x01\
    \x01\x12\x03\x1d\x08\x13\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x1e\x02\x20\n\
    \x0c\n\x05\x04\x01\x02\0\x04\x12\x03\x1e\x02\n\n\x0c\n\x05\x04\x01\x02\0\
    \x05\x12\x03\x1e\x0b\x11\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x1e\x12\
    \x1b\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x1e\x1e\x1f\n\x0b\n\x04\x04\
    \x01\x02\x01\x12\x03\x1f\x02\x1e\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03\
    \x1f\x02\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x1f\x0b\x11\n\x0c\n\
    \x05\x04\x01\x02\x01\x01\x12\x03\x1f\x12\x19\n\x0c\n\x05\x04\x01\x02\x01\
    \x03\x12\x03\x1f\x1c\x1d\n\n\n\x02\x04\x02\x12\x04\"\0$\x01\n\n\n\x03\
    \x04\x02\x01\x12\x03\"\x08\x13\n\x0b\n\x04\x04\x02\x02\0\x12\x03#\x02!\n\
    \x0c\n\x05\x04\x02\x02\0\x04\x12\x03#\x02\n\n\x0c\n\x05\x04\x02\x02\0\
    \x05\x12\x03#\x0b\x11\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03#\x12\x1c\n\
    \x0c\n\x05\x04\x02\x02\0\x03\x12\x03#\x1f\x20\n\n\n\x02\x04\x03\x12\x04&\
    \07\x01\n\n\n\x03\x04\x03\x01\x12\x03&\x08\x17\n\x0c\n\x04\x04\x03\x04\0\
    \x12\x04'\x02+\x03\n\x0c\n\x05\x04\x03\x04\0\x01\x12\x03'\x07\x0e\n\r\n\
    \x06\x04\x03\x04\0\x02\0\x12\x03(\x04\x16\n\x0e\n\x07\x04\x03\x04\0\x02\
    \0\x01\x12\x03(\x04\x11\n\x0e\n\x07\x04\x03\x04\0\x02\0\x02\x12\x03(\x14\
    \x15\n\r\n\x06\x04\x03\x04\0\x02\x01\x12\x03)\x04\x14\n\x0e\n\x07\x04\
    \x03\x04\0\x02\x01\x01\x12\x03)\x04\x0f\n\x0e\n\x07\x04\x03\x04\0\x02\
    \x01\x02\x12\x03)\x12\x13\n\r\n\x06\x04\x03\x04\0\x02\x02\x12\x03*\x04\
    \x15\n\x0e\n\x07\x04\x03\x04\0\x02\x02\x01\x12\x03*\x04\x10\n\x0e\n\x07\
    \x04\x03\x04\0\x02\x02\x02\x12\x03*\x13\x14\n\x19\n\x04\x04\x03\x02\0\
    \x12\x03.\x02\x13\x1a\x0c\x20Auth\x20token\n\n\x0c\n\x05\x04\x03\x02\0\
    \x05\x12\x03.\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03.\t\x0e\n\x0c\
    \n\x05\x04\x03\x02\0\x03\x12\x03.\x11\x12\n9\n\x04\x04\x03\x02\x01\x12\
    \x031\x02\x13\x1a,\x20Must\x20be\x20a\x20valid\x20email\x20for\x20a\x20P\
    agerDuty\x20user\n\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x031\x02\x08\n\
    \x0c\n\x05\x04\x03\x02\x01\x01\x12\x031\t\x0e\n\x0c\n\x05\x04\x03\x02\
    \x01\x03\x12\x031\x11\x12\n0\n\x04\x04\x03\x02\x02\x12\x034\x02\x18\x1a#\
    \x20Must\x20be\x20a\x20valid\x20PagerDuty\x20service\n\n\x0c\n\x05\x04\
    \x03\x02\x02\x05\x12\x034\x02\x08\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\
    \x034\t\x13\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x034\x16\x17\n\x0b\n\x04\
    \x04\x03\x02\x03\x12\x036\x02\x16\n\x0c\n\x05\x04\x03\x02\x03\x06\x12\
    \x036\x02\t\n\x0c\n\x05\x04\x03\x02\x03\x01\x12\x036\n\x11\n\x0c\n\x05\
    \x04\x03\x02\x03\x03\x12\x036\x14\x15b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(NotifyConfig::generated_message_descriptor_data());
            messages.push(NotifySlack::generated_message_descriptor_data());
            messages.push(NotifyEmail::generated_message_descriptor_data());
            messages.push(NotifyPagerDuty::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(NotifyType::generated_enum_descriptor_data());
            enums.push(notify_pager_duty::Urgency::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
