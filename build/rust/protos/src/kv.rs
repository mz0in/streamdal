// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `kv.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

///  Represents a single KV object
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.KVObject)
pub struct KVObject {
    // message fields
    ///  Key regex: /^[a-zA-Z0-9_-:]+$/)
    // @@protoc_insertion_point(field:protos.KVObject.key)
    pub key: ::std::string::String,
    ///  KV value
    // @@protoc_insertion_point(field:protos.KVObject.value)
    pub value: ::std::vec::Vec<u8>,
    ///  When was this object created
    // @@protoc_insertion_point(field:protos.KVObject.created_at_unix_ts_nano_utc)
    pub created_at_unix_ts_nano_utc: i64,
    ///  Last time the object was updated
    // @@protoc_insertion_point(field:protos.KVObject.updated_at_unix_ts_nano_utc)
    pub updated_at_unix_ts_nano_utc: i64,
    // special fields
    // @@protoc_insertion_point(special_field:protos.KVObject.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KVObject {
    fn default() -> &'a KVObject {
        <KVObject as ::protobuf::Message>::default_instance()
    }
}

impl KVObject {
    pub fn new() -> KVObject {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &KVObject| { &m.key },
            |m: &mut KVObject| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &KVObject| { &m.value },
            |m: &mut KVObject| { &mut m.value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "created_at_unix_ts_nano_utc",
            |m: &KVObject| { &m.created_at_unix_ts_nano_utc },
            |m: &mut KVObject| { &mut m.created_at_unix_ts_nano_utc },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "updated_at_unix_ts_nano_utc",
            |m: &KVObject| { &m.updated_at_unix_ts_nano_utc },
            |m: &mut KVObject| { &mut m.updated_at_unix_ts_nano_utc },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KVObject>(
            "KVObject",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KVObject {
    const NAME: &'static str = "KVObject";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = is.read_string()?;
                },
                18 => {
                    self.value = is.read_bytes()?;
                },
                24 => {
                    self.created_at_unix_ts_nano_utc = is.read_int64()?;
                },
                32 => {
                    self.updated_at_unix_ts_nano_utc = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.value);
        }
        if self.created_at_unix_ts_nano_utc != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.created_at_unix_ts_nano_utc);
        }
        if self.updated_at_unix_ts_nano_utc != 0 {
            my_size += ::protobuf::rt::int64_size(4, self.updated_at_unix_ts_nano_utc);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_bytes(2, &self.value)?;
        }
        if self.created_at_unix_ts_nano_utc != 0 {
            os.write_int64(3, self.created_at_unix_ts_nano_utc)?;
        }
        if self.updated_at_unix_ts_nano_utc != 0 {
            os.write_int64(4, self.updated_at_unix_ts_nano_utc)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KVObject {
        KVObject::new()
    }

    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.created_at_unix_ts_nano_utc = 0;
        self.updated_at_unix_ts_nano_utc = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KVObject {
        static instance: KVObject = KVObject {
            key: ::std::string::String::new(),
            value: ::std::vec::Vec::new(),
            created_at_unix_ts_nano_utc: 0,
            updated_at_unix_ts_nano_utc: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KVObject {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KVObject").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KVObject {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KVObject {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Container for one or more KVObject's; snitch-server broadcasts KVCommand that
///  contains one or more of these instructions when a "POST /api/v1/kv" request
///  is made.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.KVInstruction)
pub struct KVInstruction {
    // message fields
    ///  Unique ID for this instruction
    // @@protoc_insertion_point(field:protos.KVInstruction.id)
    pub id: ::std::string::String,
    ///  What kind of an action is this?
    // @@protoc_insertion_point(field:protos.KVInstruction.action)
    pub action: ::protobuf::EnumOrUnknown<KVAction>,
    ///  KV object
    // @@protoc_insertion_point(field:protos.KVInstruction.object)
    pub object: ::protobuf::MessageField<KVObject>,
    ///  When this instruction was requested (usually will be the HTTP API request time)
    // @@protoc_insertion_point(field:protos.KVInstruction.requested_at_unix_ts_nano_utc)
    pub requested_at_unix_ts_nano_utc: i64,
    // special fields
    // @@protoc_insertion_point(special_field:protos.KVInstruction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KVInstruction {
    fn default() -> &'a KVInstruction {
        <KVInstruction as ::protobuf::Message>::default_instance()
    }
}

impl KVInstruction {
    pub fn new() -> KVInstruction {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &KVInstruction| { &m.id },
            |m: &mut KVInstruction| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "action",
            |m: &KVInstruction| { &m.action },
            |m: &mut KVInstruction| { &mut m.action },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, KVObject>(
            "object",
            |m: &KVInstruction| { &m.object },
            |m: &mut KVInstruction| { &mut m.object },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "requested_at_unix_ts_nano_utc",
            |m: &KVInstruction| { &m.requested_at_unix_ts_nano_utc },
            |m: &mut KVInstruction| { &mut m.requested_at_unix_ts_nano_utc },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KVInstruction>(
            "KVInstruction",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KVInstruction {
    const NAME: &'static str = "KVInstruction";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                16 => {
                    self.action = is.read_enum_or_unknown()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.object)?;
                },
                32 => {
                    self.requested_at_unix_ts_nano_utc = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if self.action != ::protobuf::EnumOrUnknown::new(KVAction::KV_ACTION_UNSET) {
            my_size += ::protobuf::rt::int32_size(2, self.action.value());
        }
        if let Some(v) = self.object.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.requested_at_unix_ts_nano_utc != 0 {
            my_size += ::protobuf::rt::int64_size(4, self.requested_at_unix_ts_nano_utc);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if self.action != ::protobuf::EnumOrUnknown::new(KVAction::KV_ACTION_UNSET) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.action))?;
        }
        if let Some(v) = self.object.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if self.requested_at_unix_ts_nano_utc != 0 {
            os.write_int64(4, self.requested_at_unix_ts_nano_utc)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KVInstruction {
        KVInstruction::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.action = ::protobuf::EnumOrUnknown::new(KVAction::KV_ACTION_UNSET);
        self.object.clear();
        self.requested_at_unix_ts_nano_utc = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KVInstruction {
        static instance: KVInstruction = KVInstruction {
            id: ::std::string::String::new(),
            action: ::protobuf::EnumOrUnknown::from_i32(0),
            object: ::protobuf::MessageField::none(),
            requested_at_unix_ts_nano_utc: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KVInstruction {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KVInstruction").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KVInstruction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KVInstruction {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  "POST /api/v1/kv" accepts JSON of this type for it's request payload. This is
///  converted by BroadcastKV() to a KVCommand
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.KVCreateRequest)
pub struct KVCreateRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.KVCreateRequest.overwrite)
    pub overwrite: bool,
    // @@protoc_insertion_point(field:protos.KVCreateRequest.kvs)
    pub kvs: ::std::vec::Vec<KVObject>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.KVCreateRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KVCreateRequest {
    fn default() -> &'a KVCreateRequest {
        <KVCreateRequest as ::protobuf::Message>::default_instance()
    }
}

impl KVCreateRequest {
    pub fn new() -> KVCreateRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "overwrite",
            |m: &KVCreateRequest| { &m.overwrite },
            |m: &mut KVCreateRequest| { &mut m.overwrite },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "kvs",
            |m: &KVCreateRequest| { &m.kvs },
            |m: &mut KVCreateRequest| { &mut m.kvs },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KVCreateRequest>(
            "KVCreateRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KVCreateRequest {
    const NAME: &'static str = "KVCreateRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.overwrite = is.read_bool()?;
                },
                18 => {
                    self.kvs.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.overwrite != false {
            my_size += 1 + 1;
        }
        for value in &self.kvs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.overwrite != false {
            os.write_bool(1, self.overwrite)?;
        }
        for v in &self.kvs {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KVCreateRequest {
        KVCreateRequest::new()
    }

    fn clear(&mut self) {
        self.overwrite = false;
        self.kvs.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KVCreateRequest {
        static instance: KVCreateRequest = KVCreateRequest {
            overwrite: false,
            kvs: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KVCreateRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KVCreateRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KVCreateRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KVCreateRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:protos.KVAction)
pub enum KVAction {
    // @@protoc_insertion_point(enum_value:protos.KVAction.KV_ACTION_UNSET)
    KV_ACTION_UNSET = 0,
    // @@protoc_insertion_point(enum_value:protos.KVAction.KV_ACTION_CREATE)
    KV_ACTION_CREATE = 1,
    // @@protoc_insertion_point(enum_value:protos.KVAction.KV_ACTION_UPDATE)
    KV_ACTION_UPDATE = 2,
    // @@protoc_insertion_point(enum_value:protos.KVAction.KV_ACTION_DELETE)
    KV_ACTION_DELETE = 3,
}

impl ::protobuf::Enum for KVAction {
    const NAME: &'static str = "KVAction";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<KVAction> {
        match value {
            0 => ::std::option::Option::Some(KVAction::KV_ACTION_UNSET),
            1 => ::std::option::Option::Some(KVAction::KV_ACTION_CREATE),
            2 => ::std::option::Option::Some(KVAction::KV_ACTION_UPDATE),
            3 => ::std::option::Option::Some(KVAction::KV_ACTION_DELETE),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [KVAction] = &[
        KVAction::KV_ACTION_UNSET,
        KVAction::KV_ACTION_CREATE,
        KVAction::KV_ACTION_UPDATE,
        KVAction::KV_ACTION_DELETE,
    ];
}

impl ::protobuf::EnumFull for KVAction {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("KVAction").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for KVAction {
    fn default() -> Self {
        KVAction::KV_ACTION_UNSET
    }
}

impl KVAction {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<KVAction>("KVAction")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x08kv.proto\x12\x06protos\"\xac\x01\n\x08KVObject\x12\x10\n\x03key\
    \x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\x0cR\x05\
    value\x12;\n\x1bcreated_at_unix_ts_nano_utc\x18\x03\x20\x01(\x03R\x16cre\
    atedAtUnixTsNanoUtc\x12;\n\x1bupdated_at_unix_ts_nano_utc\x18\x04\x20\
    \x01(\x03R\x16updatedAtUnixTsNanoUtc\"\xb4\x01\n\rKVInstruction\x12\x0e\
    \n\x02id\x18\x01\x20\x01(\tR\x02id\x12(\n\x06action\x18\x02\x20\x01(\x0e\
    2\x10.protos.KVActionR\x06action\x12(\n\x06object\x18\x03\x20\x01(\x0b2\
    \x10.protos.KVObjectR\x06object\x12?\n\x1drequested_at_unix_ts_nano_utc\
    \x18\x04\x20\x01(\x03R\x18requestedAtUnixTsNanoUtc\"S\n\x0fKVCreateReque\
    st\x12\x1c\n\toverwrite\x18\x01\x20\x01(\x08R\toverwrite\x12\"\n\x03kvs\
    \x18\x02\x20\x03(\x0b2\x10.protos.KVObjectR\x03kvs*a\n\x08KVAction\x12\
    \x13\n\x0fKV_ACTION_UNSET\x10\0\x12\x14\n\x10KV_ACTION_CREATE\x10\x01\
    \x12\x14\n\x10KV_ACTION_UPDATE\x10\x02\x12\x14\n\x10KV_ACTION_DELETE\x10\
    \x03B4Z2github.com/streamdal/snitch-protos/build/go/protosJ\x91\r\n\x06\
    \x12\x04\0\02\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\
    \x03\x02\0\x0f\n\x08\n\x01\x08\x12\x03\x04\0I\n\t\n\x02\x08\x0b\x12\x03\
    \x04\0I\n\n\n\x02\x05\0\x12\x04\x06\0\x0b\x01\n\n\n\x03\x05\0\x01\x12\
    \x03\x06\x05\r\n=\n\x04\x05\0\x02\0\x12\x03\x07\x02\x16\"0\x20protolint:\
    disable:this\x20ENUM_FIELD_NAMES_PREFIX\n\n\x0c\n\x05\x05\0\x02\0\x01\
    \x12\x03\x07\x02\x11\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x07\x14\x15\n=\
    \n\x04\x05\0\x02\x01\x12\x03\x08\x02\x17\"0\x20protolint:disable:this\
    \x20ENUM_FIELD_NAMES_PREFIX\n\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x08\
    \x02\x12\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x08\x15\x16\n=\n\x04\x05\
    \0\x02\x02\x12\x03\t\x02\x17\"0\x20protolint:disable:this\x20ENUM_FIELD_\
    NAMES_PREFIX\n\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\t\x02\x12\n\x0c\n\
    \x05\x05\0\x02\x02\x02\x12\x03\t\x15\x16\n=\n\x04\x05\0\x02\x03\x12\x03\
    \n\x02\x17\"0\x20protolint:disable:this\x20ENUM_FIELD_NAMES_PREFIX\n\n\
    \x0c\n\x05\x05\0\x02\x03\x01\x12\x03\n\x02\x12\n\x0c\n\x05\x05\0\x02\x03\
    \x02\x12\x03\n\x15\x16\n+\n\x02\x04\0\x12\x04\x0e\0\x1a\x01\x1a\x1f\x20R\
    epresents\x20a\x20single\x20KV\x20object\n\n\n\n\x03\x04\0\x01\x12\x03\
    \x0e\x08\x10\n.\n\x04\x04\0\x02\0\x12\x03\x10\x02\x11\x1a!\x20Key\x20reg\
    ex:\x20/^[a-zA-Z0-9_-:]+$/)\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x10\
    \x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x10\t\x0c\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03\x10\x0f\x10\n\x17\n\x04\x04\0\x02\x01\x12\x03\x13\x02\
    \x12\x1a\n\x20KV\x20value\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x13\
    \x02\x07\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x13\x08\r\n\x0c\n\x05\x04\
    \0\x02\x01\x03\x12\x03\x13\x10\x11\n+\n\x04\x04\0\x02\x02\x12\x03\x16\
    \x02(\x1a\x1e\x20When\x20was\x20this\x20object\x20created\n\n\x0c\n\x05\
    \x04\0\x02\x02\x05\x12\x03\x16\x02\x07\n\x0c\n\x05\x04\0\x02\x02\x01\x12\
    \x03\x16\x08#\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x16&'\n/\n\x04\x04\0\
    \x02\x03\x12\x03\x19\x02(\x1a\"\x20Last\x20time\x20the\x20object\x20was\
    \x20updated\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x19\x02\x07\n\x0c\n\
    \x05\x04\0\x02\x03\x01\x12\x03\x19\x08#\n\x0c\n\x05\x04\0\x02\x03\x03\
    \x12\x03\x19&'\n\xb3\x01\n\x02\x04\x01\x12\x04\x1f\0+\x01\x1a\xa6\x01\
    \x20Container\x20for\x20one\x20or\x20more\x20KVObject's;\x20snitch-serve\
    r\x20broadcasts\x20KVCommand\x20that\n\x20contains\x20one\x20or\x20more\
    \x20of\x20these\x20instructions\x20when\x20a\x20\"POST\x20/api/v1/kv\"\
    \x20request\n\x20is\x20made.\n\n\n\n\x03\x04\x01\x01\x12\x03\x1f\x08\x15\
    \n-\n\x04\x04\x01\x02\0\x12\x03!\x02\x10\x1a\x20\x20Unique\x20ID\x20for\
    \x20this\x20instruction\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03!\x02\x08\
    \n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03!\t\x0b\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03!\x0e\x0f\n.\n\x04\x04\x01\x02\x01\x12\x03$\x02\x16\x1a!\x20\
    What\x20kind\x20of\x20an\x20action\x20is\x20this?\n\n\x0c\n\x05\x04\x01\
    \x02\x01\x06\x12\x03$\x02\n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03$\x0b\
    \x11\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03$\x14\x15\n\x18\n\x04\x04\
    \x01\x02\x02\x12\x03'\x02\x16\x1a\x0b\x20KV\x20object\n\n\x0c\n\x05\x04\
    \x01\x02\x02\x06\x12\x03'\x02\n\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03'\
    \x0b\x11\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03'\x14\x15\n^\n\x04\x04\
    \x01\x02\x03\x12\x03*\x02*\x1aQ\x20When\x20this\x20instruction\x20was\
    \x20requested\x20(usually\x20will\x20be\x20the\x20HTTP\x20API\x20request\
    \x20time)\n\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03*\x02\x07\n\x0c\n\x05\
    \x04\x01\x02\x03\x01\x12\x03*\x08%\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\
    \x03*()\n\x86\x01\n\x02\x04\x02\x12\x04/\02\x01\x1az\x20\"POST\x20/api/v\
    1/kv\"\x20accepts\x20JSON\x20of\x20this\x20type\x20for\x20it's\x20reques\
    t\x20payload.\x20This\x20is\n\x20converted\x20by\x20BroadcastKV()\x20to\
    \x20a\x20KVCommand\n\n\n\n\x03\x04\x02\x01\x12\x03/\x08\x17\n\x0b\n\x04\
    \x04\x02\x02\0\x12\x030\x02\x15\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x030\
    \x02\x06\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x030\x07\x10\n\x0c\n\x05\x04\
    \x02\x02\0\x03\x12\x030\x13\x14\n\x0b\n\x04\x04\x02\x02\x01\x12\x031\x02\
    \x1c\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x031\x02\n\n\x0c\n\x05\x04\x02\
    \x02\x01\x06\x12\x031\x0b\x13\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x031\
    \x14\x17\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x031\x1a\x1bb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(KVObject::generated_message_descriptor_data());
            messages.push(KVInstruction::generated_message_descriptor_data());
            messages.push(KVCreateRequest::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(KVAction::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
