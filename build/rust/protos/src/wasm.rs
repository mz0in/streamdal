// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `wasm.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

///  SDK generates a WASM request and passes this to the WASM func
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.WASMRequest)
pub struct WASMRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.WASMRequest.step)
    pub step: ::protobuf::MessageField<super::pipeline::PipelineStep>,
    // @@protoc_insertion_point(field:protos.WASMRequest.input)
    pub input: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.WASMRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a WASMRequest {
    fn default() -> &'a WASMRequest {
        <WASMRequest as ::protobuf::Message>::default_instance()
    }
}

impl WASMRequest {
    pub fn new() -> WASMRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pipeline::PipelineStep>(
            "step",
            |m: &WASMRequest| { &m.step },
            |m: &mut WASMRequest| { &mut m.step },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "input",
            |m: &WASMRequest| { &m.input },
            |m: &mut WASMRequest| { &mut m.input },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<WASMRequest>(
            "WASMRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for WASMRequest {
    const NAME: &'static str = "WASMRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.step)?;
                },
                18 => {
                    self.input = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.step.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.input.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.input);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.step.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.input.is_empty() {
            os.write_bytes(2, &self.input)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> WASMRequest {
        WASMRequest::new()
    }

    fn clear(&mut self) {
        self.step.clear();
        self.input.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static WASMRequest {
        static instance: WASMRequest = WASMRequest {
            step: ::protobuf::MessageField::none(),
            input: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for WASMRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("WASMRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for WASMRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WASMRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Returned by all WASM functions
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.WASMResponse)
pub struct WASMResponse {
    // message fields
    // @@protoc_insertion_point(field:protos.WASMResponse.output)
    pub output: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protos.WASMResponse.exit_code)
    pub exit_code: ::protobuf::EnumOrUnknown<WasmExitCode>,
    // @@protoc_insertion_point(field:protos.WASMResponse.exit_msg)
    pub exit_msg: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.WASMResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a WASMResponse {
    fn default() -> &'a WASMResponse {
        <WASMResponse as ::protobuf::Message>::default_instance()
    }
}

impl WASMResponse {
    pub fn new() -> WASMResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "output",
            |m: &WASMResponse| { &m.output },
            |m: &mut WASMResponse| { &mut m.output },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "exit_code",
            |m: &WASMResponse| { &m.exit_code },
            |m: &mut WASMResponse| { &mut m.exit_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "exit_msg",
            |m: &WASMResponse| { &m.exit_msg },
            |m: &mut WASMResponse| { &mut m.exit_msg },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<WASMResponse>(
            "WASMResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for WASMResponse {
    const NAME: &'static str = "WASMResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.output = is.read_bytes()?;
                },
                16 => {
                    self.exit_code = is.read_enum_or_unknown()?;
                },
                26 => {
                    self.exit_msg = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.output.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.output);
        }
        if self.exit_code != ::protobuf::EnumOrUnknown::new(WasmExitCode::WASM_EXIT_CODE_UNSET) {
            my_size += ::protobuf::rt::int32_size(2, self.exit_code.value());
        }
        if !self.exit_msg.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.exit_msg);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.output.is_empty() {
            os.write_bytes(1, &self.output)?;
        }
        if self.exit_code != ::protobuf::EnumOrUnknown::new(WasmExitCode::WASM_EXIT_CODE_UNSET) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.exit_code))?;
        }
        if !self.exit_msg.is_empty() {
            os.write_string(3, &self.exit_msg)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> WASMResponse {
        WASMResponse::new()
    }

    fn clear(&mut self) {
        self.output.clear();
        self.exit_code = ::protobuf::EnumOrUnknown::new(WasmExitCode::WASM_EXIT_CODE_UNSET);
        self.exit_msg.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static WASMResponse {
        static instance: WASMResponse = WASMResponse {
            output: ::std::vec::Vec::new(),
            exit_code: ::protobuf::EnumOrUnknown::from_i32(0),
            exit_msg: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for WASMResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("WASMResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for WASMResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WASMResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Included in WASM response; SDK is responsible for interpreting the response
///  status and how it relates to the step condition.
///  ie. WASM func returns WASM_EXIT_CODE_INTERNAL_ERROR lookup ON_ERROR
///  conditions to determine what to do next.
///  ie. WASM func returns WASM_EXIT_CODE_SUCCESS lookup ON_MATCH conditions
///  to determine what to do next;
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:protos.WasmExitCode)
pub enum WasmExitCode {
    // @@protoc_insertion_point(enum_value:protos.WasmExitCode.WASM_EXIT_CODE_UNSET)
    WASM_EXIT_CODE_UNSET = 0,
    // @@protoc_insertion_point(enum_value:protos.WasmExitCode.WASM_EXIT_CODE_SUCCESS)
    WASM_EXIT_CODE_SUCCESS = 1,
    // @@protoc_insertion_point(enum_value:protos.WasmExitCode.WASM_EXIT_CODE_FAILURE)
    WASM_EXIT_CODE_FAILURE = 2,
    // @@protoc_insertion_point(enum_value:protos.WasmExitCode.WASM_EXIT_CODE_INTERNAL_ERROR)
    WASM_EXIT_CODE_INTERNAL_ERROR = 3,
}

impl ::protobuf::Enum for WasmExitCode {
    const NAME: &'static str = "WasmExitCode";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<WasmExitCode> {
        match value {
            0 => ::std::option::Option::Some(WasmExitCode::WASM_EXIT_CODE_UNSET),
            1 => ::std::option::Option::Some(WasmExitCode::WASM_EXIT_CODE_SUCCESS),
            2 => ::std::option::Option::Some(WasmExitCode::WASM_EXIT_CODE_FAILURE),
            3 => ::std::option::Option::Some(WasmExitCode::WASM_EXIT_CODE_INTERNAL_ERROR),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [WasmExitCode] = &[
        WasmExitCode::WASM_EXIT_CODE_UNSET,
        WasmExitCode::WASM_EXIT_CODE_SUCCESS,
        WasmExitCode::WASM_EXIT_CODE_FAILURE,
        WasmExitCode::WASM_EXIT_CODE_INTERNAL_ERROR,
    ];
}

impl ::protobuf::EnumFull for WasmExitCode {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("WasmExitCode").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for WasmExitCode {
    fn default() -> Self {
        WasmExitCode::WASM_EXIT_CODE_UNSET
    }
}

impl WasmExitCode {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<WasmExitCode>("WasmExitCode")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nwasm.proto\x12\x06protos\x1a\x0epipeline.proto\"M\n\x0bWASMRequest\
    \x12(\n\x04step\x18\x01\x20\x01(\x0b2\x14.protos.PipelineStepR\x04step\
    \x12\x14\n\x05input\x18\x02\x20\x01(\x0cR\x05input\"t\n\x0cWASMResponse\
    \x12\x16\n\x06output\x18\x01\x20\x01(\x0cR\x06output\x121\n\texit_code\
    \x18\x02\x20\x01(\x0e2\x14.protos.WasmExitCodeR\x08exitCode\x12\x19\n\
    \x08exit_msg\x18\x03\x20\x01(\tR\x07exitMsg*\x83\x01\n\x0cWasmExitCode\
    \x12\x18\n\x14WASM_EXIT_CODE_UNSET\x10\0\x12\x1a\n\x16WASM_EXIT_CODE_SUC\
    CESS\x10\x01\x12\x1a\n\x16WASM_EXIT_CODE_FAILURE\x10\x02\x12!\n\x1dWASM_\
    EXIT_CODE_INTERNAL_ERROR\x10\x03B4Z2github.com/streamdal/snitch-protos/b\
    uild/go/protosJ\xb8\x08\n\x06\x12\x04\0\0\x20\x01\n\x08\n\x01\x0c\x12\
    \x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x0f\n\t\n\x02\x03\0\x12\x03\
    \x04\0\x18\n\x08\n\x01\x08\x12\x03\x06\0I\n\t\n\x02\x08\x0b\x12\x03\x06\
    \0I\n\xe3\x02\n\x02\x05\0\x12\x04\x0e\0\x13\x01\x1a\xd6\x02\x20Included\
    \x20in\x20WASM\x20response;\x20SDK\x20is\x20responsible\x20for\x20interp\
    reting\x20the\x20response\n\x20status\x20and\x20how\x20it\x20relates\x20\
    to\x20the\x20step\x20condition.\n\x20ie.\x20WASM\x20func\x20returns\x20W\
    ASM_EXIT_CODE_INTERNAL_ERROR\x20lookup\x20ON_ERROR\n\x20conditions\x20to\
    \x20determine\x20what\x20to\x20do\x20next.\n\x20ie.\x20WASM\x20func\x20r\
    eturns\x20WASM_EXIT_CODE_SUCCESS\x20lookup\x20ON_MATCH\x20conditions\n\
    \x20to\x20determine\x20what\x20to\x20do\x20next;\n\n\n\n\x03\x05\0\x01\
    \x12\x03\x0e\x05\x11\n\x0b\n\x04\x05\0\x02\0\x12\x03\x0f\x02\x1b\n\x0c\n\
    \x05\x05\0\x02\0\x01\x12\x03\x0f\x02\x16\n\x0c\n\x05\x05\0\x02\0\x02\x12\
    \x03\x0f\x19\x1a\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x10\x02\x1d\n\x0c\n\
    \x05\x05\0\x02\x01\x01\x12\x03\x10\x02\x18\n\x0c\n\x05\x05\0\x02\x01\x02\
    \x12\x03\x10\x1b\x1c\nK\n\x04\x05\0\x02\x02\x12\x03\x11\x02\x1d\">\x20Pr\
    obably\x20need\x20better\x20names\x20for\x20these\x20as\x20FAILURE\x20is\
    \x20too\x20harsh\n\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\x11\x02\x18\n\
    \x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x11\x1b\x1c\n\x0b\n\x04\x05\0\x02\
    \x03\x12\x03\x12\x02$\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03\x12\x02\x1f\
    \n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03\x12\"#\nK\n\x02\x04\0\x12\x04\x16\
    \0\x19\x01\x1a?\x20SDK\x20generates\x20a\x20WASM\x20request\x20and\x20pa\
    sses\x20this\x20to\x20the\x20WASM\x20func\n\n\n\n\x03\x04\0\x01\x12\x03\
    \x16\x08\x13\n\x0b\n\x04\x04\0\x02\0\x12\x03\x17\x02\x1f\n\x0c\n\x05\x04\
    \0\x02\0\x06\x12\x03\x17\x02\x15\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x17\
    \x16\x1a\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x17\x1d\x1e\n\x0b\n\x04\x04\
    \0\x02\x01\x12\x03\x18\x02\x12\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x18\
    \x02\x07\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x18\x08\r\n\x0c\n\x05\x04\
    \0\x02\x01\x03\x12\x03\x18\x10\x11\n,\n\x02\x04\x01\x12\x04\x1c\0\x20\
    \x01\x1a\x20\x20Returned\x20by\x20all\x20WASM\x20functions\n\n\n\n\x03\
    \x04\x01\x01\x12\x03\x1c\x08\x14\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x1d\
    \x02\x13\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x1d\x02\x07\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x03\x1d\x08\x0e\n\x0c\n\x05\x04\x01\x02\0\x03\x12\
    \x03\x1d\x11\x12\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x1e\x02\x1d\n\x0c\n\
    \x05\x04\x01\x02\x01\x06\x12\x03\x1e\x02\x0e\n\x0c\n\x05\x04\x01\x02\x01\
    \x01\x12\x03\x1e\x0f\x18\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x1e\x1b\
    \x1c\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x1f\x02\x16\n\x0c\n\x05\x04\x01\
    \x02\x02\x05\x12\x03\x1f\x02\x08\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\
    \x1f\t\x11\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x1f\x14\x15b\x06proto\
    3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::pipeline::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(WASMRequest::generated_message_descriptor_data());
            messages.push(WASMResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(WasmExitCode::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
