// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `pipeline.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

///  Pipeline is a structure that holds one or more pipeline steps. This structure
///  is intended to be immutable; clients are expected to generate WASMRequest's
///  that contain a pipeline step.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.Pipeline)
pub struct Pipeline {
    // message fields
    ///  ID should NOT be set by external gRPC client on CreatePipelineRequest - it
    ///  will be ignored; it _does_ need to be set on UpdatePipelineRequest.
    // @@protoc_insertion_point(field:protos.Pipeline.id)
    pub id: ::std::string::String,
    ///  Friendly name for the pipeline
    // @@protoc_insertion_point(field:protos.Pipeline.name)
    pub name: ::std::string::String,
    ///  One or more steps to execute
    // @@protoc_insertion_point(field:protos.Pipeline.steps)
    pub steps: ::std::vec::Vec<PipelineStep>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.Pipeline.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Pipeline {
    fn default() -> &'a Pipeline {
        <Pipeline as ::protobuf::Message>::default_instance()
    }
}

impl Pipeline {
    pub fn new() -> Pipeline {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Pipeline| { &m.id },
            |m: &mut Pipeline| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Pipeline| { &m.name },
            |m: &mut Pipeline| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "steps",
            |m: &Pipeline| { &m.steps },
            |m: &mut Pipeline| { &mut m.steps },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Pipeline>(
            "Pipeline",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Pipeline {
    const NAME: &'static str = "Pipeline";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.name = is.read_string()?;
                },
                26 => {
                    self.steps.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        for value in &self.steps {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        for v in &self.steps {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Pipeline {
        Pipeline::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.steps.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Pipeline {
        static instance: Pipeline = Pipeline {
            id: ::std::string::String::new(),
            name: ::std::string::String::new(),
            steps: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Pipeline {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Pipeline").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Pipeline {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Pipeline {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  A pipeline step is a single step in a pipeline.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.PipelineStep)
pub struct PipelineStep {
    // message fields
    ///  Friendly name for the step
    // @@protoc_insertion_point(field:protos.PipelineStep.name)
    pub name: ::std::string::String,
    ///  What should SDK do if step succeeds?
    ///
    // @@protoc_insertion_point(field:protos.PipelineStep.on_success)
    pub on_success: ::std::vec::Vec<::protobuf::EnumOrUnknown<PipelineStepCondition>>,
    ///  What should SDK do if step fails?
    // @@protoc_insertion_point(field:protos.PipelineStep.on_failure)
    pub on_failure: ::std::vec::Vec<::protobuf::EnumOrUnknown<PipelineStepCondition>>,
    ///  ID is a uuid(sha256(_wasm_bytes)) that is set by snitch-server
    // @@protoc_insertion_point(field:protos.PipelineStep._wasm_id)
    pub _wasm_id: ::std::option::Option<::std::string::String>,
    ///  WASM module bytes (set by snitch-server)
    // @@protoc_insertion_point(field:protos.PipelineStep._wasm_bytes)
    pub _wasm_bytes: ::std::option::Option<::std::vec::Vec<u8>>,
    ///  WASM function name to execute (set by snitch-server)
    // @@protoc_insertion_point(field:protos.PipelineStep._wasm_function)
    pub _wasm_function: ::std::option::Option<::std::string::String>,
    // message oneof groups
    pub step: ::std::option::Option<pipeline_step::Step>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.PipelineStep.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PipelineStep {
    fn default() -> &'a PipelineStep {
        <PipelineStep as ::protobuf::Message>::default_instance()
    }
}

impl PipelineStep {
    pub fn new() -> PipelineStep {
        ::std::default::Default::default()
    }

    // .protos.steps.DetectiveStep detective = 1000;

    pub fn detective(&self) -> &super::detective::DetectiveStep {
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::Detective(ref v)) => v,
            _ => <super::detective::DetectiveStep as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_detective(&mut self) {
        self.step = ::std::option::Option::None;
    }

    pub fn has_detective(&self) -> bool {
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::Detective(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_detective(&mut self, v: super::detective::DetectiveStep) {
        self.step = ::std::option::Option::Some(pipeline_step::Step::Detective(v))
    }

    // Mutable pointer to the field.
    pub fn mut_detective(&mut self) -> &mut super::detective::DetectiveStep {
        if let ::std::option::Option::Some(pipeline_step::Step::Detective(_)) = self.step {
        } else {
            self.step = ::std::option::Option::Some(pipeline_step::Step::Detective(super::detective::DetectiveStep::new()));
        }
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::Detective(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_detective(&mut self) -> super::detective::DetectiveStep {
        if self.has_detective() {
            match self.step.take() {
                ::std::option::Option::Some(pipeline_step::Step::Detective(v)) => v,
                _ => panic!(),
            }
        } else {
            super::detective::DetectiveStep::new()
        }
    }

    // .protos.steps.TransformStep transform = 1001;

    pub fn transform(&self) -> &super::transform::TransformStep {
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::Transform(ref v)) => v,
            _ => <super::transform::TransformStep as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_transform(&mut self) {
        self.step = ::std::option::Option::None;
    }

    pub fn has_transform(&self) -> bool {
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::Transform(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_transform(&mut self, v: super::transform::TransformStep) {
        self.step = ::std::option::Option::Some(pipeline_step::Step::Transform(v))
    }

    // Mutable pointer to the field.
    pub fn mut_transform(&mut self) -> &mut super::transform::TransformStep {
        if let ::std::option::Option::Some(pipeline_step::Step::Transform(_)) = self.step {
        } else {
            self.step = ::std::option::Option::Some(pipeline_step::Step::Transform(super::transform::TransformStep::new()));
        }
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::Transform(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_transform(&mut self) -> super::transform::TransformStep {
        if self.has_transform() {
            match self.step.take() {
                ::std::option::Option::Some(pipeline_step::Step::Transform(v)) => v,
                _ => panic!(),
            }
        } else {
            super::transform::TransformStep::new()
        }
    }

    // .protos.steps.EncodeStep encode = 1002;

    pub fn encode(&self) -> &super::encode::EncodeStep {
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::Encode(ref v)) => v,
            _ => <super::encode::EncodeStep as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_encode(&mut self) {
        self.step = ::std::option::Option::None;
    }

    pub fn has_encode(&self) -> bool {
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::Encode(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_encode(&mut self, v: super::encode::EncodeStep) {
        self.step = ::std::option::Option::Some(pipeline_step::Step::Encode(v))
    }

    // Mutable pointer to the field.
    pub fn mut_encode(&mut self) -> &mut super::encode::EncodeStep {
        if let ::std::option::Option::Some(pipeline_step::Step::Encode(_)) = self.step {
        } else {
            self.step = ::std::option::Option::Some(pipeline_step::Step::Encode(super::encode::EncodeStep::new()));
        }
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::Encode(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_encode(&mut self) -> super::encode::EncodeStep {
        if self.has_encode() {
            match self.step.take() {
                ::std::option::Option::Some(pipeline_step::Step::Encode(v)) => v,
                _ => panic!(),
            }
        } else {
            super::encode::EncodeStep::new()
        }
    }

    // .protos.steps.DecodeStep decode = 1003;

    pub fn decode(&self) -> &super::decode::DecodeStep {
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::Decode(ref v)) => v,
            _ => <super::decode::DecodeStep as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_decode(&mut self) {
        self.step = ::std::option::Option::None;
    }

    pub fn has_decode(&self) -> bool {
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::Decode(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_decode(&mut self, v: super::decode::DecodeStep) {
        self.step = ::std::option::Option::Some(pipeline_step::Step::Decode(v))
    }

    // Mutable pointer to the field.
    pub fn mut_decode(&mut self) -> &mut super::decode::DecodeStep {
        if let ::std::option::Option::Some(pipeline_step::Step::Decode(_)) = self.step {
        } else {
            self.step = ::std::option::Option::Some(pipeline_step::Step::Decode(super::decode::DecodeStep::new()));
        }
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::Decode(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_decode(&mut self) -> super::decode::DecodeStep {
        if self.has_decode() {
            match self.step.take() {
                ::std::option::Option::Some(pipeline_step::Step::Decode(v)) => v,
                _ => panic!(),
            }
        } else {
            super::decode::DecodeStep::new()
        }
    }

    // .protos.steps.CustomStep custom = 1004;

    pub fn custom(&self) -> &super::custom::CustomStep {
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::Custom(ref v)) => v,
            _ => <super::custom::CustomStep as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_custom(&mut self) {
        self.step = ::std::option::Option::None;
    }

    pub fn has_custom(&self) -> bool {
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::Custom(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_custom(&mut self, v: super::custom::CustomStep) {
        self.step = ::std::option::Option::Some(pipeline_step::Step::Custom(v))
    }

    // Mutable pointer to the field.
    pub fn mut_custom(&mut self) -> &mut super::custom::CustomStep {
        if let ::std::option::Option::Some(pipeline_step::Step::Custom(_)) = self.step {
        } else {
            self.step = ::std::option::Option::Some(pipeline_step::Step::Custom(super::custom::CustomStep::new()));
        }
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::Custom(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_custom(&mut self) -> super::custom::CustomStep {
        if self.has_custom() {
            match self.step.take() {
                ::std::option::Option::Some(pipeline_step::Step::Custom(v)) => v,
                _ => panic!(),
            }
        } else {
            super::custom::CustomStep::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &PipelineStep| { &m.name },
            |m: &mut PipelineStep| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "on_success",
            |m: &PipelineStep| { &m.on_success },
            |m: &mut PipelineStep| { &mut m.on_success },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "on_failure",
            |m: &PipelineStep| { &m.on_failure },
            |m: &mut PipelineStep| { &mut m.on_failure },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::detective::DetectiveStep>(
            "detective",
            PipelineStep::has_detective,
            PipelineStep::detective,
            PipelineStep::mut_detective,
            PipelineStep::set_detective,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::transform::TransformStep>(
            "transform",
            PipelineStep::has_transform,
            PipelineStep::transform,
            PipelineStep::mut_transform,
            PipelineStep::set_transform,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::encode::EncodeStep>(
            "encode",
            PipelineStep::has_encode,
            PipelineStep::encode,
            PipelineStep::mut_encode,
            PipelineStep::set_encode,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::decode::DecodeStep>(
            "decode",
            PipelineStep::has_decode,
            PipelineStep::decode,
            PipelineStep::mut_decode,
            PipelineStep::set_decode,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::custom::CustomStep>(
            "custom",
            PipelineStep::has_custom,
            PipelineStep::custom,
            PipelineStep::mut_custom,
            PipelineStep::set_custom,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "_wasm_id",
            |m: &PipelineStep| { &m._wasm_id },
            |m: &mut PipelineStep| { &mut m._wasm_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "_wasm_bytes",
            |m: &PipelineStep| { &m._wasm_bytes },
            |m: &mut PipelineStep| { &mut m._wasm_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "_wasm_function",
            |m: &PipelineStep| { &m._wasm_function },
            |m: &mut PipelineStep| { &mut m._wasm_function },
        ));
        oneofs.push(pipeline_step::Step::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PipelineStep>(
            "PipelineStep",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PipelineStep {
    const NAME: &'static str = "PipelineStep";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                16 => {
                    self.on_success.push(is.read_enum_or_unknown()?);
                },
                18 => {
                    ::protobuf::rt::read_repeated_packed_enum_or_unknown_into(is, &mut self.on_success)?
                },
                24 => {
                    self.on_failure.push(is.read_enum_or_unknown()?);
                },
                26 => {
                    ::protobuf::rt::read_repeated_packed_enum_or_unknown_into(is, &mut self.on_failure)?
                },
                8002 => {
                    self.step = ::std::option::Option::Some(pipeline_step::Step::Detective(is.read_message()?));
                },
                8010 => {
                    self.step = ::std::option::Option::Some(pipeline_step::Step::Transform(is.read_message()?));
                },
                8018 => {
                    self.step = ::std::option::Option::Some(pipeline_step::Step::Encode(is.read_message()?));
                },
                8026 => {
                    self.step = ::std::option::Option::Some(pipeline_step::Step::Decode(is.read_message()?));
                },
                8034 => {
                    self.step = ::std::option::Option::Some(pipeline_step::Step::Custom(is.read_message()?));
                },
                80002 => {
                    self._wasm_id = ::std::option::Option::Some(is.read_string()?);
                },
                80010 => {
                    self._wasm_bytes = ::std::option::Option::Some(is.read_bytes()?);
                },
                80018 => {
                    self._wasm_function = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        for value in &self.on_success {
            my_size += ::protobuf::rt::int32_size(2, value.value());
        };
        for value in &self.on_failure {
            my_size += ::protobuf::rt::int32_size(3, value.value());
        };
        if let Some(v) = self._wasm_id.as_ref() {
            my_size += ::protobuf::rt::string_size(10000, &v);
        }
        if let Some(v) = self._wasm_bytes.as_ref() {
            my_size += ::protobuf::rt::bytes_size(10001, &v);
        }
        if let Some(v) = self._wasm_function.as_ref() {
            my_size += ::protobuf::rt::string_size(10002, &v);
        }
        if let ::std::option::Option::Some(ref v) = self.step {
            match v {
                &pipeline_step::Step::Detective(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pipeline_step::Step::Transform(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pipeline_step::Step::Encode(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pipeline_step::Step::Decode(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pipeline_step::Step::Custom(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        for v in &self.on_success {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(v))?;
        };
        for v in &self.on_failure {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(v))?;
        };
        if let Some(v) = self._wasm_id.as_ref() {
            os.write_string(10000, v)?;
        }
        if let Some(v) = self._wasm_bytes.as_ref() {
            os.write_bytes(10001, v)?;
        }
        if let Some(v) = self._wasm_function.as_ref() {
            os.write_string(10002, v)?;
        }
        if let ::std::option::Option::Some(ref v) = self.step {
            match v {
                &pipeline_step::Step::Detective(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1000, v, os)?;
                },
                &pipeline_step::Step::Transform(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1001, v, os)?;
                },
                &pipeline_step::Step::Encode(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1002, v, os)?;
                },
                &pipeline_step::Step::Decode(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1003, v, os)?;
                },
                &pipeline_step::Step::Custom(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1004, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PipelineStep {
        PipelineStep::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.on_success.clear();
        self.on_failure.clear();
        self.step = ::std::option::Option::None;
        self.step = ::std::option::Option::None;
        self.step = ::std::option::Option::None;
        self.step = ::std::option::Option::None;
        self.step = ::std::option::Option::None;
        self._wasm_id = ::std::option::Option::None;
        self._wasm_bytes = ::std::option::Option::None;
        self._wasm_function = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PipelineStep {
        static instance: PipelineStep = PipelineStep {
            name: ::std::string::String::new(),
            on_success: ::std::vec::Vec::new(),
            on_failure: ::std::vec::Vec::new(),
            _wasm_id: ::std::option::Option::None,
            _wasm_bytes: ::std::option::Option::None,
            _wasm_function: ::std::option::Option::None,
            step: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PipelineStep {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PipelineStep").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PipelineStep {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PipelineStep {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `PipelineStep`
pub mod pipeline_step {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:protos.PipelineStep.step)
    pub enum Step {
        // @@protoc_insertion_point(oneof_field:protos.PipelineStep.detective)
        Detective(super::super::detective::DetectiveStep),
        // @@protoc_insertion_point(oneof_field:protos.PipelineStep.transform)
        Transform(super::super::transform::TransformStep),
        // @@protoc_insertion_point(oneof_field:protos.PipelineStep.encode)
        Encode(super::super::encode::EncodeStep),
        // @@protoc_insertion_point(oneof_field:protos.PipelineStep.decode)
        Decode(super::super::decode::DecodeStep),
        // @@protoc_insertion_point(oneof_field:protos.PipelineStep.custom)
        Custom(super::super::custom::CustomStep),
    }

    impl ::protobuf::Oneof for Step {
    }

    impl ::protobuf::OneofFull for Step {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::PipelineStep as ::protobuf::MessageFull>::descriptor().oneof_by_name("step").unwrap()).clone()
        }
    }

    impl Step {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Step>("step")
        }
    }
}

///  A condition defines how the SDK should handle a step response -- should it
///  continue executing the pipeline, should it abort, should it notify the server?
///  Each step can have multiple conditions.
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:protos.PipelineStepCondition)
pub enum PipelineStepCondition {
    // @@protoc_insertion_point(enum_value:protos.PipelineStepCondition.PIPELINE_STEP_CONDITION_UNSET)
    PIPELINE_STEP_CONDITION_UNSET = 0,
    // @@protoc_insertion_point(enum_value:protos.PipelineStepCondition.PIPELINE_STEP_CONDITION_ABORT)
    PIPELINE_STEP_CONDITION_ABORT = 1,
    // @@protoc_insertion_point(enum_value:protos.PipelineStepCondition.PIPELINE_STEP_CONDITION_NOTIFY)
    PIPELINE_STEP_CONDITION_NOTIFY = 2,
}

impl ::protobuf::Enum for PipelineStepCondition {
    const NAME: &'static str = "PipelineStepCondition";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<PipelineStepCondition> {
        match value {
            0 => ::std::option::Option::Some(PipelineStepCondition::PIPELINE_STEP_CONDITION_UNSET),
            1 => ::std::option::Option::Some(PipelineStepCondition::PIPELINE_STEP_CONDITION_ABORT),
            2 => ::std::option::Option::Some(PipelineStepCondition::PIPELINE_STEP_CONDITION_NOTIFY),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [PipelineStepCondition] = &[
        PipelineStepCondition::PIPELINE_STEP_CONDITION_UNSET,
        PipelineStepCondition::PIPELINE_STEP_CONDITION_ABORT,
        PipelineStepCondition::PIPELINE_STEP_CONDITION_NOTIFY,
    ];
}

impl ::protobuf::EnumFull for PipelineStepCondition {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("PipelineStepCondition").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for PipelineStepCondition {
    fn default() -> Self {
        PipelineStepCondition::PIPELINE_STEP_CONDITION_UNSET
    }
}

impl PipelineStepCondition {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<PipelineStepCondition>("PipelineStepCondition")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0epipeline.proto\x12\x06protos\x1a\x12steps/custom.proto\x1a\x12step\
    s/decode.proto\x1a\x15steps/detective.proto\x1a\x12steps/encode.proto\
    \x1a\x15steps/transform.proto\"Z\n\x08Pipeline\x12\x0e\n\x02id\x18\x01\
    \x20\x01(\tR\x02id\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12*\n\
    \x05steps\x18\x03\x20\x03(\x0b2\x14.protos.PipelineStepR\x05steps\"\xe3\
    \x04\n\x0cPipelineStep\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\
    <\n\non_success\x18\x02\x20\x03(\x0e2\x1d.protos.PipelineStepConditionR\
    \tonSuccess\x12<\n\non_failure\x18\x03\x20\x03(\x0e2\x1d.protos.Pipeline\
    StepConditionR\tonFailure\x12<\n\tdetective\x18\xe8\x07\x20\x01(\x0b2\
    \x1b.protos.steps.DetectiveStepH\0R\tdetective\x12<\n\ttransform\x18\xe9\
    \x07\x20\x01(\x0b2\x1b.protos.steps.TransformStepH\0R\ttransform\x123\n\
    \x06encode\x18\xea\x07\x20\x01(\x0b2\x18.protos.steps.EncodeStepH\0R\x06\
    encode\x123\n\x06decode\x18\xeb\x07\x20\x01(\x0b2\x18.protos.steps.Decod\
    eStepH\0R\x06decode\x123\n\x06custom\x18\xec\x07\x20\x01(\x0b2\x18.proto\
    s.steps.CustomStepH\0R\x06custom\x12\x1e\n\x08_wasm_id\x18\x90N\x20\x01(\
    \tH\x01R\x06WasmId\x88\x01\x01\x12$\n\x0b_wasm_bytes\x18\x91N\x20\x01(\
    \x0cH\x02R\tWasmBytes\x88\x01\x01\x12*\n\x0e_wasm_function\x18\x92N\x20\
    \x01(\tH\x03R\x0cWasmFunction\x88\x01\x01B\x06\n\x04stepB\x0b\n\tX_wasm_\
    idB\x0e\n\x0cX_wasm_bytesB\x11\n\x0fX_wasm_function*\x81\x01\n\x15Pipeli\
    neStepCondition\x12!\n\x1dPIPELINE_STEP_CONDITION_UNSET\x10\0\x12!\n\x1d\
    PIPELINE_STEP_CONDITION_ABORT\x10\x01\x12\"\n\x1ePIPELINE_STEP_CONDITION\
    _NOTIFY\x10\x02B4Z2github.com/streamdal/snitch-protos/build/go/protosJ\
    \xe7\x11\n\x06\x12\x04\0\0@\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\
    \x01\x02\x12\x03\x02\0\x0f\n\t\n\x02\x03\0\x12\x03\x04\0\x1c\n\t\n\x02\
    \x03\x01\x12\x03\x05\0\x1c\n\t\n\x02\x03\x02\x12\x03\x06\0\x1f\n\t\n\x02\
    \x03\x03\x12\x03\x07\0\x1c\n\t\n\x02\x03\x04\x12\x03\x08\0\x1f\n\x08\n\
    \x01\x08\x12\x03\n\0I\n\t\n\x02\x08\x0b\x12\x03\n\0I\n\xc8\x01\n\x02\x04\
    \0\x12\x04\x0f\0\x19\x01\x1a\xbb\x01\x20Pipeline\x20is\x20a\x20structure\
    \x20that\x20holds\x20one\x20or\x20more\x20pipeline\x20steps.\x20This\x20\
    structure\n\x20is\x20intended\x20to\x20be\x20immutable;\x20clients\x20ar\
    e\x20expected\x20to\x20generate\x20WASMRequest's\n\x20that\x20contain\
    \x20a\x20pipeline\x20step.\n\n\n\n\x03\x04\0\x01\x12\x03\x0f\x08\x10\n\
    \x9f\x01\n\x04\x04\0\x02\0\x12\x03\x12\x02\x10\x1a\x91\x01\x20ID\x20shou\
    ld\x20NOT\x20be\x20set\x20by\x20external\x20gRPC\x20client\x20on\x20Crea\
    tePipelineRequest\x20-\x20it\n\x20will\x20be\x20ignored;\x20it\x20_does_\
    \x20need\x20to\x20be\x20set\x20on\x20UpdatePipelineRequest.\n\n\x0c\n\
    \x05\x04\0\x02\0\x05\x12\x03\x12\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\x12\t\x0b\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x12\x0e\x0f\n-\n\x04\
    \x04\0\x02\x01\x12\x03\x15\x02\x12\x1a\x20\x20Friendly\x20name\x20for\
    \x20the\x20pipeline\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x15\x02\x08\
    \n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x15\t\r\n\x0c\n\x05\x04\0\x02\x01\
    \x03\x12\x03\x15\x10\x11\n+\n\x04\x04\0\x02\x02\x12\x03\x18\x02\"\x1a\
    \x1e\x20One\x20or\x20more\x20steps\x20to\x20execute\n\n\x0c\n\x05\x04\0\
    \x02\x02\x04\x12\x03\x18\x02\n\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x18\
    \x0b\x17\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x18\x18\x1d\n\x0c\n\x05\
    \x04\0\x02\x02\x03\x12\x03\x18\x20!\n\xd2\x01\n\x02\x05\0\x12\x04\x1e\0\
    \"\x01\x1a\xc5\x01\x20A\x20condition\x20defines\x20how\x20the\x20SDK\x20\
    should\x20handle\x20a\x20step\x20response\x20--\x20should\x20it\n\x20con\
    tinue\x20executing\x20the\x20pipeline,\x20should\x20it\x20abort,\x20shou\
    ld\x20it\x20notify\x20the\x20server?\n\x20Each\x20step\x20can\x20have\
    \x20multiple\x20conditions.\n\n\n\n\x03\x05\0\x01\x12\x03\x1e\x05\x1a\n\
    \x0b\n\x04\x05\0\x02\0\x12\x03\x1f\x02$\n\x0c\n\x05\x05\0\x02\0\x01\x12\
    \x03\x1f\x02\x1f\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x1f\"#\n\x0b\n\x04\
    \x05\0\x02\x01\x12\x03\x20\x02$\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\
    \x20\x02\x1f\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x20\"#\n\x0b\n\x04\
    \x05\0\x02\x02\x12\x03!\x02%\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03!\x02\
    \x20\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03!#$\n=\n\x02\x04\x01\x12\x04%\
    \0@\x01\x1a1\x20A\x20pipeline\x20step\x20is\x20a\x20single\x20step\x20in\
    \x20a\x20pipeline.\n\n\n\n\x03\x04\x01\x01\x12\x03%\x08\x14\n)\n\x04\x04\
    \x01\x02\0\x12\x03'\x02\x12\x1a\x1c\x20Friendly\x20name\x20for\x20the\
    \x20step\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03'\x02\x08\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x03'\t\r\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03'\
    \x10\x11\n4\n\x04\x04\x01\x02\x01\x12\x03+\x020\x1a'\x20What\x20should\
    \x20SDK\x20do\x20if\x20step\x20succeeds?\n\n\n\x0c\n\x05\x04\x01\x02\x01\
    \x04\x12\x03+\x02\n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03+\x0b\x20\n\
    \x0c\n\x05\x04\x01\x02\x01\x01\x12\x03+!+\n\x0c\n\x05\x04\x01\x02\x01\
    \x03\x12\x03+./\n0\n\x04\x04\x01\x02\x02\x12\x03.\x021\x1a#\x20What\x20s\
    hould\x20SDK\x20do\x20if\x20step\x20fails?\n\n\x0c\n\x05\x04\x01\x02\x02\
    \x04\x12\x03.\x02\n\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03.\x0c!\n\x0c\
    \n\x05\x04\x01\x02\x02\x01\x12\x03.\",\n\x0c\n\x05\x04\x01\x02\x02\x03\
    \x12\x03./0\n\x0c\n\x04\x04\x01\x08\0\x12\x040\x026\x03\n\x0c\n\x05\x04\
    \x01\x08\0\x01\x12\x030\x08\x0c\n\x0b\n\x04\x04\x01\x02\x03\x12\x031\x04\
    )\n\x0c\n\x05\x04\x01\x02\x03\x06\x12\x031\x04\x17\n\x0c\n\x05\x04\x01\
    \x02\x03\x01\x12\x031\x18!\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x031$(\n\
    \x0b\n\x04\x04\x01\x02\x04\x12\x032\x04)\n\x0c\n\x05\x04\x01\x02\x04\x06\
    \x12\x032\x04\x17\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x032\x18!\n\x0c\n\
    \x05\x04\x01\x02\x04\x03\x12\x032$(\n\x0b\n\x04\x04\x01\x02\x05\x12\x033\
    \x04#\n\x0c\n\x05\x04\x01\x02\x05\x06\x12\x033\x04\x14\n\x0c\n\x05\x04\
    \x01\x02\x05\x01\x12\x033\x15\x1b\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\
    \x033\x1e\"\n\x0b\n\x04\x04\x01\x02\x06\x12\x034\x04#\n\x0c\n\x05\x04\
    \x01\x02\x06\x06\x12\x034\x04\x14\n\x0c\n\x05\x04\x01\x02\x06\x01\x12\
    \x034\x15\x1b\n\x0c\n\x05\x04\x01\x02\x06\x03\x12\x034\x1e\"\n\x0b\n\x04\
    \x04\x01\x02\x07\x12\x035\x04#\n\x0c\n\x05\x04\x01\x02\x07\x06\x12\x035\
    \x04\x14\n\x0c\n\x05\x04\x01\x02\x07\x01\x12\x035\x15\x1b\n\x0c\n\x05\
    \x04\x01\x02\x07\x03\x12\x035\x1e\"\n\x84\x01\n\x04\x04\x01\x02\x08\x12\
    \x039\x02#\x1a@\x20ID\x20is\x20a\x20uuid(sha256(_wasm_bytes))\x20that\
    \x20is\x20set\x20by\x20snitch-server\n\"5\x20protolint:disable:this\x20F\
    IELD_NAMES_LOWER_SNAKE_CASE\n\n\x0c\n\x05\x04\x01\x02\x08\x04\x12\x039\
    \x02\n\n\x0c\n\x05\x04\x01\x02\x08\x05\x12\x039\x0b\x11\n\x0c\n\x05\x04\
    \x01\x02\x08\x01\x12\x039\x12\x1a\n\x0c\n\x05\x04\x01\x02\x08\x03\x12\
    \x039\x1d\"\nn\n\x04\x04\x01\x02\t\x12\x03<\x02%\x1a*\x20WASM\x20module\
    \x20bytes\x20(set\x20by\x20snitch-server)\n\"5\x20protolint:disable:this\
    \x20FIELD_NAMES_LOWER_SNAKE_CASE\n\n\x0c\n\x05\x04\x01\x02\t\x04\x12\x03\
    <\x02\n\n\x0c\n\x05\x04\x01\x02\t\x05\x12\x03<\x0b\x10\n\x0c\n\x05\x04\
    \x01\x02\t\x01\x12\x03<\x11\x1c\n\x0c\n\x05\x04\x01\x02\t\x03\x12\x03<\
    \x1f$\nz\n\x04\x04\x01\x02\n\x12\x03?\x02)\x1a6\x20WASM\x20function\x20n\
    ame\x20to\x20execute\x20(set\x20by\x20snitch-server)\n\"5\x20protolint:d\
    isable:this\x20FIELD_NAMES_LOWER_SNAKE_CASE\n\n\x0c\n\x05\x04\x01\x02\n\
    \x04\x12\x03?\x02\n\n\x0c\n\x05\x04\x01\x02\n\x05\x12\x03?\x0b\x11\n\x0c\
    \n\x05\x04\x01\x02\n\x01\x12\x03?\x12\x20\n\x0c\n\x05\x04\x01\x02\n\x03\
    \x12\x03?#(b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::custom::file_descriptor().clone());
            deps.push(super::decode::file_descriptor().clone());
            deps.push(super::detective::file_descriptor().clone());
            deps.push(super::encode::file_descriptor().clone());
            deps.push(super::transform::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(Pipeline::generated_message_descriptor_data());
            messages.push(PipelineStep::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(PipelineStepCondition::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
