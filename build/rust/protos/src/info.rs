// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `info.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.ServiceInfo)
pub struct ServiceInfo {
    // message fields
    // @@protoc_insertion_point(field:protos.ServiceInfo.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:protos.ServiceInfo.description)
    pub description: ::std::string::String,
    // @@protoc_insertion_point(field:protos.ServiceInfo.pipelines)
    pub pipelines: ::std::vec::Vec<PipelineInfo>,
    // @@protoc_insertion_point(field:protos.ServiceInfo.consumers)
    pub consumers: ::std::vec::Vec<ConsumerInfo>,
    // @@protoc_insertion_point(field:protos.ServiceInfo.producers)
    pub producers: ::std::vec::Vec<ProducerInfo>,
    // @@protoc_insertion_point(field:protos.ServiceInfo.clients)
    pub clients: ::std::vec::Vec<ClientInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.ServiceInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ServiceInfo {
    fn default() -> &'a ServiceInfo {
        <ServiceInfo as ::protobuf::Message>::default_instance()
    }
}

impl ServiceInfo {
    pub fn new() -> ServiceInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &ServiceInfo| { &m.name },
            |m: &mut ServiceInfo| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "description",
            |m: &ServiceInfo| { &m.description },
            |m: &mut ServiceInfo| { &mut m.description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "pipelines",
            |m: &ServiceInfo| { &m.pipelines },
            |m: &mut ServiceInfo| { &mut m.pipelines },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "consumers",
            |m: &ServiceInfo| { &m.consumers },
            |m: &mut ServiceInfo| { &mut m.consumers },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "producers",
            |m: &ServiceInfo| { &m.producers },
            |m: &mut ServiceInfo| { &mut m.producers },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "clients",
            |m: &ServiceInfo| { &m.clients },
            |m: &mut ServiceInfo| { &mut m.clients },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ServiceInfo>(
            "ServiceInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ServiceInfo {
    const NAME: &'static str = "ServiceInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    self.description = is.read_string()?;
                },
                802 => {
                    self.pipelines.push(is.read_message()?);
                },
                810 => {
                    self.consumers.push(is.read_message()?);
                },
                818 => {
                    self.producers.push(is.read_message()?);
                },
                826 => {
                    self.clients.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        for value in &self.pipelines {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.consumers {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.producers {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.clients {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        for v in &self.pipelines {
            ::protobuf::rt::write_message_field_with_cached_size(100, v, os)?;
        };
        for v in &self.consumers {
            ::protobuf::rt::write_message_field_with_cached_size(101, v, os)?;
        };
        for v in &self.producers {
            ::protobuf::rt::write_message_field_with_cached_size(102, v, os)?;
        };
        for v in &self.clients {
            ::protobuf::rt::write_message_field_with_cached_size(103, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ServiceInfo {
        ServiceInfo::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.description.clear();
        self.pipelines.clear();
        self.consumers.clear();
        self.producers.clear();
        self.clients.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ServiceInfo {
        static instance: ServiceInfo = ServiceInfo {
            name: ::std::string::String::new(),
            description: ::std::string::String::new(),
            pipelines: ::std::vec::Vec::new(),
            consumers: ::std::vec::Vec::new(),
            producers: ::std::vec::Vec::new(),
            clients: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ServiceInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ServiceInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ServiceInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServiceInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.PipelineInfo)
pub struct PipelineInfo {
    // message fields
    // @@protoc_insertion_point(field:protos.PipelineInfo.audience)
    pub audience: ::protobuf::MessageField<super::common::Audience>,
    // @@protoc_insertion_point(field:protos.PipelineInfo.pipeline)
    pub pipeline: ::protobuf::MessageField<super::pipeline::Pipeline>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.PipelineInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PipelineInfo {
    fn default() -> &'a PipelineInfo {
        <PipelineInfo as ::protobuf::Message>::default_instance()
    }
}

impl PipelineInfo {
    pub fn new() -> PipelineInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::Audience>(
            "audience",
            |m: &PipelineInfo| { &m.audience },
            |m: &mut PipelineInfo| { &mut m.audience },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pipeline::Pipeline>(
            "pipeline",
            |m: &PipelineInfo| { &m.pipeline },
            |m: &mut PipelineInfo| { &mut m.pipeline },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PipelineInfo>(
            "PipelineInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PipelineInfo {
    const NAME: &'static str = "PipelineInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.audience)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pipeline)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.audience.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.pipeline.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.audience.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.pipeline.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PipelineInfo {
        PipelineInfo::new()
    }

    fn clear(&mut self) {
        self.audience.clear();
        self.pipeline.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PipelineInfo {
        static instance: PipelineInfo = PipelineInfo {
            audience: ::protobuf::MessageField::none(),
            pipeline: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PipelineInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PipelineInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PipelineInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PipelineInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.ConsumerInfo)
pub struct ConsumerInfo {
    // special fields
    // @@protoc_insertion_point(special_field:protos.ConsumerInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ConsumerInfo {
    fn default() -> &'a ConsumerInfo {
        <ConsumerInfo as ::protobuf::Message>::default_instance()
    }
}

impl ConsumerInfo {
    pub fn new() -> ConsumerInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ConsumerInfo>(
            "ConsumerInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ConsumerInfo {
    const NAME: &'static str = "ConsumerInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ConsumerInfo {
        ConsumerInfo::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ConsumerInfo {
        static instance: ConsumerInfo = ConsumerInfo {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ConsumerInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ConsumerInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ConsumerInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsumerInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.ProducerInfo)
pub struct ProducerInfo {
    // special fields
    // @@protoc_insertion_point(special_field:protos.ProducerInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProducerInfo {
    fn default() -> &'a ProducerInfo {
        <ProducerInfo as ::protobuf::Message>::default_instance()
    }
}

impl ProducerInfo {
    pub fn new() -> ProducerInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProducerInfo>(
            "ProducerInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProducerInfo {
    const NAME: &'static str = "ProducerInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProducerInfo {
        ProducerInfo::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProducerInfo {
        static instance: ProducerInfo = ProducerInfo {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ProducerInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProducerInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProducerInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProducerInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  This should come from the register call
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.ClientInfo)
pub struct ClientInfo {
    // message fields
    // @@protoc_insertion_point(field:protos.ClientInfo.client_type)
    pub client_type: ::protobuf::EnumOrUnknown<ClientType>,
    // @@protoc_insertion_point(field:protos.ClientInfo.library_name)
    pub library_name: ::std::string::String,
    // @@protoc_insertion_point(field:protos.ClientInfo.library_version)
    pub library_version: ::std::string::String,
    // @@protoc_insertion_point(field:protos.ClientInfo.language)
    pub language: ::std::string::String,
    // @@protoc_insertion_point(field:protos.ClientInfo.arch)
    pub arch: ::std::string::String,
    // @@protoc_insertion_point(field:protos.ClientInfo.os)
    pub os: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.ClientInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ClientInfo {
    fn default() -> &'a ClientInfo {
        <ClientInfo as ::protobuf::Message>::default_instance()
    }
}

impl ClientInfo {
    pub fn new() -> ClientInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_type",
            |m: &ClientInfo| { &m.client_type },
            |m: &mut ClientInfo| { &mut m.client_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "library_name",
            |m: &ClientInfo| { &m.library_name },
            |m: &mut ClientInfo| { &mut m.library_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "library_version",
            |m: &ClientInfo| { &m.library_version },
            |m: &mut ClientInfo| { &mut m.library_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "language",
            |m: &ClientInfo| { &m.language },
            |m: &mut ClientInfo| { &mut m.language },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "arch",
            |m: &ClientInfo| { &m.arch },
            |m: &mut ClientInfo| { &mut m.arch },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "os",
            |m: &ClientInfo| { &m.os },
            |m: &mut ClientInfo| { &mut m.os },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ClientInfo>(
            "ClientInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ClientInfo {
    const NAME: &'static str = "ClientInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.client_type = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.library_name = is.read_string()?;
                },
                26 => {
                    self.library_version = is.read_string()?;
                },
                34 => {
                    self.language = is.read_string()?;
                },
                42 => {
                    self.arch = is.read_string()?;
                },
                50 => {
                    self.os = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.client_type != ::protobuf::EnumOrUnknown::new(ClientType::CLIENT_TYPE_UNSET) {
            my_size += ::protobuf::rt::int32_size(1, self.client_type.value());
        }
        if !self.library_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.library_name);
        }
        if !self.library_version.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.library_version);
        }
        if !self.language.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.language);
        }
        if !self.arch.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.arch);
        }
        if !self.os.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.os);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.client_type != ::protobuf::EnumOrUnknown::new(ClientType::CLIENT_TYPE_UNSET) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.client_type))?;
        }
        if !self.library_name.is_empty() {
            os.write_string(2, &self.library_name)?;
        }
        if !self.library_version.is_empty() {
            os.write_string(3, &self.library_version)?;
        }
        if !self.language.is_empty() {
            os.write_string(4, &self.language)?;
        }
        if !self.arch.is_empty() {
            os.write_string(5, &self.arch)?;
        }
        if !self.os.is_empty() {
            os.write_string(6, &self.os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ClientInfo {
        ClientInfo::new()
    }

    fn clear(&mut self) {
        self.client_type = ::protobuf::EnumOrUnknown::new(ClientType::CLIENT_TYPE_UNSET);
        self.library_name.clear();
        self.library_version.clear();
        self.language.clear();
        self.arch.clear();
        self.os.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ClientInfo {
        static instance: ClientInfo = ClientInfo {
            client_type: ::protobuf::EnumOrUnknown::from_i32(0),
            library_name: ::std::string::String::new(),
            library_version: ::std::string::String::new(),
            language: ::std::string::String::new(),
            arch: ::std::string::String::new(),
            os: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ClientInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ClientInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ClientInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:protos.ClientType)
pub enum ClientType {
    // @@protoc_insertion_point(enum_value:protos.ClientType.CLIENT_TYPE_UNSET)
    CLIENT_TYPE_UNSET = 0,
    // @@protoc_insertion_point(enum_value:protos.ClientType.CLIENT_TYPE_SDK)
    CLIENT_TYPE_SDK = 1,
    // @@protoc_insertion_point(enum_value:protos.ClientType.CLIENT_TYPE_SHIM)
    CLIENT_TYPE_SHIM = 2,
}

impl ::protobuf::Enum for ClientType {
    const NAME: &'static str = "ClientType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ClientType> {
        match value {
            0 => ::std::option::Option::Some(ClientType::CLIENT_TYPE_UNSET),
            1 => ::std::option::Option::Some(ClientType::CLIENT_TYPE_SDK),
            2 => ::std::option::Option::Some(ClientType::CLIENT_TYPE_SHIM),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ClientType] = &[
        ClientType::CLIENT_TYPE_UNSET,
        ClientType::CLIENT_TYPE_SDK,
        ClientType::CLIENT_TYPE_SHIM,
    ];
}

impl ::protobuf::EnumFull for ClientType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ClientType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ClientType {
    fn default() -> Self {
        ClientType::CLIENT_TYPE_UNSET
    }
}

impl ClientType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ClientType>("ClientType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\ninfo.proto\x12\x06protos\x1a\x0ccommon.proto\x1a\x0epipeline.proto\"\
    \x8d\x02\n\x0bServiceInfo\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\
    \x12\x20\n\x0bdescription\x18\x02\x20\x01(\tR\x0bdescription\x122\n\tpip\
    elines\x18d\x20\x03(\x0b2\x14.protos.PipelineInfoR\tpipelines\x122\n\tco\
    nsumers\x18e\x20\x03(\x0b2\x14.protos.ConsumerInfoR\tconsumers\x122\n\tp\
    roducers\x18f\x20\x03(\x0b2\x14.protos.ProducerInfoR\tproducers\x12,\n\
    \x07clients\x18g\x20\x03(\x0b2\x12.protos.ClientInfoR\x07clients\"j\n\
    \x0cPipelineInfo\x12,\n\x08audience\x18\x01\x20\x01(\x0b2\x10.protos.Aud\
    ienceR\x08audience\x12,\n\x08pipeline\x18\x02\x20\x01(\x0b2\x10.protos.P\
    ipelineR\x08pipeline\"\x0e\n\x0cConsumerInfo\"\x0e\n\x0cProducerInfo\"\
    \xcd\x01\n\nClientInfo\x123\n\x0bclient_type\x18\x01\x20\x01(\x0e2\x12.p\
    rotos.ClientTypeR\nclientType\x12!\n\x0clibrary_name\x18\x02\x20\x01(\tR\
    \x0blibraryName\x12'\n\x0flibrary_version\x18\x03\x20\x01(\tR\x0elibrary\
    Version\x12\x1a\n\x08language\x18\x04\x20\x01(\tR\x08language\x12\x12\n\
    \x04arch\x18\x05\x20\x01(\tR\x04arch\x12\x0e\n\x02os\x18\x06\x20\x01(\tR\
    \x02os*N\n\nClientType\x12\x15\n\x11CLIENT_TYPE_UNSET\x10\0\x12\x13\n\
    \x0fCLIENT_TYPE_SDK\x10\x01\x12\x14\n\x10CLIENT_TYPE_SHIM\x10\x02B4Z2git\
    hub.com/streamdal/snitch-protos/build/go/protosJ\xec\t\n\x06\x12\x04\0\0\
    0\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x0f\
    \n\t\n\x02\x03\0\x12\x03\x04\0\x16\n\t\n\x02\x03\x01\x12\x03\x05\0\x18\n\
    \x08\n\x01\x08\x12\x03\x07\0I\n\t\n\x02\x08\x0b\x12\x03\x07\0I\n\n\n\x02\
    \x04\0\x12\x04\t\0\x13\x01\n\n\n\x03\x04\0\x01\x12\x03\t\x08\x13\n\x0b\n\
    \x04\x04\0\x02\0\x12\x03\n\x02\x12\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\n\
    \x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\n\t\r\n\x0c\n\x05\x04\0\x02\
    \0\x03\x12\x03\n\x10\x11\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x0b\x02\x19\n\
    \x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x0b\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03\x0b\t\x14\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0b\x17\
    \x18\n\x0b\n\x04\x04\0\x02\x02\x12\x03\r\x02(\n\x0c\n\x05\x04\0\x02\x02\
    \x04\x12\x03\r\x02\n\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\r\x0b\x17\n\
    \x0c\n\x05\x04\0\x02\x02\x01\x12\x03\r\x18!\n\x0c\n\x05\x04\0\x02\x02\
    \x03\x12\x03\r$'\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x0e\x02(\n\x0c\n\x05\
    \x04\0\x02\x03\x04\x12\x03\x0e\x02\n\n\x0c\n\x05\x04\0\x02\x03\x06\x12\
    \x03\x0e\x0b\x17\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x0e\x18!\n\x0c\n\
    \x05\x04\0\x02\x03\x03\x12\x03\x0e$'\n\x0b\n\x04\x04\0\x02\x04\x12\x03\
    \x0f\x02(\n\x0c\n\x05\x04\0\x02\x04\x04\x12\x03\x0f\x02\n\n\x0c\n\x05\
    \x04\0\x02\x04\x06\x12\x03\x0f\x0b\x17\n\x0c\n\x05\x04\0\x02\x04\x01\x12\
    \x03\x0f\x18!\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x0f$'\n2\n\x04\x04\0\
    \x02\x05\x12\x03\x10\x02$\"%\x20number\x20of\x20entries\x20==\x20num\x20\
    instances?\n\n\x0c\n\x05\x04\0\x02\x05\x04\x12\x03\x10\x02\n\n\x0c\n\x05\
    \x04\0\x02\x05\x06\x12\x03\x10\x0b\x15\n\x0c\n\x05\x04\0\x02\x05\x01\x12\
    \x03\x10\x16\x1d\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x10\x20#\n\n\n\
    \x02\x04\x01\x12\x04\x15\0\x18\x01\n\n\n\x03\x04\x01\x01\x12\x03\x15\x08\
    \x14\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x16\x02\x1f\n\x0c\n\x05\x04\x01\
    \x02\0\x06\x12\x03\x16\x02\x11\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x16\
    \x12\x1a\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x16\x1d\x1e\n\x0b\n\x04\
    \x04\x01\x02\x01\x12\x03\x17\x02\x1f\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\
    \x03\x17\x02\x11\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x17\x12\x1a\n\
    \x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x17\x1d\x1e\n\x11\n\x02\x04\x02\
    \x12\x04\x1a\0\x1c\x01\"\x05\x20TBD\n\n\n\n\x03\x04\x02\x01\x12\x03\x1a\
    \x08\x14\n\x11\n\x02\x04\x03\x12\x04\x1e\0\x20\x01\"\x05\x20TBD\n\n\n\n\
    \x03\x04\x03\x01\x12\x03\x1e\x08\x14\n\n\n\x02\x05\0\x12\x04\"\0&\x01\n\
    \n\n\x03\x05\0\x01\x12\x03\"\x05\x0f\n\x0b\n\x04\x05\0\x02\0\x12\x03#\
    \x02\x18\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03#\x02\x13\n\x0c\n\x05\x05\0\
    \x02\0\x02\x12\x03#\x16\x17\n\x0b\n\x04\x05\0\x02\x01\x12\x03$\x02\x16\n\
    \x0c\n\x05\x05\0\x02\x01\x01\x12\x03$\x02\x11\n\x0c\n\x05\x05\0\x02\x01\
    \x02\x12\x03$\x14\x15\n\x0b\n\x04\x05\0\x02\x02\x12\x03%\x02\x17\n\x0c\n\
    \x05\x05\0\x02\x02\x01\x12\x03%\x02\x12\n\x0c\n\x05\x05\0\x02\x02\x02\
    \x12\x03%\x15\x16\n5\n\x02\x04\x04\x12\x04)\00\x01\x1a)\x20This\x20shoul\
    d\x20come\x20from\x20the\x20register\x20call\n\n\n\n\x03\x04\x04\x01\x12\
    \x03)\x08\x12\n\x0b\n\x04\x04\x04\x02\0\x12\x03*\x02\x1d\n\x0c\n\x05\x04\
    \x04\x02\0\x06\x12\x03*\x02\x0c\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03*\r\
    \x18\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03*\x1b\x1c\n\x0b\n\x04\x04\x04\
    \x02\x01\x12\x03+\x02\x1a\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03+\x02\
    \x08\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03+\t\x15\n\x0c\n\x05\x04\x04\
    \x02\x01\x03\x12\x03+\x18\x19\n\x0b\n\x04\x04\x04\x02\x02\x12\x03,\x02\
    \x1d\n\x0c\n\x05\x04\x04\x02\x02\x05\x12\x03,\x02\x08\n\x0c\n\x05\x04\
    \x04\x02\x02\x01\x12\x03,\t\x18\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03,\
    \x1b\x1c\n\x0b\n\x04\x04\x04\x02\x03\x12\x03-\x02\x16\n\x0c\n\x05\x04\
    \x04\x02\x03\x05\x12\x03-\x02\x08\n\x0c\n\x05\x04\x04\x02\x03\x01\x12\
    \x03-\t\x11\n\x0c\n\x05\x04\x04\x02\x03\x03\x12\x03-\x14\x15\n\x0b\n\x04\
    \x04\x04\x02\x04\x12\x03.\x02\x12\n\x0c\n\x05\x04\x04\x02\x04\x05\x12\
    \x03.\x02\x08\n\x0c\n\x05\x04\x04\x02\x04\x01\x12\x03.\t\r\n\x0c\n\x05\
    \x04\x04\x02\x04\x03\x12\x03.\x10\x11\n\x0b\n\x04\x04\x04\x02\x05\x12\
    \x03/\x02\x10\n\x0c\n\x05\x04\x04\x02\x05\x05\x12\x03/\x02\x08\n\x0c\n\
    \x05\x04\x04\x02\x05\x01\x12\x03/\t\x0b\n\x0c\n\x05\x04\x04\x02\x05\x03\
    \x12\x03/\x0e\x0fb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::common::file_descriptor().clone());
            deps.push(super::pipeline::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(ServiceInfo::generated_message_descriptor_data());
            messages.push(PipelineInfo::generated_message_descriptor_data());
            messages.push(ConsumerInfo::generated_message_descriptor_data());
            messages.push(ProducerInfo::generated_message_descriptor_data());
            messages.push(ClientInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(ClientType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
