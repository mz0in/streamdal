// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `sp_uibff.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:protos.RegistrationStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RegistrationStatus {
    // message fields
    // @@protoc_insertion_point(field:protos.RegistrationStatus.status)
    pub status: ::protobuf::EnumOrUnknown<registration_status::Status>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.RegistrationStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RegistrationStatus {
    fn default() -> &'a RegistrationStatus {
        <RegistrationStatus as ::protobuf::Message>::default_instance()
    }
}

impl RegistrationStatus {
    pub fn new() -> RegistrationStatus {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &RegistrationStatus| { &m.status },
            |m: &mut RegistrationStatus| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RegistrationStatus>(
            "RegistrationStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RegistrationStatus {
    const NAME: &'static str = "RegistrationStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.status = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.status != ::protobuf::EnumOrUnknown::new(registration_status::Status::STATUS_UNSET) {
            my_size += ::protobuf::rt::int32_size(1, self.status.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.status != ::protobuf::EnumOrUnknown::new(registration_status::Status::STATUS_UNSET) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.status))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RegistrationStatus {
        RegistrationStatus::new()
    }

    fn clear(&mut self) {
        self.status = ::protobuf::EnumOrUnknown::new(registration_status::Status::STATUS_UNSET);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RegistrationStatus {
        static instance: RegistrationStatus = RegistrationStatus {
            status: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RegistrationStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RegistrationStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RegistrationStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegistrationStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `RegistrationStatus`
pub mod registration_status {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:protos.RegistrationStatus.Status)
    pub enum Status {
        // @@protoc_insertion_point(enum_value:protos.RegistrationStatus.Status.STATUS_UNSET)
        STATUS_UNSET = 0,
        // @@protoc_insertion_point(enum_value:protos.RegistrationStatus.Status.STATUS_SUBMIT)
        STATUS_SUBMIT = 1,
        // @@protoc_insertion_point(enum_value:protos.RegistrationStatus.Status.STATUS_VERIFY)
        STATUS_VERIFY = 2,
        // @@protoc_insertion_point(enum_value:protos.RegistrationStatus.Status.STATUS_DONE)
        STATUS_DONE = 3,
    }

    impl ::protobuf::Enum for Status {
        const NAME: &'static str = "Status";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Status> {
            match value {
                0 => ::std::option::Option::Some(Status::STATUS_UNSET),
                1 => ::std::option::Option::Some(Status::STATUS_SUBMIT),
                2 => ::std::option::Option::Some(Status::STATUS_VERIFY),
                3 => ::std::option::Option::Some(Status::STATUS_DONE),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Status> {
            match str {
                "STATUS_UNSET" => ::std::option::Option::Some(Status::STATUS_UNSET),
                "STATUS_SUBMIT" => ::std::option::Option::Some(Status::STATUS_SUBMIT),
                "STATUS_VERIFY" => ::std::option::Option::Some(Status::STATUS_VERIFY),
                "STATUS_DONE" => ::std::option::Option::Some(Status::STATUS_DONE),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Status] = &[
            Status::STATUS_UNSET,
            Status::STATUS_SUBMIT,
            Status::STATUS_VERIFY,
            Status::STATUS_DONE,
        ];
    }

    impl ::protobuf::EnumFull for Status {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("RegistrationStatus.Status").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Status {
        fn default() -> Self {
            Status::STATUS_UNSET
        }
    }

    impl Status {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Status>("RegistrationStatus.Status")
        }
    }
}

// @@protoc_insertion_point(message:protos.Registration)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Registration {
    // message fields
    // @@protoc_insertion_point(field:protos.Registration.email)
    pub email: ::std::string::String,
    ///  Used for storage on ui-bff backend
    // @@protoc_insertion_point(field:protos.Registration._code)
    pub _code: i32,
    // special fields
    // @@protoc_insertion_point(special_field:protos.Registration.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Registration {
    fn default() -> &'a Registration {
        <Registration as ::protobuf::Message>::default_instance()
    }
}

impl Registration {
    pub fn new() -> Registration {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "email",
            |m: &Registration| { &m.email },
            |m: &mut Registration| { &mut m.email },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "_code",
            |m: &Registration| { &m._code },
            |m: &mut Registration| { &mut m._code },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Registration>(
            "Registration",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Registration {
    const NAME: &'static str = "Registration";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.email = is.read_string()?;
                },
                800 => {
                    self._code = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.email.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.email);
        }
        if self._code != 0 {
            my_size += ::protobuf::rt::int32_size(100, self._code);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.email.is_empty() {
            os.write_string(1, &self.email)?;
        }
        if self._code != 0 {
            os.write_int32(100, self._code)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Registration {
        Registration::new()
    }

    fn clear(&mut self) {
        self.email.clear();
        self._code = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Registration {
        static instance: Registration = Registration {
            email: ::std::string::String::new(),
            _code: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Registration {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Registration").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Registration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Registration {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.Verify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Verify {
    // message fields
    // @@protoc_insertion_point(field:protos.Verify.email)
    pub email: ::std::string::String,
    // @@protoc_insertion_point(field:protos.Verify.code)
    pub code: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.Verify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Verify {
    fn default() -> &'a Verify {
        <Verify as ::protobuf::Message>::default_instance()
    }
}

impl Verify {
    pub fn new() -> Verify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "email",
            |m: &Verify| { &m.email },
            |m: &mut Verify| { &mut m.email },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &Verify| { &m.code },
            |m: &mut Verify| { &mut m.code },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Verify>(
            "Verify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Verify {
    const NAME: &'static str = "Verify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.email = is.read_string()?;
                },
                18 => {
                    self.code = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.email.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.email);
        }
        if !self.code.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.code);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.email.is_empty() {
            os.write_string(1, &self.email)?;
        }
        if !self.code.is_empty() {
            os.write_string(2, &self.code)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Verify {
        Verify::new()
    }

    fn clear(&mut self) {
        self.email.clear();
        self.code.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Verify {
        static instance: Verify = Verify {
            email: ::std::string::String::new(),
            code: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Verify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Verify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Verify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Verify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0esp_uibff.proto\x12\x06protos\"\xa2\x01\n\x12RegistrationStatus\x12\
    9\n\x06status\x18\x01\x20\x01(\x0e2!.protos.RegistrationStatus.StatusR\
    \x06status\"Q\n\x06Status\x12\x10\n\x0cSTATUS_UNSET\x10\0\x12\x11\n\rSTA\
    TUS_SUBMIT\x10\x01\x12\x11\n\rSTATUS_VERIFY\x10\x02\x12\x0f\n\x0bSTATUS_\
    DONE\x10\x03\"9\n\x0cRegistration\x12\x14\n\x05email\x18\x01\x20\x01(\tR\
    \x05email\x12\x13\n\x05_code\x18d\x20\x01(\x05R\x04Code\"2\n\x06Verify\
    \x12\x14\n\x05email\x18\x01\x20\x01(\tR\x05email\x12\x12\n\x04code\x18\
    \x02\x20\x01(\tR\x04codeB4Z2github.com/streamdal/snitch-protos/build/go/\
    protosJ\xde\x06\n\x06\x12\x04\0\0\"\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\
    \n\x08\n\x01\x02\x12\x03\x02\0\x0f\n\x08\n\x01\x08\x12\x03\x04\0I\n\t\n\
    \x02\x08\x0b\x12\x03\x04\0I\n\n\n\x02\x04\0\x12\x04\x06\0\x15\x01\n\n\n\
    \x03\x04\0\x01\x12\x03\x06\x08\x1a\n\x0c\n\x04\x04\0\x04\0\x12\x04\x07\
    \x02\x12\x03\n\x0c\n\x05\x04\0\x04\0\x01\x12\x03\x07\x07\r\n\r\n\x06\x04\
    \0\x04\0\x02\0\x12\x03\x08\x04\x15\n\x0e\n\x07\x04\0\x04\0\x02\0\x01\x12\
    \x03\x08\x04\x10\n\x0e\n\x07\x04\0\x04\0\x02\0\x02\x12\x03\x08\x13\x14\n\
    <\n\x06\x04\0\x04\0\x02\x01\x12\x03\x0b\x04\x16\x1a-\x20Submit\x20means\
    \x20the\x20user\x20is\x20not\x20registered\x20yet\n\n\x0e\n\x07\x04\0\
    \x04\0\x02\x01\x01\x12\x03\x0b\x04\x11\n\x0e\n\x07\x04\0\x04\0\x02\x01\
    \x02\x12\x03\x0b\x14\x15\nI\n\x06\x04\0\x04\0\x02\x02\x12\x03\x0e\x04\
    \x16\x1a:\x20Verify\x20means\x20the\x20user\x20is\x20registered\x20but\
    \x20not\x20verified\x20yet\n\n\x0e\n\x07\x04\0\x04\0\x02\x02\x01\x12\x03\
    \x0e\x04\x11\n\x0e\n\x07\x04\0\x04\0\x02\x02\x02\x12\x03\x0e\x14\x15\n?\
    \n\x06\x04\0\x04\0\x02\x03\x12\x03\x11\x04\x14\x1a0\x20Done\x20means\x20\
    the\x20user\x20is\x20registered\x20and\x20verified\n\n\x0e\n\x07\x04\0\
    \x04\0\x02\x03\x01\x12\x03\x11\x04\x0f\n\x0e\n\x07\x04\0\x04\0\x02\x03\
    \x02\x12\x03\x11\x12\x13\n\x0b\n\x04\x04\0\x02\0\x12\x03\x14\x02\x14\n\
    \x0c\n\x05\x04\0\x02\0\x06\x12\x03\x14\x02\x08\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03\x14\t\x0f\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x14\x12\x13\n\
    \n\n\x02\x04\x01\x12\x04\x17\0\x1c\x01\n\n\n\x03\x04\x01\x01\x12\x03\x17\
    \x08\x14\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x18\x02\x13\n\x0c\n\x05\x04\
    \x01\x02\0\x05\x12\x03\x18\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\
    \x18\t\x0e\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x18\x11\x12\nh\n\x04\
    \x04\x01\x02\x01\x12\x03\x1b\x02\x14\x1a$\x20Used\x20for\x20storage\x20o\
    n\x20ui-bff\x20backend\n\"5\x20protolint:disable:this\x20FIELD_NAMES_LOW\
    ER_SNAKE_CASE\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x1b\x02\x07\n\
    \x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x1b\x08\r\n\x0c\n\x05\x04\x01\x02\
    \x01\x03\x12\x03\x1b\x10\x13\n\n\n\x02\x04\x02\x12\x04\x1e\0\"\x01\n\n\n\
    \x03\x04\x02\x01\x12\x03\x1e\x08\x0e\n\x0b\n\x04\x04\x02\x02\0\x12\x03\
    \x1f\x02\x13\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x1f\x02\x08\n\x0c\n\
    \x05\x04\x02\x02\0\x01\x12\x03\x1f\t\x0e\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x03\x1f\x11\x12\n\x0b\n\x04\x04\x02\x02\x01\x12\x03!\x02\x12\n\x0c\
    \n\x05\x04\x02\x02\x01\x05\x12\x03!\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\
    \x01\x12\x03!\t\r\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03!\x10\x11b\x06p\
    roto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(RegistrationStatus::generated_message_descriptor_data());
            messages.push(Registration::generated_message_descriptor_data());
            messages.push(Verify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(registration_status::Status::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
