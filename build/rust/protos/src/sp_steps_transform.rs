// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steps/sp_steps_transform.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:protos.steps.TransformStep)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TransformStep {
    // message fields
    // @@protoc_insertion_point(field:protos.steps.TransformStep.path)
    pub path: ::std::string::String,
    // @@protoc_insertion_point(field:protos.steps.TransformStep.value)
    pub value: ::std::string::String,
    // @@protoc_insertion_point(field:protos.steps.TransformStep.type)
    pub type_: ::protobuf::EnumOrUnknown<TransformType>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.steps.TransformStep.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TransformStep {
    fn default() -> &'a TransformStep {
        <TransformStep as ::protobuf::Message>::default_instance()
    }
}

impl TransformStep {
    pub fn new() -> TransformStep {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "path",
            |m: &TransformStep| { &m.path },
            |m: &mut TransformStep| { &mut m.path },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &TransformStep| { &m.value },
            |m: &mut TransformStep| { &mut m.value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &TransformStep| { &m.type_ },
            |m: &mut TransformStep| { &mut m.type_ },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TransformStep>(
            "TransformStep",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TransformStep {
    const NAME: &'static str = "TransformStep";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.path = is.read_string()?;
                },
                18 => {
                    self.value = is.read_string()?;
                },
                24 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.path);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value);
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(TransformType::TRANSFORM_TYPE_UNKNOWN) {
            my_size += ::protobuf::rt::int32_size(3, self.type_.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.path.is_empty() {
            os.write_string(1, &self.path)?;
        }
        if !self.value.is_empty() {
            os.write_string(2, &self.value)?;
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(TransformType::TRANSFORM_TYPE_UNKNOWN) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TransformStep {
        TransformStep::new()
    }

    fn clear(&mut self) {
        self.path.clear();
        self.value.clear();
        self.type_ = ::protobuf::EnumOrUnknown::new(TransformType::TRANSFORM_TYPE_UNKNOWN);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TransformStep {
        static instance: TransformStep = TransformStep {
            path: ::std::string::String::new(),
            value: ::std::string::String::new(),
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TransformStep {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TransformStep").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TransformStep {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransformStep {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:protos.steps.TransformType)
pub enum TransformType {
    // @@protoc_insertion_point(enum_value:protos.steps.TransformType.TRANSFORM_TYPE_UNKNOWN)
    TRANSFORM_TYPE_UNKNOWN = 0,
    // @@protoc_insertion_point(enum_value:protos.steps.TransformType.TRANSFORM_TYPE_REPLACE_VALUE)
    TRANSFORM_TYPE_REPLACE_VALUE = 1,
    // @@protoc_insertion_point(enum_value:protos.steps.TransformType.TRANSFORM_TYPE_DELETE_FIELD)
    TRANSFORM_TYPE_DELETE_FIELD = 2,
    // @@protoc_insertion_point(enum_value:protos.steps.TransformType.TRANSFORM_TYPE_OBFUSCATE_VALUE)
    TRANSFORM_TYPE_OBFUSCATE_VALUE = 3,
    // @@protoc_insertion_point(enum_value:protos.steps.TransformType.TRANSFORM_TYPE_MASK_VALUE)
    TRANSFORM_TYPE_MASK_VALUE = 4,
}

impl ::protobuf::Enum for TransformType {
    const NAME: &'static str = "TransformType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TransformType> {
        match value {
            0 => ::std::option::Option::Some(TransformType::TRANSFORM_TYPE_UNKNOWN),
            1 => ::std::option::Option::Some(TransformType::TRANSFORM_TYPE_REPLACE_VALUE),
            2 => ::std::option::Option::Some(TransformType::TRANSFORM_TYPE_DELETE_FIELD),
            3 => ::std::option::Option::Some(TransformType::TRANSFORM_TYPE_OBFUSCATE_VALUE),
            4 => ::std::option::Option::Some(TransformType::TRANSFORM_TYPE_MASK_VALUE),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<TransformType> {
        match str {
            "TRANSFORM_TYPE_UNKNOWN" => ::std::option::Option::Some(TransformType::TRANSFORM_TYPE_UNKNOWN),
            "TRANSFORM_TYPE_REPLACE_VALUE" => ::std::option::Option::Some(TransformType::TRANSFORM_TYPE_REPLACE_VALUE),
            "TRANSFORM_TYPE_DELETE_FIELD" => ::std::option::Option::Some(TransformType::TRANSFORM_TYPE_DELETE_FIELD),
            "TRANSFORM_TYPE_OBFUSCATE_VALUE" => ::std::option::Option::Some(TransformType::TRANSFORM_TYPE_OBFUSCATE_VALUE),
            "TRANSFORM_TYPE_MASK_VALUE" => ::std::option::Option::Some(TransformType::TRANSFORM_TYPE_MASK_VALUE),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [TransformType] = &[
        TransformType::TRANSFORM_TYPE_UNKNOWN,
        TransformType::TRANSFORM_TYPE_REPLACE_VALUE,
        TransformType::TRANSFORM_TYPE_DELETE_FIELD,
        TransformType::TRANSFORM_TYPE_OBFUSCATE_VALUE,
        TransformType::TRANSFORM_TYPE_MASK_VALUE,
    ];
}

impl ::protobuf::EnumFull for TransformType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("TransformType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for TransformType {
    fn default() -> Self {
        TransformType::TRANSFORM_TYPE_UNKNOWN
    }
}

impl TransformType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<TransformType>("TransformType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1esteps/sp_steps_transform.proto\x12\x0cprotos.steps\"j\n\rTransform\
    Step\x12\x12\n\x04path\x18\x01\x20\x01(\tR\x04path\x12\x14\n\x05value\
    \x18\x02\x20\x01(\tR\x05value\x12/\n\x04type\x18\x03\x20\x01(\x0e2\x1b.p\
    rotos.steps.TransformTypeR\x04type*\xb1\x01\n\rTransformType\x12\x1a\n\
    \x16TRANSFORM_TYPE_UNKNOWN\x10\0\x12\x20\n\x1cTRANSFORM_TYPE_REPLACE_VAL\
    UE\x10\x01\x12\x1f\n\x1bTRANSFORM_TYPE_DELETE_FIELD\x10\x02\x12\"\n\x1eT\
    RANSFORM_TYPE_OBFUSCATE_VALUE\x10\x03\x12\x1d\n\x19TRANSFORM_TYPE_MASK_V\
    ALUE\x10\x04B:Z8github.com/streamdal/snitch-protos/build/go/protos/steps\
    J\xf0\x03\n\x06\x12\x04\0\0\x12\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\
    \x08\n\x01\x02\x12\x03\x02\0\x15\n\x08\n\x01\x08\x12\x03\x04\0O\n\t\n\
    \x02\x08\x0b\x12\x03\x04\0O\n\n\n\x02\x05\0\x12\x04\x06\0\x0c\x01\n\n\n\
    \x03\x05\0\x01\x12\x03\x06\x05\x12\n\x0b\n\x04\x05\0\x02\0\x12\x03\x07\
    \x02\x1d\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x07\x02\x18\n\x0c\n\x05\x05\
    \0\x02\0\x02\x12\x03\x07\x1b\x1c\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x08\
    \x02#\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x08\x02\x1e\n\x0c\n\x05\x05\
    \0\x02\x01\x02\x12\x03\x08!\"\n\x0b\n\x04\x05\0\x02\x02\x12\x03\t\x02\"\
    \n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\t\x02\x1d\n\x0c\n\x05\x05\0\x02\
    \x02\x02\x12\x03\t\x20!\n\x0b\n\x04\x05\0\x02\x03\x12\x03\n\x02%\n\x0c\n\
    \x05\x05\0\x02\x03\x01\x12\x03\n\x02\x20\n\x0c\n\x05\x05\0\x02\x03\x02\
    \x12\x03\n#$\n\x0b\n\x04\x05\0\x02\x04\x12\x03\x0b\x02\x20\n\x0c\n\x05\
    \x05\0\x02\x04\x01\x12\x03\x0b\x02\x1b\n\x0c\n\x05\x05\0\x02\x04\x02\x12\
    \x03\x0b\x1e\x1f\n\n\n\x02\x04\0\x12\x04\x0e\0\x12\x01\n\n\n\x03\x04\0\
    \x01\x12\x03\x0e\x08\x15\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0f\x02\x12\n\
    \x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0f\x02\x08\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03\x0f\t\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0f\x10\x11\n(\
    \n\x04\x04\0\x02\x01\x12\x03\x10\x02\x13\"\x1b\x20Should\x20this\x20be\
    \x20bytes?\x20~DS\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x10\x02\x08\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x10\t\x0e\n\x0c\n\x05\x04\0\x02\x01\
    \x03\x12\x03\x10\x11\x12\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x11\x02\x19\n\
    \x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x11\x02\x0f\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03\x11\x10\x14\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x11\
    \x17\x18b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(TransformStep::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(TransformType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
