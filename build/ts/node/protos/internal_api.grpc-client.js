// @generated by protobuf-ts 2.9.0 with parameter optimize_code_size,client_grpc1
// @generated from protobuf file "internal_api.proto" (package "protos", syntax proto3)
// tslint:disable
import { Internal } from "./internal_api.js";
import * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service protos.Internal
 */
export class InternalClient extends grpc.Client {
    _binaryOptions;
    constructor(address, credentials, options = {}, binaryOptions = {}) {
        super(address, credentials, options);
        this._binaryOptions = binaryOptions;
    }
    /**
     * Initial method that an SDK should call to register itself with the server.
     * The server will use this stream to send commands to the SDK via the
     * `CommandResponse` message. Clients should continuously listen for
     * CommandResponse messages and re-establish registration if the stream gets
     * disconnected.
     *
     * @generated from protobuf rpc: Register(protos.RegisterRequest) returns (stream protos.CommandResponse);
     */
    register(input, metadata, options) {
        const method = Internal.methods[0];
        return this.makeServerStreamRequest(`/${Internal.typeName}/${method.name}`, (value) => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value) => method.O.fromBinary(value, this._binaryOptions), input, metadata, options);
    }
    /**
     * SDK is responsible for sending heartbeats to the server to let the server
     * know about active consumers and producers.
     *
     * @generated from protobuf rpc: Heartbeat(protos.HeartbeatRequest) returns (protos.StandardResponse);
     */
    heartbeat(input, metadata, options, callback) {
        const method = Internal.methods[1];
        return this.makeUnaryRequest(`/${Internal.typeName}/${method.name}`, (value) => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value) => method.O.fromBinary(value, this._binaryOptions), input, metadata, options, callback);
    }
    /**
     * Use this method when Notify condition has been triggered; the server will
     * decide on what to do about the notification.
     *
     * @generated from protobuf rpc: Notify(protos.NotifyRequest) returns (protos.StandardResponse);
     */
    notify(input, metadata, options, callback) {
        const method = Internal.methods[2];
        return this.makeUnaryRequest(`/${Internal.typeName}/${method.name}`, (value) => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value) => method.O.fromBinary(value, this._binaryOptions), input, metadata, options, callback);
    }
    /**
     * Send periodic metrics to the server
     *
     * @generated from protobuf rpc: Metrics(protos.MetricsRequest) returns (protos.StandardResponse);
     */
    metrics(input, metadata, options, callback) {
        const method = Internal.methods[3];
        return this.makeUnaryRequest(`/${Internal.typeName}/${method.name}`, (value) => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value) => method.O.fromBinary(value, this._binaryOptions), input, metadata, options, callback);
    }
}
//# sourceMappingURL=internal_api.grpc-client.js.map