// @generated by protobuf-ts 2.9.0 with parameter optimize_code_size,client_grpc1
// @generated from protobuf file "external_api.proto" (package "protos", syntax proto3)
// tslint:disable
function _assert_this_initialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _get_prototype_of(o) {
    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _get_prototype_of(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _set_prototype_of(subClass, superClass);
}
function _possible_constructor_return(self, call) {
    if (call && (_type_of(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assert_this_initialized(self);
}
function _set_prototype_of(o, p) {
    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _set_prototype_of(o, p);
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _is_native_reflect_construct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _create_super(Derived) {
    var hasNativeReflectConstruct = _is_native_reflect_construct();
    return function _createSuperInternal() {
        var Super = _get_prototype_of(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _get_prototype_of(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possible_constructor_return(this, result);
    };
}
import { External } from "./external_api";
import * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service protos.External
 */ export var ExternalClient = /*#__PURE__*/ function(_grpc_Client) {
    "use strict";
    _inherits(ExternalClient, _grpc_Client);
    var _super = _create_super(ExternalClient);
    function ExternalClient(address, credentials) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, binaryOptions = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
        _class_call_check(this, ExternalClient);
        var _this;
        _this = _super.call(this, address, credentials, options);
        _define_property(_assert_this_initialized(_this), "_binaryOptions", void 0);
        _this._binaryOptions = binaryOptions;
        return _this;
    }
    _create_class(ExternalClient, [
        {
            /**
     * Build a service map
     *
     * @generated from protobuf rpc: GetServices(protos.GetServicesRequest) returns (protos.GetServicesResponse);
     */ key: "getServices",
            value: function getServices(input, metadata, options, callback) {
                var _this = this;
                var method = External.methods[0];
                return this.makeUnaryRequest("/".concat(External.typeName, "/").concat(method.name), function(value) {
                    return Buffer.from(method.I.toBinary(value, _this._binaryOptions));
                }, function(value) {
                    return method.O.fromBinary(value, _this._binaryOptions);
                }, input, metadata, options, callback);
            }
        },
        {
            /**
     * Figure out consumers/producers, pipelines and targets for a given service
     *
     * @generated from protobuf rpc: GetService(protos.GetServiceRequest) returns (protos.GetServiceResponse);
     */ key: "getService",
            value: function getService(input, metadata, options, callback) {
                var _this = this;
                var method = External.methods[1];
                return this.makeUnaryRequest("/".concat(External.typeName, "/").concat(method.name), function(value) {
                    return Buffer.from(method.I.toBinary(value, _this._binaryOptions));
                }, function(value) {
                    return method.O.fromBinary(value, _this._binaryOptions);
                }, input, metadata, options, callback);
            }
        },
        {
            /**
     * Get all available pipelines
     *
     * @generated from protobuf rpc: GetPipelines(protos.GetPipelinesRequest) returns (protos.GetPipelinesResponse);
     */ key: "getPipelines",
            value: function getPipelines(input, metadata, options, callback) {
                var _this = this;
                var method = External.methods[2];
                return this.makeUnaryRequest("/".concat(External.typeName, "/").concat(method.name), function(value) {
                    return Buffer.from(method.I.toBinary(value, _this._binaryOptions));
                }, function(value) {
                    return method.O.fromBinary(value, _this._binaryOptions);
                }, input, metadata, options, callback);
            }
        },
        {
            /**
     * Get a pipeline (and its steps)
     *
     * @generated from protobuf rpc: GetPipeline(protos.GetPipelineRequest) returns (protos.GetPipelineResponse);
     */ key: "getPipeline",
            value: function getPipeline(input, metadata, options, callback) {
                var _this = this;
                var method = External.methods[3];
                return this.makeUnaryRequest("/".concat(External.typeName, "/").concat(method.name), function(value) {
                    return Buffer.from(method.I.toBinary(value, _this._binaryOptions));
                }, function(value) {
                    return method.O.fromBinary(value, _this._binaryOptions);
                }, input, metadata, options, callback);
            }
        },
        {
            /**
     * Associate steps with a pipeline // Can also use this to set steps in one big push
     *
     * @generated from protobuf rpc: SetPipeline(protos.SetPipelineRequest) returns (protos.SetPipelineResponse);
     */ key: "setPipeline",
            value: function setPipeline(input, metadata, options, callback) {
                var _this = this;
                var method = External.methods[4];
                return this.makeUnaryRequest("/".concat(External.typeName, "/").concat(method.name), function(value) {
                    return Buffer.from(method.I.toBinary(value, _this._binaryOptions));
                }, function(value) {
                    return method.O.fromBinary(value, _this._binaryOptions);
                }, input, metadata, options, callback);
            }
        },
        {
            /**
     * Delete a pipeline
     *
     * @generated from protobuf rpc: DeletePipeline(protos.DeletePipelineRequest) returns (protos.DeletePipelineResponse);
     */ key: "deletePipeline",
            value: function deletePipeline(input, metadata, options, callback) {
                var _this = this;
                var method = External.methods[5];
                return this.makeUnaryRequest("/".concat(External.typeName, "/").concat(method.name), function(value) {
                    return Buffer.from(method.I.toBinary(value, _this._binaryOptions));
                }, function(value) {
                    return method.O.fromBinary(value, _this._binaryOptions);
                }, input, metadata, options, callback);
            }
        },
        {
            /**
     * Get steps associated with a pipeline
     *
     * @generated from protobuf rpc: GetSteps(protos.GetStepsRequest) returns (protos.GetStepsResponse);
     */ key: "getSteps",
            value: function getSteps(input, metadata, options, callback) {
                var _this = this;
                var method = External.methods[6];
                return this.makeUnaryRequest("/".concat(External.typeName, "/").concat(method.name), function(value) {
                    return Buffer.from(method.I.toBinary(value, _this._binaryOptions));
                }, function(value) {
                    return method.O.fromBinary(value, _this._binaryOptions);
                }, input, metadata, options, callback);
            }
        },
        {
            /**
     * Create a step
     *
     * @generated from protobuf rpc: CreateStep(protos.CreateStepRequest) returns (protos.CreateStepResponse);
     */ key: "createStep",
            value: function createStep(input, metadata, options, callback) {
                var _this = this;
                var method = External.methods[7];
                return this.makeUnaryRequest("/".concat(External.typeName, "/").concat(method.name), function(value) {
                    return Buffer.from(method.I.toBinary(value, _this._binaryOptions));
                }, function(value) {
                    return method.O.fromBinary(value, _this._binaryOptions);
                }, input, metadata, options, callback);
            }
        },
        {
            /**
     * Update a step
     *
     * @generated from protobuf rpc: UpdateStep(protos.UpdateStepRequest) returns (protos.UpdateStepResponse);
     */ key: "updateStep",
            value: function updateStep(input, metadata, options, callback) {
                var _this = this;
                var method = External.methods[8];
                return this.makeUnaryRequest("/".concat(External.typeName, "/").concat(method.name), function(value) {
                    return Buffer.from(method.I.toBinary(value, _this._binaryOptions));
                }, function(value) {
                    return method.O.fromBinary(value, _this._binaryOptions);
                }, input, metadata, options, callback);
            }
        },
        {
            /**
     * Delete a step
     *
     * @generated from protobuf rpc: DeleteStep(protos.DeleteStepRequest) returns (protos.DeleteStepResponse);
     */ key: "deleteStep",
            value: function deleteStep(input, metadata, options, callback) {
                var _this = this;
                var method = External.methods[9];
                return this.makeUnaryRequest("/".concat(External.typeName, "/").concat(method.name), function(value) {
                    return Buffer.from(method.I.toBinary(value, _this._binaryOptions));
                }, function(value) {
                    return method.O.fromBinary(value, _this._binaryOptions);
                }, input, metadata, options, callback);
            }
        },
        {
            /**
     * Test method
     *
     * @generated from protobuf rpc: Test(protos.TestRequest) returns (protos.TestResponse);
     */ key: "test",
            value: function test(input, metadata, options, callback) {
                var _this = this;
                var method = External.methods[10];
                return this.makeUnaryRequest("/".concat(External.typeName, "/").concat(method.name), function(value) {
                    return Buffer.from(method.I.toBinary(value, _this._binaryOptions));
                }, function(value) {
                    return method.O.fromBinary(value, _this._binaryOptions);
                }, input, metadata, options, callback);
            }
        }
    ]);
    return ExternalClient;
}(grpc.Client);
