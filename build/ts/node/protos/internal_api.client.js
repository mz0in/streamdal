// @generated by protobuf-ts 2.9.0 with parameter optimize_code_size
// @generated from protobuf file "internal_api.proto" (package "protos", syntax proto3)
// tslint:disable
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
import { Internal } from "./internal_api";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service protos.Internal
 */ export var InternalClient = /*#__PURE__*/ function() {
    "use strict";
    function InternalClient(_transport) {
        _class_call_check(this, InternalClient);
        _define_property(this, "_transport", void 0);
        _define_property(this, "typeName", void 0);
        _define_property(this, "methods", void 0);
        _define_property(this, "options", void 0);
        this._transport = _transport;
        this.typeName = Internal.typeName;
        this.methods = Internal.methods;
        this.options = Internal.options;
    }
    _create_class(InternalClient, [
        {
            /**
     * Initial method that an SDK should call to register itself with the server.
     * The server will use this stream to send commands to the SDK via the
     * `CommandResponse` message. Clients should continuously listen for
     * CommandResponse messages and re-establish registration if the stream gets
     * disconnected.
     *
     * @generated from protobuf rpc: Register(protos.RegisterRequest) returns (stream protos.CommandResponse);
     */ key: "register",
            value: function register(input, options) {
                var method = this.methods[0], opt = this._transport.mergeOptions(options);
                return stackIntercept("serverStreaming", this._transport, method, opt, input);
            }
        },
        {
            /**
     * SDK is responsible for sending heartbeats to the server to let the server
     * know about active consumers and producers.
     *
     * @generated from protobuf rpc: Heartbeat(protos.HeartbeatRequest) returns (protos.StandardResponse);
     */ key: "heartbeat",
            value: function heartbeat(input, options) {
                var method = this.methods[1], opt = this._transport.mergeOptions(options);
                return stackIntercept("unary", this._transport, method, opt, input);
            }
        },
        {
            /**
     * Use this method when Notify condition has been triggered; the server will
     * decide on what to do about the notification.
     *
     * @generated from protobuf rpc: Notify(protos.NotifyRequest) returns (protos.StandardResponse);
     */ key: "notify",
            value: function notify(input, options) {
                var method = this.methods[2], opt = this._transport.mergeOptions(options);
                return stackIntercept("unary", this._transport, method, opt, input);
            }
        },
        {
            /**
     * Send periodic metrics to the server
     *
     * @generated from protobuf rpc: Metrics(protos.MetricsRequest) returns (protos.StandardResponse);
     */ key: "metrics",
            value: function metrics(input, options) {
                var method = this.methods[3], opt = this._transport.mergeOptions(options);
                return stackIntercept("unary", this._transport, method, opt, input);
            }
        }
    ]);
    return InternalClient;
}();
