{
  "version": 3,
  "sources": ["../../@nanostores/preact/index.js"],
  "sourcesContent": ["import { useState, useEffect } from 'preact/hooks'\nimport { listenKeys } from 'nanostores'\n\nexport function useStore(store, opts = {}) {\n  let [, forceRender] = useState({})\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof store === 'function') {\n      throw new Error(\n        'Use useStore(Template(id)) or useSync() ' +\n          'from @logux/client/preact for templates'\n      )\n    }\n  }\n\n  useEffect(() => {\n    let batching, timer, unlisten\n    let rerender = () => {\n      if (!batching) {\n        batching = 1\n        timer = setTimeout(() => {\n          batching = undefined\n          forceRender({})\n        })\n      }\n    }\n    if (opts.keys) {\n      unlisten = listenKeys(store, opts.keys, rerender)\n    } else {\n      unlisten = store.listen(rerender)\n    }\n    return () => {\n      unlisten()\n      clearTimeout(timer)\n    }\n  }, [store, '' + opts.keys])\n\n  return store.get()\n}\n"],
  "mappings": ";;;;;;;;;;AAGO,SAAS,SAAS,OAAO,OAAO,CAAC,GAAG;AACzC,MAAI,CAAC,EAAE,WAAW,IAAI,EAAS,CAAC,CAAC;AAEjC,MAAI,MAAuC;AACzC,QAAI,OAAO,UAAU,YAAY;AAC/B,YAAM,IAAI;AAAA,QACR;AAAA,MAEF;AAAA,IACF;AAAA,EACF;AAEA,IAAU,MAAM;AACd,QAAI,UAAU,OAAO;AACrB,QAAI,WAAW,MAAM;AACnB,UAAI,CAAC,UAAU;AACb,mBAAW;AACX,gBAAQ,WAAW,MAAM;AACvB,qBAAW;AACX,sBAAY,CAAC,CAAC;AAAA,QAChB,CAAC;AAAA,MACH;AAAA,IACF;AACA,QAAI,KAAK,MAAM;AACb,iBAAW,WAAW,OAAO,KAAK,MAAM,QAAQ;AAAA,IAClD,OAAO;AACL,iBAAW,MAAM,OAAO,QAAQ;AAAA,IAClC;AACA,WAAO,MAAM;AACX,eAAS;AACT,mBAAa,KAAK;AAAA,IACpB;AAAA,EACF,GAAG,CAAC,OAAO,KAAK,KAAK,IAAI,CAAC;AAE1B,SAAO,MAAM,IAAI;AACnB;",
  "names": []
}
